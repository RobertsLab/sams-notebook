{
  "hash": "9fc9f82dc6825262b68e6d326ae4ee9b",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sam White\ntoc-title: Contents\ntoc-depth: 5\ntoc-location: left\ntitle: Data Wrangling - Reformat P.evermanni GFF to Valid GFF3 Using awk genometools and AGAT\ndate: '2025-01-10'\ndraft: false\nengine: knitr\ncategories: \n  - \"2025\"\n  - \"GFF\"\n  - \"genometools\"\n  - \"E5\"\n  - \"timeseries_molecular\"\n  - \"Porites evermanni\"\n  - \"coral\"\n  - \"AGAT\"\n---\n\n\n\n# INTRO\n\nThis notebook is part of the coral E5 [timeseries_molecular project](https://github.com/urol-e5/timeseries_molecular) (GitHub repo).\n\n::: {.callout-note}\nThe contents below are from markdown knitted from [`00.00-genome-GFF-formatting.Rmd`](https://github.com/urol-e5/timeseries_molecular/blob/99f0563a067ca9d010cb206dfd44b36d8f77de00/E-Peve/code/00.00-genome-GFF-formatting.Rmd) (commit `99f0563`).\n:::\n\n---\n\n# 1 Background\n\nThis notebook reformats the original *P.evermanni* GFF\n([Porites_evermanni_v1.annot.gff](../data/Porites_evermanni_v1.annot.gff)),\nwhich is not compliant with [the GFF\nstandard](https://github.com/the-sequence-ontology/specifications/blob/master/gff3.md)\n(GitHub page). The GFF is lacking the `gene` feature, which may (or may\nnot) be needed/useful for downstream processing. This notebook adds a\n`gene` feature. Additionally, it is lacking the `exon` feature. We’ve\ndecided to insert `exon` features which cover `UTR` and `CDS` features.\n\nFinally, despite the naming convention, there aren’t any actual\nannotations in that GFF, beyond the feature designations (i.e. no gene\nontology, no SwissProt IDs, gene names, etc.). This notebook does *not*\naddress those shortcomings.\n\n<div class=\"callout-note\">\n\nUnlike other scripts, this will output to [E-Peve/data](../data),\ninstead of an output directory in `../output`.\n\n</div>\n\n## 1.1 Software requirements\n\nRequires [genometools](https://github.com/genometools/genometools)\n(GitHub repo) to be installed and in the system `$PATH`.\n\nRequires [AGAT](https://github.com/NBISweden/AGAT) to be installed via\nconda/mamba for conversion to GTF.\n\n## 1.2 Inputs\n\n- [Porites_evermanni_v1.annot.gff](../data/Porites_evermanni_v1.annot.gff)\n\n## 1.3 Outputs\n\n- [Porites_evermanni_validated.gff3](../data/Porites_evermanni_validated.gff3)\n\n# 2 Create a Bash variables file\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"# Data directories\"\necho 'export repo_dir=~/gitrepos/urol-e5/timeseries_molecular'\necho 'export data_dir=${repo_dir}/E-Peve/data'\necho \"\"\n\necho \"# Input files\"\necho 'export original_gff=\"Porites_evermanni_v1.annot.gff\"'\necho 'export intermediate_gff=\"intermediate.gff\"'\necho 'export validated_gff=\"Porites_evermanni_validated.gff3\"'\necho \"\"\n\necho \"# Output files\"\necho 'export gtf=\"Porites_evermanni_validated.gtf\"'\necho \"\"\n\necho \"# Programs\"\necho 'export conda_path=\"/home/sam/programs/miniforge3-24.7.1-0/bin/mamba\"'\necho 'export conda_env_name=\"agat_env\"'\necho \"\"\n\necho \"# Print formatting\"\necho 'export line=\"--------------------------------------------------------\"'\necho \"\"\n} > .bashvars\n\ncat .bashvars\n```\n\n    #### Assign Variables ####\n\n    # Data directories\n    export repo_dir=~/gitrepos/urol-e5/timeseries_molecular\n    export data_dir=${repo_dir}/E-Peve/data\n\n    # Input files\n    export original_gff=\"Porites_evermanni_v1.annot.gff\"\n    export intermediate_gff=\"intermediate.gff\"\n    export validated_gff=\"Porites_evermanni_validated.gff3\"\n\n    # Output files\n    export gtf=\"Porites_evermanni_validated.gtf\"\n\n    # Programs\n    export conda_path=\"/home/sam/programs/miniforge3-24.7.1-0/bin/mamba\"\n    export conda_env_name=\"agat_env\"\n\n    # Print formatting\n    export line=\"--------------------------------------------------------\"\n\n# 3 Peak at original GFF\n\n``` bash\nsource .bashvars\n\nhead \"${data_dir}/${original_gff}\"\n```\n\n    Porites_evermani_scaffold_1 Gmove   mRNA    3107    4488    543 -   .   ID=Peve_00000001;Name=Peve_00000001;start=0;stop=1;cds_size=543\n    Porites_evermani_scaffold_1 Gmove   CDS 3107    3444    .   -   .   Parent=Peve_00000001\n    Porites_evermani_scaffold_1 Gmove   CDS 4284    4488    .   -   .   Parent=Peve_00000001\n    Porites_evermani_scaffold_1 Gmove   mRNA    424479  429034  2439.63 -   .   ID=Peve_00000002;Name=Peve_00000002;start=1;stop=1;cds_size=2019\n    Porites_evermani_scaffold_1 Gmove   CDS 424479  425361  .   -   .   Parent=Peve_00000002\n    Porites_evermani_scaffold_1 Gmove   CDS 426181  426735  .   -   .   Parent=Peve_00000002\n    Porites_evermani_scaffold_1 Gmove   CDS 427013  427140  .   -   .   Parent=Peve_00000002\n    Porites_evermani_scaffold_1 Gmove   CDS 427665  427724  .   -   .   Parent=Peve_00000002\n    Porites_evermani_scaffold_1 Gmove   CDS 428642  429034  .   -   .   Parent=Peve_00000002\n    Porites_evermani_scaffold_1 Gmove   mRNA    429394  438909  1570.66 +   .   ID=Peve_00000003;Name=Peve_00000003;start=1;stop=1;cds_size=1458\n\n## 3.1 Check features\n\n``` bash\nsource .bashvars\n\nawk '{print $3}' \"${data_dir}/${original_gff}\" | sort --unique\n```\n\n    CDS\n    mRNA\n    UTR\n\n# 4 Fix GFF\n\n``` bash\nsource .bashvars\n\nawk '\nBEGIN { OFS=\"\\t\"; mrna_count = 0; utr_count = 0; gene_count = 0; cds_count = 0; exon_count = 0 }\n{\n    if ($3 == \"mRNA\") {\n        split($9, attributes, \";\")\n        for (i in attributes) {\n            if (attributes[i] ~ /^ID=/) {\n                original_id = substr(attributes[i], 4)\n                gene_id = \"ID=gene-\" original_id\n                parent_id = \"Parent=gene-\" original_id\n                break\n            }\n        }\n        \n        # Increment the global mRNA counter\n        mrna_count++\n        \n        new_mrna_id = \"ID=mrna-\" sprintf(\"%05d\", mrna_count)\n        \n        # Store the mapping of original mRNA ID to new mRNA ID\n        mrna_map[original_id] = \"mrna-\" sprintf(\"%05d\", mrna_count)\n        \n        # Replace the old ID with the new mRNA ID\n        for (i in attributes) {\n            if (attributes[i] ~ /^ID=/) {\n                attributes[i] = new_mrna_id\n                break\n            }\n        }\n        $9 = attributes[1]\n        for (i = 2; i <= length(attributes); i++) {\n            $9 = $9 \";\" attributes[i]\n        }\n        $9 = $9 \";\" parent_id\n        print $1, $2, \"gene\", $4, $5, \".\", $7, $8, gene_id\n        print $0  # Print the original mRNA feature\n        \n        # Increment the gene counter and reset the CDS counter for each new gene\n        gene_count++\n    } else if ($3 == \"UTR\" || $3 == \"CDS\") {\n        split($9, attributes, \";\")\n        id_set = 0\n        parent_set = 0\n        for (i in attributes) {\n            if (attributes[i] ~ /^ID=/) {\n                id_set = 1\n                if ($3 == \"UTR\") {\n                    attributes[i] = \"ID=utr-\" sprintf(\"%05d\", ++utr_count)\n                } else if ($3 == \"CDS\") {\n                    attributes[i] = \"ID=cds-\" sprintf(\"%05d\", ++cds_count)\n                }\n            }\n            if (attributes[i] ~ /^Parent=/) {\n                parent_set = 1\n                original_parent_id = substr(attributes[i], 8)\n                if (original_parent_id in mrna_map) {\n                    attributes[i] = \"Parent=\" mrna_map[original_parent_id]\n                }\n            }\n        }\n        if (id_set == 0) {\n            if ($3 == \"UTR\") {\n                attributes[1] = \"ID=utr-\" sprintf(\"%05d\", ++utr_count) \";\" attributes[1]\n            } else if ($3 == \"CDS\") {\n                attributes[1] = \"ID=cds-\" sprintf(\"%05d\", ++cds_count) \";\" attributes[1]\n            }\n        }\n        if (parent_set == 0) {\n            attributes[length(attributes) + 1] = \"Parent=\" mrna_map[original_id]\n        }\n        $9 = attributes[1]\n        for (i = 2; i <= length(attributes); i++) {\n            $9 = $9 \";\" attributes[i]\n        }\n        print $1, $2, $3, $4, $5, $6, $7, $8, $9  # Print the original UTR or CDS feature\n        \n        # Add exon feature\n        exon_count++\n        new_exon_id = \"ID=exon-\" sprintf(\"%06d\", exon_count)\n        exon_attributes = new_exon_id\n        for (i = 1; i <= length(attributes); i++) {\n            if (attributes[i] !~ /^ID=/) {\n                exon_attributes = exon_attributes \";\" attributes[i]\n            }\n        }\n        # Ensure Parent attribute is included in exon attributes\n        if (parent_set == 1) {\n            exon_attributes = exon_attributes \";Parent=\" mrna_map[original_parent_id]\n        }\n        print $1, $2, \"exon\", $4, $5, $6, $7, $8, exon_attributes\n    }\n}\n' \"${data_dir}/${original_gff}\" > \"${data_dir}/${intermediate_gff}\"\n```\n\n## 4.1 Inspect intermediate GFF\n\n``` bash\nsource .bashvars\n\nhead \"${data_dir}\"/\"${intermediate_gff}\"\n```\n\n    Porites_evermani_scaffold_1 Gmove   gene    3107    4488    .   -   .   ID=gene-Peve_00000001\n    Porites_evermani_scaffold_1 Gmove   mRNA    3107    4488    543 -   .   ID=mrna-00001;Name=Peve_00000001;start=0;stop=1;cds_size=543;Parent=gene-Peve_00000001\n    Porites_evermani_scaffold_1 Gmove   CDS 3107    3444    .   -   .   ID=cds-00001;Parent=mrna-00001\n    Porites_evermani_scaffold_1 Gmove   exon    3107    3444    .   -   .   ID=exon-000001;Parent=mrna-00001\n    Porites_evermani_scaffold_1 Gmove   CDS 4284    4488    .   -   .   ID=cds-00002;Parent=mrna-00001\n    Porites_evermani_scaffold_1 Gmove   exon    4284    4488    .   -   .   ID=exon-000002;Parent=mrna-00001\n    Porites_evermani_scaffold_1 Gmove   gene    424479  429034  .   -   .   ID=gene-Peve_00000002\n    Porites_evermani_scaffold_1 Gmove   mRNA    424479  429034  2439.63 -   .   ID=mrna-00002;Name=Peve_00000002;start=1;stop=1;cds_size=2019;Parent=gene-Peve_00000002\n    Porites_evermani_scaffold_1 Gmove   CDS 424479  425361  .   -   .   ID=cds-00003;Parent=mrna-00002\n    Porites_evermani_scaffold_1 Gmove   exon    424479  425361  .   -   .   ID=exon-000003;Parent=mrna-00002\n\n# 5 Validate GFF\n\nValidate GFF using genometools `gff3`.\n\n- `-tidy`: Attempts to clean/fix any potential issues.\n\n- `-checkids`: Checks IDs.\n\n- `-retainids`: Retains IDs from input GFF instead of assigning new\n  ones.\n\n``` bash\nsource .bashvars\n\ngt gff3 \\\n-tidy \\\n-checkids \\\n-retainids \\\n-sort \\\n\"${data_dir}\"/\"${intermediate_gff}\" \\\n> \"${data_dir}\"/\"${validated_gff}\" \\\n2> \"${data_dir}\"/gt_gff3_validation_errors.log\n```\n\n## 5.1 Check for error(s) in validation\n\nProcess would stop if error occurred, so only need to check end of file.\n\n<div class=\"callout-note\">\n\nWarnings are expected, as they generally indicated modifications to the\nGFF to bring it into compliance.\n\n</div>\n\n``` bash\nsource .bashvars\n\ntail \"${data_dir}\"/gt_gff3_validation_errors.log\n```\n\n    warning: CDS feature on line 81189 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 0\n    warning: CDS feature on line 81191 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 2\n    warning: CDS feature on line 81193 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 2\n    warning: CDS feature on line 81197 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 0\n    warning: CDS feature on line 81199 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 0\n    warning: CDS feature on line 81203 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 0\n    warning: CDS feature on line 81205 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 0\n    warning: CDS feature on line 81207 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 2\n    warning: CDS feature on line 81209 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 0\n    warning: CDS feature on line 81211 in file \"/home/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/intermediate.gff\" has the wrong phase . -> correcting it to 0\n\n## 5.2 Inspect Validated GFF\n\n``` bash\nsource .bashvars\n\nhead \"${data_dir}\"/\"${validated_gff}\"\n```\n\n    ##gff-version 3\n    ##sequence-region   Porites_evermani_scaffold_1 3107 1802489\n    ##sequence-region   Porites_evermani_scaffold_10 16486 1155879\n    ##sequence-region   Porites_evermani_scaffold_100 2448 527357\n    ##sequence-region   Porites_evermani_scaffold_1000 5675 163688\n    ##sequence-region   Porites_evermani_scaffold_1001 5840 151448\n    ##sequence-region   Porites_evermani_scaffold_1002 3372 125467\n    ##sequence-region   Porites_evermani_scaffold_1003 139 162450\n    ##sequence-region   Porites_evermani_scaffold_1004 10061 159112\n    ##sequence-region   Porites_evermani_scaffold_1005 28090 152503\n\n# 6 Remove intermediate GFF\n\n``` bash\nsource .bashvars\n\nrm \"${data_dir}\"/\"${intermediate_gff}\"\n```\n\n# 7 Convert to GTF\n\n``` bash\nsource .bashvars\n\n# Sends progress to /dev/null to avoid crashing Rmd notebook\n\"${conda_path}\" run -n ${conda_env_name} \\\nagat_convert_sp_gff2gtf.pl \\\n--gff \"${data_dir}\"/\"${validated_gff}\" \\\n--output \"${data_dir}\"/${gtf} \\\n1> \"${data_dir}\"/agat.log \\\n2> /dev/null\n```\n\n## 7.1 Check AGAT GTF Log\n\n``` bash\nsource .bashvars\n\ncat \"${data_dir}\"/agat.log\n```\n\n    converting to GTF3\n    ********************************************************************************\n    *                              - Start parsing -                               *\n    ********************************************************************************\n    -------------------------- parse options and metadata --------------------------\n    => Accessing the feature level json files\n        Using standard /home/sam/programs/miniforge3-24.7.1-0/envs/agat_env/lib/site_perl/5.26.2/auto/share/dist/AGAT/features_level1.json file\n        Using standard /home/sam/programs/miniforge3-24.7.1-0/envs/agat_env/lib/site_perl/5.26.2/auto/share/dist/AGAT/features_level2.json file\n        Using standard /home/sam/programs/miniforge3-24.7.1-0/envs/agat_env/lib/site_perl/5.26.2/auto/share/dist/AGAT/features_level3.json file\n        Using standard /home/sam/programs/miniforge3-24.7.1-0/envs/agat_env/lib/site_perl/5.26.2/auto/share/dist/AGAT/features_spread.json file\n    => Attribute used to group features when no Parent/ID relationship exists:\n        * locus_tag\n        * gene_id\n    => merge_loci option deactivated\n    => Accessing Ontology\n        No ontology accessible from the gff file header!\n        We use the SOFA ontology distributed with AGAT:\n            /home/sam/programs/miniforge3-24.7.1-0/envs/agat_env/lib/site_perl/5.26.2/auto/share/dist/AGAT/so.obo\n        Read ontology /home/sam/programs/miniforge3-24.7.1-0/envs/agat_env/lib/site_perl/5.26.2/auto/share/dist/AGAT/so.obo:\n            4 root terms, and 2472 total terms, and 1436 leaf terms\n        Filtering ontology:\n            We found 1757 terms that are sequence_feature or is_a child of it.\n    -------------------------------- parse features --------------------------------\n    => GFF parser version used: 3\n\n    ********************************************************************************\n    *                               - End parsing -                                *\n    *                             done in 113 seconds                              *\n    ********************************************************************************\n\n    ********************************************************************************\n    *                               - Start checks -                               *\n    ********************************************************************************\n    ---------------------------- Check1: feature types -----------------------------\n    ----------------------------------- ontology -----------------------------------\n    All feature types in agreement with the Ontology.\n    ------------------------------------- agat -------------------------------------\n    AGAT can deal with all the encountered feature types (3rd column)\n    ------------------------------ done in 0 seconds -------------------------------\n\n    ------------------------------ Check2: duplicates ------------------------------\n    None found\n    ------------------------------ done in 0 seconds -------------------------------\n\n    -------------------------- Check3: sequential bucket ---------------------------\n    Nothing to check as sequential bucket!\n    ------------------------------ done in 0 seconds -------------------------------\n\n    --------------------------- Check4: l2 linked to l3 ----------------------------\n    No problem found\n    ------------------------------ done in 0 seconds -------------------------------\n\n    --------------------------- Check5: l1 linked to l2 ----------------------------\n    No problem found\n    ------------------------------ done in 0 seconds -------------------------------\n\n    --------------------------- Check6: remove orphan l1 ---------------------------\n    We remove only those not supposed to be orphan\n    None found\n    ------------------------------ done in 1 seconds -------------------------------\n\n    ------------------------------ Check7: check cds -------------------------------\n    No problem found\n    ------------------------------ done in 0 seconds -------------------------------\n\n    ----------------------------- Check8: check exons ------------------------------\n    No exons created\n    No exons locations modified\n    10475 exons removed that were supernumerary\n    No level2 locations modified\n    ------------------------------ done in 13 seconds ------------------------------\n\n    ------------------------------ Check9: check utrs ------------------------------\n    No UTRs created\n    No UTRs locations modified\n    No supernumerary UTRs removed\n    ------------------------------ done in 7 seconds -------------------------------\n\n    ------------------------ Check10: all level2 locations -------------------------\n    No problem found\n    ------------------------------ done in 6 seconds -------------------------------\n\n    ------------------------ Check11: all level1 locations -------------------------\n    No problem found\n    ------------------------------ done in 1 seconds -------------------------------\n\n    ---------------------- Check12: remove identical isoforms ----------------------\n    None found\n    ------------------------------ done in 0 seconds -------------------------------\n    ********************************************************************************\n    *                                - End checks -                                *\n    *                              done in 28 seconds                              *\n    ********************************************************************************\n\n    => OmniscientI total time: 141 seconds\n    Bye Bye\n\n## 7.2 Inspect GTF\n\n``` bash\nsource .bashvars\n\nhead \"${data_dir}\"/\"${gtf}\"\n```\n\n    ##gtf-version 3\n    ##sequence-region   Porites_evermani_scaffold_1 3107 1802489\n    ##sequence-region   Porites_evermani_scaffold_10 16486 1155879\n    ##sequence-region   Porites_evermani_scaffold_100 2448 527357\n    ##sequence-region   Porites_evermani_scaffold_1000 5675 163688\n    ##sequence-region   Porites_evermani_scaffold_1001 5840 151448\n    ##sequence-region   Porites_evermani_scaffold_1002 3372 125467\n    ##sequence-region   Porites_evermani_scaffold_1003 139 162450\n    ##sequence-region   Porites_evermani_scaffold_1004 10061 159112\n    ##sequence-region   Porites_evermani_scaffold_1005 28090 152503",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}