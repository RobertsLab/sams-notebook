{
  "hash": "c0faad769cffa551d8a8f93c128f9293",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sam White\ntoc-title: Contents\ntoc-depth: 5\ntoc-location: left\ntitle: Trimming - A.pulchra WGBS with fastp FastQC and MultiQC on Raven\ndate: '2025-01-02'\ndraft: false\nengine: knitr\ncategories: \n  - \"2025\"\n  - \"Acopora pulchra\"\n  - \"WGBS\"\n  - \"trimming\"\n  - \"fastp\"\n  - \"FastQC\"\n  - \"MultiQC\"\n  - \"Raven\"\nimage: \"/posts/2025/2025-01-02-Trimming---A.pulchra-WGBS-with-fastp-FastQC-and-MultiQC-on-Raven/20250102-apul-wgbs-trimmed-per-base-sequence-plot-01.png\"\n---\n\n\n\n# INTRO\n\nThis notebook is part of the coral E5 [timeseries_molecular project](https://github.com/urol-e5/timeseries_molecular) (GitHub repo). Whole genome bisulfite sequencing (WGBS) data was [received on 20241230](../../2024/2024-12-30-Data-Received---Coral-E5-WGBS-Time-Series-from-Azenta-Project-30-1067895835/index.qmd) (Notebook entry) and then [QC'd on 20241231](../../2024/2024-12-31-FastQC-MultiQC---A.pulchra-WGBS-E5-Timeseries/index.qmd). Based on initial QC, I decided to trim 25bp from the 5' end of each read. Trimming was done with [`fastp`](https://github.com/OpenGene/fastp), followed by [`FastQC`](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/) and [`MultiQC`](https://multiqc.info/).\n\n::: {.callout-note}\nThe contents below are from markdown knitted from [`01.20-D-Apul-WGBS-trimming-fastp-FastQC-MultiQC.Rmd`](https://github.com/urol-e5/timeseries_molecular/blob/05ca78c9c1b6fbbbfba709ea1911cd69b9324f69/D-Apul/code/01.20-D-Apul-WGBS-trimming-fastp-FastQC-MultiQC.Rmd) (commit `05ca78c`).\n:::\n\n\n\n# 1 Background\n\nThis notebook will trim raw WGBS FastQs using\n[fastp](https://github.com/OpenGene/fastp). Samples which generate an\nerror during trimming will attempt to be repaired using [BBTools\n`repairl.sh`](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/)\n(BBMap – Bushnell B. – sourceforge.net/projects/bbmap/). Trimming\nresults will be analyzed with FastQC and summarized by\n[MultiQC](https://github.com/MultiQC/MultiQC) (Ewels et al. 2016).\n\nBased off of the initial FastQC/MultiQC, we trimmed 25bp from each read.\n\n## 1.1 Inputs\n\nRaw WGBS FastQ files with the following pattern:\n\n- `*.fastq.gz`\n\n<div class=\"callout-note\">\n\nIf one needs to download the raw FastQs, please see\n[00.20-D-Apul-WGBS-reads-FastQC-MultiQC.Rmd](./00.20-D-Apul-WGBS-reads-FastQC-MultiQC.Rmd)\n\n</div>\n\n## 1.2 Outputs\n\nThe expected outputs will be:\n\n- `*_fastqc.html`: Individual FastQC reports.\n\n- `*fastp-trim*.fq.gz`: Trimmed FastQ files.\n\n- `*.md5`: Individual MD5 checksums for trimmed FastQs.\n\n- `*.fastp-trim.report.html`: Individual fastp trimming reports. HTML\n  format.\n\n- `*.fastp-trim.report.json`: Individual fastp trimming reports. JSON\n  format.\n\n- `multiqc_report.html`: A summary report of the alignment results\n  generated by [MultiQC](https://github.com/MultiQC/MultiQC), in HTML\n  format.\n\n  - Due to the large file sizes of FastQs, these cannot be hosted in the\n    [timeseries_molecular GitHub\n    repo](https://github.com/urol-e5/timeseries_molecular/tree/main). As\n    such these files are available for download here:\n\n    - <https://gannet.fish.washington.edu/gitrepos/urol-e5/timeseries_molecular/D-Apul/output/01.20-D-Apul-WGBS-trimming-fastp-FastQC-MultiQC/>\n\n# 2 Create a Bash variables file\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"# Data directories\"\necho 'export repo_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular'\necho 'export output_dir_top=${repo_dir}/D-Apul/output/01.20-D-Apul-WGBS-trimming-fastp-FastQC-MultiQC'\necho 'export raw_reads_dir=\"${repo_dir}/D-Apul/data/wgbs-raw-fastqs\"'\necho 'export trimmed_fastqs_dir=\"${output_dir_top}/trimmed-fastqs\"'\necho \"\"\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export bbmap_repair=\"${programs_dir}/bbmap-39.12/repair.sh\"'\necho 'export bismark_dir=\"${programs_dir}/Bismark-0.24.0\"'\necho 'export bowtie2_dir=\"${programs_dir}/bowtie2-2.4.4-linux-x86_64\"'\necho 'export fastp=\"${programs_dir}/fastp-v0.24.0/fastp\"'\necho 'export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"'\necho 'export multiqc=\"/home/sam/programs/mambaforge/bin/multiqc\"'\necho 'export samtools_dir=\"${programs_dir}/samtools-1.12\"'\necho \"\"\n\n\necho \"# Set FastQ filename patterns\"\necho \"export fastq_pattern='*.fastq.gz'\"\necho \"export R1_fastq_pattern='*_R1_*.fastq.gz'\"\necho \"export R2_fastq_pattern='*_R2_*.fastq.gz'\"\necho \"export trimmed_fastq_pattern='*fastp-trim*.fq.gz'\"\necho \"\"\n\necho \"# Set number of CPUs to use\"\necho 'export threads=40'\necho \"\"\n\n\necho \"## Inititalize arrays\"\necho 'export fastq_array_R1=()'\necho 'export fastq_array_R2=()'\necho 'export trimmed_fastqs_array=()'\necho 'export R1_names_array=()'\necho 'export R2_names_array=()'\necho \"\"\n\necho \"# Print formatting\"\necho 'export line=\"--------------------------------------------------------\"'\necho \"\"\n} > .bashvars\n\ncat .bashvars\n```\n\n    #### Assign Variables ####\n\n    # Data directories\n    export repo_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular\n    export output_dir_top=${repo_dir}/D-Apul/output/01.20-D-Apul-WGBS-trimming-fastp-FastQC-MultiQC\n    export raw_reads_dir=\"${repo_dir}/D-Apul/data/wgbs-raw-fastqs\"\n    export trimmed_fastqs_dir=\"${output_dir_top}/trimmed-fastqs\"\n\n    # Paths to programs\n    export programs_dir=\"/home/shared\"\n    export bbmap_repair=\"${programs_dir}/bbmap-39.12/repair.sh\"\n    export bismark_dir=\"${programs_dir}/Bismark-0.24.0\"\n    export bowtie2_dir=\"${programs_dir}/bowtie2-2.4.4-linux-x86_64\"\n    export fastp=\"${programs_dir}/fastp-v0.24.0/fastp\"\n    export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"\n    export multiqc=\"/home/sam/programs/mambaforge/bin/multiqc\"\n    export samtools_dir=\"${programs_dir}/samtools-1.12\"\n\n    # Set FastQ filename patterns\n    export fastq_pattern='*.fastq.gz'\n    export R1_fastq_pattern='*_R1_*.fastq.gz'\n    export R2_fastq_pattern='*_R2_*.fastq.gz'\n    export trimmed_fastq_pattern='*fastp-trim*.fq.gz'\n\n    # Set number of CPUs to use\n    export threads=40\n\n    ## Inititalize arrays\n    export fastq_array_R1=()\n    export fastq_array_R2=()\n    export trimmed_fastqs_array=()\n    export R1_names_array=()\n    export R2_names_array=()\n\n    # Print formatting\n    export line=\"--------------------------------------------------------\"\n\n# 3 Trimming and Error Repair\n\nTrimming will remove any Illumina sequencing adapters, as well as polyG\nand polyX (primarily polyA) sequences. Trimming will also remove the\nfirst 25bp from the 5’ end of each read.\n\nSamples generating an error during trimming will attempt to be repaired\nwith BBTools’ `repair.sh` script.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make output directory, if it doesn't exist\nmkdir --parents ${output_dir_top}\n\ncd \"${raw_reads_dir}\"\n\n\n# Create arrays of fastq R1 files and sample names\n# Do NOT quote R1_fastq_pattern variable\n\nfor fastq in ${R1_fastq_pattern}\ndo\n  fastq_array_R1+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R1_names_array+=(\"${fastq%%.*}\")\ndone\n\n# Create array of fastq R2 files\n# Do NOT quote R2_fastq_pattern variable\nfor fastq in ${R2_fastq_pattern}\ndo\n  fastq_array_R2+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R2_names_array+=(${fastq%%.*})\ndone\n\n\n\n# Run fastp on files\n# Adds JSON report output for downstream usage by MultiQC\n\necho \"Beginning fastp trimming.\"\necho \"\"\n\nfor index in \"${!fastq_array_R1[@]}\"\ndo\n  R1_sample_name=\"${R1_names_array[index]}\"\n  R2_sample_name=\"${R2_names_array[index]}\"\n  \n  stderr_PE_name=$(echo ${R1_sample_name} | awk -F\"_\" '{print $1}')\n  \n  ${fastp} \\\n  --in1 ${fastq_array_R1[index]} \\\n  --in2 ${fastq_array_R2[index]} \\\n  --detect_adapter_for_pe \\\n  --trim_poly_g \\\n  --trim_poly_x \\\n  --thread 16 \\\n  --trim_front1 25 \\\n  --trim_front2 25 \\\n  --html ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.report.html \\\n  --json ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.report.json \\\n  --out1 ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.fq.gz \\\n  --out2 ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.fq.gz \\\n  2> ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr\n  \n  grep --before-context 5 \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr\n  \n  # Check for fastp errors and then repair\n  if grep --quiet \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr; then\n      \n    rm ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.fq.gz\n    rm ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.fq.gz\n    \n    \n    ${bbmap_repair} \\\n    in1=${fastq_array_R1[index]} \\\n    in2=${fastq_array_R2[index]} \\\n    out1=\"${R1_sample_name}\".REPAIRED.fastq.gz \\\n    out2=\"${R2_sample_name}\".REPAIRED.fastq.gz \\\n    outs=/dev/null \\\n    2> \"${R1_sample_name}\".REPAIRED.stderr\n    \n    ${fastp} \\\n    --in1 \"${R1_sample_name}\".REPAIRED.fastq.gz \\\n    --in2 \"${R2_sample_name}\".REPAIRED.fastq.gz \\\n    --detect_adapter_for_pe \\\n    --trim_poly_g \\\n    --trim_poly_x \\\n    --thread ${threads} \\\n    --trim_front1 25 \\\n    --trim_front2 25 \\\n    --html ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.report.html \\\n    --json ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.report.json \\\n    --out1 ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.fq.gz \\\n    --out2 ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.REPAIRED.fq.gz \\\n    2> ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.REPAIRED.stderr\n \n    \n    if grep --quiet \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.REPAIRED.stderr; then\n      echo \"These ${stderr_PE_name} samples are broken.\"\n      echo \"Just give up.  :(\"\n      echo \"\"\n    fi\n  fi\n\n  echo \"Finished trimming:\"\n  echo \"${fastq_array_R1[index]}\"\n  echo \"${fastq_array_R1[index]}\"\n  echo \"\"\n  \n  # Generate md5 checksums for newly trimmed files\n  cd \"${output_dir_top}\"\n  md5sum \"${R1_sample_name}\".fastp-trim.fq.gz > \"${R1_sample_name}\".fastp-trim.fq.gz.md5\n  md5sum \"${R2_sample_name}\".fastp-trim.fq.gz > \"${R2_sample_name}\".fastp-trim.fq.gz.md5\n  \n  cd \"${raw_reads_dir}\"\ndone\n```\n\n    Beginning fastp trimming.\n\n    Finished trimming:\n    ACR-139-TP1_R1_001.fastq.gz\n    ACR-139-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-139-TP2_R1_001.fastq.gz\n    ACR-139-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-139-TP3_R1_001.fastq.gz\n    ACR-139-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-139-TP4_R1_001.fastq.gz\n    ACR-139-TP4_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-145-TP1_R1_001.fastq.gz\n    ACR-145-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-145-TP2_R1_001.fastq.gz\n    ACR-145-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-145-TP3_R1_001.fastq.gz\n    ACR-145-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-145-TP4_R1_001.fastq.gz\n    ACR-145-TP4_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-150-TP1_R1_001.fastq.gz\n    ACR-150-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-150-TP2_R1_001.fastq.gz\n    ACR-150-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-150-TP3_R1_001.fastq.gz\n    ACR-150-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-150-TP4_R1_001.fastq.gz\n    ACR-150-TP4_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-173-TP1_R1_001.fastq.gz\n    ACR-173-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-173-TP2_R1_001.fastq.gz\n    ACR-173-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-173-TP3_R1_001.fastq.gz\n    ACR-173-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-173-TP4_R1_001.fastq.gz\n    ACR-173-TP4_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-186-TP1_R1_001.fastq.gz\n    ACR-186-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-186-TP2_R1_001.fastq.gz\n    ACR-186-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-186-TP3_R1_001.fastq.gz\n    ACR-186-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-186-TP4_R1_001.fastq.gz\n    ACR-186-TP4_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-225-TP1_R1_001.fastq.gz\n    ACR-225-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-225-TP2_R1_001.fastq.gz\n    ACR-225-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-225-TP3_R1_001.fastq.gz\n    ACR-225-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-225-TP4_R1_001.fastq.gz\n    ACR-225-TP4_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-229-TP1_R1_001.fastq.gz\n    ACR-229-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-229-TP2_R1_001.fastq.gz\n    ACR-229-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-229-TP3_R1_001.fastq.gz\n    ACR-229-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-229-TP4_R1_001.fastq.gz\n    ACR-229-TP4_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-237-TP1_R1_001.fastq.gz\n    ACR-237-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-237-TP2_R1_001.fastq.gz\n    ACR-237-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-237-TP3_R1_001.fastq.gz\n    ACR-237-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-237-TP4_R1_001.fastq.gz\n    ACR-237-TP4_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-244-TP1_R1_001.fastq.gz\n    ACR-244-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-244-TP2_R1_001.fastq.gz\n    ACR-244-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-244-TP3_R1_001.fastq.gz\n    ACR-244-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-244-TP4_R1_001.fastq.gz\n    ACR-244-TP4_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-265-TP1_R1_001.fastq.gz\n    ACR-265-TP1_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-265-TP2_R1_001.fastq.gz\n    ACR-265-TP2_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-265-TP3_R1_001.fastq.gz\n    ACR-265-TP3_R1_001.fastq.gz\n\n    Finished trimming:\n    ACR-265-TP4_R1_001.fastq.gz\n    ACR-265-TP4_R1_001.fastq.gz\n\n# 4 FastQC\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${output_dir_top}\"\n\n############ RUN FASTQC ############\n\n\n# Create array of trimmed FastQs\ntrimmed_fastqs_array=(${trimmed_fastq_pattern})\n\n# Pass array contents to new variable as space-delimited list\ntrimmed_fastqc_list=$(echo \"${trimmed_fastqs_array[*]}\")\n\necho \"Beginning FastQC on trimmed reads...\"\necho \"\"\n\n# Run FastQC\n### NOTE: Do NOT quote raw_fastqc_list\n${fastqc} \\\n--threads ${threads} \\\n--outdir \"${output_dir_top}\" \\\n--quiet \\\n${trimmed_fastqc_list}\n\necho \"FastQC on trimmed reads complete!\"\necho \"\"\n\n############ END FASTQC ############\n```\n\n    Beginning FastQC on trimmed reads...\n\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    FastQC on trimmed reads complete!\n\n# 5 MultiQC\n\nUses `--cl-config \"sp: { fastp: { fn: '*report.json' } }\"` to update the\nMultiQC search pattern for the fastp module.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\ncd \"${output_dir_top}\"\n\n${multiqc} . \\\n--cl-config \"sp: { fastp: { fn: '*report.json' } }\" \\\n--interactive\n\n# Remove zip files\nrm *_fastqc.zip\n```\n\n      /// MultiQC 🔍 | v1.14\n\n    |           multiqc | MultiQC Version v1.27 now available!\n    |           multiqc | Search path : /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/D-Apul/output/01.20-D-Apul-WGBS-trimming-fastp-FastQC-MultiQC\n    |         searching | ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 440/440  \n    |             fastp | Found 40 reports\n    |            fastqc | Found 80 reports\n    |           multiqc | Compressing plot data\n    |           multiqc | Report      : multiqc_report.html\n    |           multiqc | Data        : multiqc_data\n    |           multiqc | MultiQC complete\n\n\n\n# RESULTS\n\nTrimming worked, and all samples show < 5% adapter contamination (which is considered acceptable by FastQC). However, it is still annoying that any samples show adapter contamination. Additionally, there are a number of samples with relatively high levels of polyA contamination (approaching 5% of reads), despite specifying that [`fastp`](https://github.com/OpenGene/fastp) should trim polyA sequences... Regardless, the results are acceptable.\n\n## Output files\n\nOutput files are here:\n\n- [https://gannet.fish.washington.edu/gitrepos/urol-e5/timeseries_molecular/D-Apul/output/01.20-D-Apul-WGBS-trimming-fastp-FastQC-MultiQC/](https://gannet.fish.washington.edu/gitrepos/urol-e5/timeseries_molecular/D-Apul/output/01.20-D-Apul-WGBS-trimming-fastp-FastQC-MultiQC/)\n\n   - MultiQC report (HTML)\n\n     - [multiqc_report.html](https://gannet.fish.washington.edu/gitrepos/urol-e5/timeseries_molecular/D-Apul/output/01.20-D-Apul-WGBS-trimming-fastp-FastQC-MultiQC/multiqc_report.html)\n\n# References\n\n\n<div id=\"refs\" class=\"references csl-bib-body hanging-indent\">\n\n<div id=\"ref-ewels2016\" class=\"csl-entry\">\n\nEwels, Philip, Måns Magnusson, Sverker Lundin, and Max Käller. 2016.\n“MultiQC: Summarize Analysis Results for Multiple Tools and Samples in a\nSingle Report.” *Bioinformatics* 32 (19): 3047–48.\n<https://doi.org/10.1093/bioinformatics/btw354>.\n\n</div>\n\n</div>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}