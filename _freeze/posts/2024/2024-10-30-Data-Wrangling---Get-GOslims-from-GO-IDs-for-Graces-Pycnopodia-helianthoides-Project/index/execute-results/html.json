{
  "hash": "a86ad8482db8f304e393167f8672a3db",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sam White\ntoc-title: Contents\ntoc-depth: 5\ntoc-location: left\ntitle: Data Wrangling - Get GOslims from GO IDs for Graces Pycnopodia helianthoides Project\ndate: '2024-10-30'\ndraft: false\nengine: knitr\ncategories: \n  - \"2024\"\n  - \"Pycnopodia helianthoides\"\n  - \"sunflower sea star\"\n  - \"gene ontology\"\n  - \"GO\"\n  - \"GOslim\"\n  - \"data wrangling\"\n---\n\n\n\n::: {.callout-note}\nThis notebook consists of a markdown rendering of [01-GO-to-GOslim.Rmd](https://github.com/RobertsLab/code/blob/1b8c7b6952d06ab91d4c190d99bea088f6a32707/r_projects/sam/20241030-phel-GO-to-GOslim/code/01-GO-to-GOslim.Rmd) (commit: `1b8c7b6`).\n:::\n\n01-GO-to-GOslim\n================\nSam White\n2024-10-30\n\n- [1 INTRO](#1-intro)\n  - [1.1 CODE](#11-code)\n    - [1.1.1 Variables](#111-variables)\n    - [1.1.2 Set GSEAbase location and download\n      `goslim_generic.obo`](#112-set-gseabase-location-and-download-goslim_genericobo)\n    - [1.1.3 Read in gene/GO file](#113-read-in-genego-file)\n    - [1.1.4 Remove rows with NA, remove whitespace in GO IDs column and\n      keep just gene/GO IDs\n      columns](#114-remove-rows-with-na-remove-whitespace-in-go-ids-column-and-keep-just-genego-ids-columns)\n    - [1.1.5 “Flatten” gene and GO IDs](#115-flatten-gene-and-go-ids)\n    - [1.1.6 Group](#116-group)\n    - [1.1.7 Map GO IDs to GOslims](#117-map-go-ids-to-goslims)\n    - [1.1.8 Extract GOslims from OBO](#118-extract-goslims-from-obo)\n    - [1.1.9 Get Biological Process (BP) GOslims associated with\n      provided GO\n      IDs.](#119-get-biological-process-bp-goslims-associated-with-provided-go-ids)\n    - [1.1.10 Map GO to GOslims](#1110-map-go-to-goslims)\n    - [1.1.11 Flatten GOslims](#1111-flatten-goslims)\n  - [1.2 Write slimdf to file](#12-write-slimdf-to-file)\n    - [1.2.1 Sort and select slmidf](#121-sort-and-select-slmidf)\n    - [1.2.2 Write formatted slim.count.df to\n      file](#122-write-formatted-slimcountdf-to-file)\n  - [1.3 Count unique Biological Process GO\n    IDs](#13-count-unique-biological-process-go-ids)\n- [2 REFERENCES](#2-references)\n\n# 1 INTRO\n\nThis notebook is setup to [take GO IDs and categorize them into their\ncorresponding\nGOslims](https://github.com/RobertsLab/resources/issues/1989) (GitHub\nIssue). Specifically, it will use the following tab-delimited input\nfile:\n\n- [DEGlist_same_2021-2022_forGOslim.tab](https://raw.githubusercontent.com/grace-ac/paper-pycno-sswd-2021-2022/d1cdf13c36085868df4ef4b75d2b7de03ef08d1c/analyses/25-compare-2021-2022/DEGlist_same_2021-2022_forGOslim.tab)\n  (commit: `d1cdf13`)\n\n[Desired output\nformat](https://github.com/RobertsLab/resources/issues/1989#issuecomment-2448757444)\n(GitHub Issue comment) is:\n\n    Term                                                    Count\n    anatomical structure development                        1137\n    signaling                                               600\n    cell differentiation                                    533\n    immune system process                                   331\n    lipid metabolic process                                 212\n\nThis was performed using R, with the following packages:\n\n- GSEABase (Martin Morgan 2017)\n- GO.db (Carlson 2017)\n- tidyverse (Wickham et al. 2019)\n\nIt also relied on gene ontology (GO) information from the [Gene Ontology\nConsortium](https://geneontology.org/) (Ashburner et al. 2000;\nAleksander et al. 2023).\n\n## 1.1 CODE\n\n``` r\nlibrary(GSEABase)\n```\n\n\n``` r\nlibrary(GO.db)\n```\n\n    ## \n\n``` r\nlibrary(knitr)\nlibrary(tidyverse)\n```\n\n``` r\nknitr::opts_chunk$set(\n  echo = TRUE,         # Display code chunks\n  eval = FALSE,        # Evaluate code chunks\n  warning = FALSE,     # Hide warnings\n  message = FALSE,     # Hide messages\n  comment = \"\"         # Prevents appending '##' to beginning of lines in code output\n)\n```\n\n### 1.1.1 Variables\n\n``` r\n# Column names corresponding to gene name/ID and GO IDs\nGO.ID.column <- \"Gene.Ontology.IDs\"\ngene.ID.column <- \"gene_id\"\n\n# Relative path or URL to input file\ninput.file <- \"https://raw.githubusercontent.com/grace-ac/paper-pycno-sswd-2021-2022/d1cdf13c36085868df4ef4b75d2b7de03ef08d1c/analyses/25-compare-2021-2022/DEGlist_same_2021-2022_forGOslim.tab\"\n\n\n##### Official GO info - no need to change #####\ngoslims_obo <- \"goslim_generic.obo\"\ngoslims_url <- \"http://current.geneontology.org/ontology/subsets/goslim_generic.obo\"\n```\n\n### 1.1.2 Set GSEAbase location and download `goslim_generic.obo`\n\n``` r\n# Find GSEAbase installation location\ngseabase_location <- find.package(\"GSEABase\")\n\n# Load path to GOslim OBO file\ngoslim_obo_destintation <- file.path(gseabase_location, \"extdata\", goslims_obo, fsep = \"/\")\n\n# Download the GOslim OBO file\ndownload.file(url = goslims_url, destfile = goslim_obo_destintation)\n\n# Loads package files\ngseabase_files <- system.file(\"extdata\", goslims_obo, package=\"GSEABase\")\n```\n\n### 1.1.3 Read in gene/GO file\n\n``` r\nfull.gene.df <- read.csv(file = input.file, header = TRUE, sep = \"\\t\")\n\nstr(full.gene.df)\n```\n\n    'data.frame':   4114 obs. of  3 variables:\n     $ gene_id          : chr  \"g21712\" \"g21713\" \"g15181\" \"g15182\" ...\n     $ uniprot_accession: chr  \"P54985\" \"Q8TDM6\" NA NA ...\n     $ Gene.Ontology.IDs: chr  \"GO:0003755; GO:0005737; GO:0006457; GO:0043231\" \"GO:0001837; GO:0005737; GO:0005886; GO:0005912; GO:0007165; GO:0008013; GO:0008092; GO:0008285; GO:0014069; GO:\"| __truncated__ NA NA ...\n\n### 1.1.4 Remove rows with NA, remove whitespace in GO IDs column and keep just gene/GO IDs columns\n\n``` r\n# Clean whitespace, filter NA/empty rows, select columns, and split GO terms using column name variables\ngene.GO.df <- full.gene.df %>%\n  mutate(!!GO.ID.column := str_replace_all(.data[[GO.ID.column]], \"\\\\s*;\\\\s*\", \";\")) %>% # Clean up spaces around \";\"\n  filter(!is.na(.data[[gene.ID.column]]) & !is.na(.data[[GO.ID.column]]) & .data[[GO.ID.column]] != \"\") %>% \n  select(all_of(c(gene.ID.column, GO.ID.column)))\n\n\nstr(gene.GO.df)\n```\n\n    'data.frame':   3295 obs. of  2 variables:\n     $ gene_id          : chr  \"g21712\" \"g21713\" \"g15183\" \"g7651\" ...\n     $ Gene.Ontology.IDs: chr  \"GO:0003755;GO:0005737;GO:0006457;GO:0043231\" \"GO:0001837;GO:0005737;GO:0005886;GO:0005912;GO:0007165;GO:0008013;GO:0008092;GO:0008285;GO:0014069;GO:0030011;G\"| __truncated__ \"GO:0000785;GO:0000978;GO:0000981;GO:0001228;GO:0001657;GO:0001701;GO:0001706;GO:0001707;GO:0003140;GO:0003180;G\"| __truncated__ \"GO:0005543;GO:0005737;GO:0005768;GO:0005829;GO:0005886;GO:0006897;GO:0007010;GO:0007015;GO:0030100;GO:0030659;G\"| __truncated__ ...\n\n### 1.1.5 “Flatten” gene and GO IDs\n\nThis flattens the file so all of the GO IDs per gene are separated into\none GO ID per gene per row.\n\n``` r\nflat.gene.GO.df <- gene.GO.df %>% separate_rows(!!sym(GO.ID.column), sep = \";\")\n\nstr(flat.gene.GO.df)\n```\n\n    tibble [42,028 × 2] (S3: tbl_df/tbl/data.frame)\n     $ gene_id          : chr [1:42028] \"g21712\" \"g21712\" \"g21712\" \"g21712\" ...\n     $ Gene.Ontology.IDs: chr [1:42028] \"GO:0003755\" \"GO:0005737\" \"GO:0006457\" \"GO:0043231\" ...\n\n### 1.1.6 Group\n\nGroups the genes by GO ID (i.e. lists all genes associated with each\nunique GO ID)\n\n``` r\ngrouped.gene.GO.df <- flat.gene.GO.df %>%\n  group_by(!!sym(GO.ID.column)) %>%\n  summarise(!!gene.ID.column := paste(.data[[gene.ID.column]], collapse = \",\"))\n\nstr(grouped.gene.GO.df)\n```\n\n    tibble [8,666 × 2] (S3: tbl_df/tbl/data.frame)\n     $ Gene.Ontology.IDs: chr [1:8666] \"GO:0000012\" \"GO:0000014\" \"GO:0000015\" \"GO:0000025\" ...\n     $ gene_id          : chr [1:8666] \"g22030,g22031,g16480,g4241\" \"g13422,g21327\" \"g12040\" \"g9214\" ...\n\n### 1.1.7 Map GO IDs to GOslims\n\nThe mapping steps were derived from this [bioconductor forum\nresponse](https://support.bioconductor.org/p/128407/#128408)\n\n``` r\n# Vector of GO IDs\ngo_ids <- grouped.gene.GO.df[[GO.ID.column]]\n\nstr(go_ids)\n```\n\n     chr [1:8666] \"GO:0000012\" \"GO:0000014\" \"GO:0000015\" \"GO:0000025\" ...\n\n### 1.1.8 Extract GOslims from OBO\n\nCreates new OBO Collection object of just GOslims, based on provided GO\nIDs.\n\n``` r\n# Create GSEAbase GOCollection using `go_ids`\nmyCollection <- GOCollection(go_ids)\n\n# Retrieve GOslims from GO OBO file set\nslim <- getOBOCollection(gseabase_files)\n\nstr(slim)\n```\n\n    Formal class 'OBOCollection' [package \"GSEABase\"] with 7 slots\n      ..@ .stanza     :'data.frame':    153 obs. of  1 variable:\n      .. ..$ value: chr [1:153] \"Root\" \"Term\" \"Term\" \"Term\" ...\n      ..@ .subset     :'data.frame':    22 obs. of  1 variable:\n      .. ..$ value: chr [1:22] \"Rhea list of ChEBI terms representing the major species at pH 7.3.\" \"Term not to be used for direct annotation\" \"Terms planned for obsoletion\" \"AGR slim\" ...\n      ..@ .kv         :'data.frame':    2075 obs. of  3 variables:\n      .. ..$ stanza_id: chr [1:2075] \".__Root__\" \".__Root__\" \".__Root__\" \".__Root__\" ...\n      .. ..$ key      : chr [1:2075] \"format-version\" \"data-version\" \"synonymtypedef\" \"synonymtypedef\" ...\n      .. ..$ value    : chr [1:2075] \"1.2\" \"go/2024-09-08/subsets/goslim_generic.owl\" \"syngo_official_label \\\"label approved by the SynGO project\\\"\" \"systematic_synonym \\\"Systematic synonym\\\" EXACT\" ...\n      ..@ evidenceCode: chr [1:26] \"EXP\" \"IDA\" \"IPI\" \"IMP\" ...\n      ..@ ontology    : chr NA\n      ..@ ids         : chr [1:141] \"GO:0000228\" \"GO:0000278\" \"GO:0000910\" \"GO:0001618\" ...\n      ..@ type        : chr \"OBO\"\n\n### 1.1.9 Get Biological Process (BP) GOslims associated with provided GO IDs.\n\n``` r\n# Retrieve Biological Process (BP) GOslims\nslimdf <- goSlim(myCollection, slim, \"BP\", verbose)\nstr(slimdf)\n```\n\n    'data.frame':   72 obs. of  3 variables:\n     $ Count  : int  45 12 8 331 37 51 13 3 58 38 ...\n     $ Percent: num  0.793 0.211 0.141 5.834 0.652 ...\n     $ Term   : chr  \"mitotic cell cycle\" \"cytokinesis\" \"cytoplasmic translation\" \"immune system process\" ...\n\n### 1.1.10 Map GO to GOslims\n\nPerforms mapping of of GOIDs to GOslims\n\nReturns:\n\n- GOslim IDs (as rownames)\n- GOslim terms\n- Counts of GO IDs matching to corresponding GOslim\n- Percentage of GO IDs matching to corresponding GOslim\n- GOIDs mapped to corresponding GOslim, in a semi-colon delimited format\n\n``` r\n# List of GOslims and all GO IDs from `go_ids`\ngomap <- as.list(GOBPOFFSPRING[rownames(slimdf)])\n\n# Maps `go_ids` to matching GOslims\nmapped <- lapply(gomap, intersect, ids(myCollection))\n\n# Append all mapped GO IDs to `slimdf`\n# `sapply` needed to apply paste() to create semi-colon delimited values\nslimdf$GO.IDs <- sapply(lapply(gomap, intersect, ids(myCollection)), paste, collapse=\";\")\n\n# Remove \"character(0) string from \"GO.IDs\" column\nslimdf$GO.IDs[slimdf$GO.IDs == \"character(0)\"] <- \"\"\n\n# Add self-matching GOIDs to \"GO.IDs\" column, if not present\nfor (go_id in go_ids) {\n  # Check if the go_id is present in the row names\n  if (go_id %in% rownames(slimdf)) {\n    # Check if the go_id is not present in the GO.IDs column\n    # Also removes white space \"trimws()\" and converts all to upper case to handle\n    # any weird, \"invisible\" formatting issues.\n    if (!go_id %in% trimws(toupper(strsplit(slimdf[go_id, \"GO.IDs\"], \";\")[[1]]))) {\n      # Append the go_id to the GO.IDs column with a semi-colon separator\n      if (length(slimdf$GO.IDs) > 0 && nchar(slimdf$GO.IDs[nrow(slimdf)]) > 0) {\n        slimdf[go_id, \"GO.IDs\"] <- paste0(slimdf[go_id, \"GO.IDs\"], \"; \", go_id)\n      } else {\n        slimdf[go_id, \"GO.IDs\"] <- go_id\n      }\n    }\n  }\n}\n\nstr(slimdf)\n```\n\n    'data.frame':   72 obs. of  4 variables:\n     $ Count  : int  45 12 8 331 37 51 13 3 58 38 ...\n     $ Percent: num  0.793 0.211 0.141 5.834 0.652 ...\n     $ Term   : chr  \"mitotic cell cycle\" \"cytokinesis\" \"cytoplasmic translation\" \"immune system process\" ...\n     $ GO.IDs : chr  \"GO:0000070;GO:0000082;GO:0000086;GO:0000132;GO:0000281;GO:0006977;GO:0007052;GO:0007076;GO:0007079;GO:0007080;G\"| __truncated__ \"GO:0000281;GO:0000915;GO:0000917;GO:0031991;GO:0032465;GO:0032467;GO:0036089;GO:0040038;GO:0061640;GO:0061952;G\"| __truncated__ \"GO:0001731;GO:0001732;GO:0002183;GO:1901194;GO:1903679;GO:2000765;GO:2000767; GO:0002181\" \"GO:0001771;GO:0001774;GO:0001776;GO:0001779;GO:0001782;GO:0001865;GO:0001867;GO:0001913;GO:0001916;GO:0001922;G\"| __truncated__ ...\n\n### 1.1.11 Flatten GOslims\n\n``` r\n# \"Flatten\" file so each row is single GO ID with corresponding GOslim\n# rownames_to_column needed to retain row name info\nslimdf_separated <- as.data.frame(slimdf %>%\n  rownames_to_column('GOslim') %>%\n  separate_rows(GO.IDs, sep = \";\"))\n\n# Group by unique GO ID\ngrouped_slimdf <- slimdf_separated %>%\n  filter(!is.na(GO.IDs) & GO.IDs != \"\") %>%\n  group_by(GO.IDs) %>%\n  summarize(GOslim = paste(GOslim, collapse = \";\"),\n            Term = paste(Term, collapse = \";\"))\n\n\nstr(grouped_slimdf)\n```\n\n    tibble [3,968 × 3] (S3: tbl_df/tbl/data.frame)\n     $ GO.IDs: chr [1:3968] \" GO:0000278\" \" GO:0002181\" \" GO:0002376\" \" GO:0003014\" ...\n     $ GOslim: chr [1:3968] \"GO:0000278\" \"GO:0002181\" \"GO:0002376\" \"GO:0003014\" ...\n     $ Term  : chr [1:3968] \"mitotic cell cycle\" \"cytoplasmic translation\" \"immune system process\" \"renal system process\" ...\n\n## 1.2 Write slimdf to file\n\n### 1.2.1 Sort and select slmidf\n\nSorts GOslims by `Count`, in descending order and then selects just the\n`Term` and `Count` columns.\n\n``` r\nslimdf.sorted <- slimdf %>% arrange(desc(Count))\n\nslim.count.df <- slimdf.sorted %>% \n  select(Term, Count)\n\nstr(slim.count.df)\n```\n\n    'data.frame':   72 obs. of  2 variables:\n     $ Term : chr  \"anatomical structure development\" \"signaling\" \"cell differentiation\" \"immune system process\" ...\n     $ Count: int  1137 600 533 331 212 164 158 158 148 123 ...\n\n### 1.2.2 Write formatted slim.count.df to file\n\n``` r\nwrite_tsv(slim.count.df, file = \"../output/01-GO-to-GOslim/counts.GOID-per-GOslim_term.tab\")\n```\n\n## 1.3 Count unique Biological Process GO IDs\n\n``` r\n# Flatten the list and count total GO IDs\ntotal_go_ids <- length(unlist(gomap))\n\n# Display the total count\ntotal_go_ids\n```\n\n    [1] 26534\n\n``` r\n# Unlist to extract all GO IDs, then find unique ones and count them\nunique_go_ids <- unique(unlist(gomap))\ntotal_unique_ids <- length(unique_go_ids)\n\n# Display the total count of unique GO IDs\ntotal_unique_ids\n```\n\n    [1] 17913\n\nTotal starting BP GO IDs: 26534\n\nTotal unique BP GO IDs: 17913\n\n# 2 REFERENCES\n\n<div id=\"refs\" class=\"references csl-bib-body hanging-indent\"\nentry-spacing=\"0\">\n\n<div id=\"ref-thegene2023\" class=\"csl-entry\">\n\nAleksander, Suzi A, James Balhoff, Seth Carbon, J Michael Cherry, Harold\nJ Drabkin, Dustin Ebert, Marc Feuermann, et al. 2023. “The Gene Ontology\nKnowledgebase in 2023.” Edited by A Baryshnikova. *GENETICS* 224 (1).\n<https://doi.org/10.1093/genetics/iyad031>.\n\n</div>\n\n<div id=\"ref-ashburner2000\" class=\"csl-entry\">\n\nAshburner, Michael, Catherine A. Ball, Judith A. Blake, David Botstein,\nHeather Butler, J. Michael Cherry, Allan P. Davis, et al. 2000. “Gene\nOntology: Tool for the Unification of Biology.” *Nature Genetics* 25\n(1): 25–29. <https://doi.org/10.1038/75556>.\n\n</div>\n\n<div id=\"ref-carlson2017\" class=\"csl-entry\">\n\nCarlson, Marc. 2017. “GO.db.” <https://doi.org/10.18129/B9.BIOC.GO.DB>.\n\n</div>\n\n<div id=\"ref-martinmorgan2017\" class=\"csl-entry\">\n\nMartin Morgan, Seth Falcon. 2017. “GSEABase.”\n<https://doi.org/10.18129/B9.BIOC.GSEABASE>.\n\n</div>\n\n<div id=\"ref-wickham2019\" class=\"csl-entry\">\n\nWickham, Hadley, Mara Averick, Jennifer Bryan, Winston Chang, Lucy\nMcGowan, Romain François, Garrett Grolemund, et al. 2019. “Welcome to\nthe Tidyverse.” *Journal of Open Source Software* 4 (43): 1686.\n<https://doi.org/10.21105/joss.01686>.\n\n</div>\n\n</div>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}