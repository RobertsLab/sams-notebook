{
  "hash": "f8653f430a968e1ab49441fa1ad27022",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sam White\ntoc-title: Contents\ntoc-depth: 5\ntoc-location: left\ntitle: sRNA-seq Paired Read Merging Explorations - Coral E5 Deep Dive\ndate: '2024-02-02'\ndraft: false\nengine: knitr\ncode-fold: false\ncategories: \n  - \"2024\"\n  - \"E5\"\n  - \"sRNA-seq\"\n  - \"merge\"\n  - \"bbmerge\"\n  - \"fastp\"\nbibliography: references.bib\n---\n\n\n\n\n# 1 INTRO\n\nOur previous sRNA-seq data analysis for this project revealed that the\nR2 reads didn’t seem to match with anything (specifically, no clade\nassignments when using\n[miRTrace](https://github.com/friedlanderlab/mirtrace)), which seemed\nodd. Since the insert sizes should be small for these libraries and the\nread lengths kind of long (150bp PE), we’d expect the resulting reads to\noverlap. And, in turn, R2 reads should be reverse complements of R1\nreads (and vice versa). After discussing things with Azenta (company\nwhich performed library construction and sequencing), they indicated\nthat their in-house pipeline discards the R2 reads because they come\nfrom the opposite strand and most miRNAs are found on the R1 strand.\n\nIt seemed like a bit of waste to discard all the data that exists in the\nR2 reads, so I wanted to explore merging the reads to see if we could\npreserve the R2 data. Additionally, I came across\n[XICRA](https://github.com/HCGB-IGTP/XICRA) (GitHub repo)\n\\[@sanchezherrero2021\\] which describes using paired-end sequence data\nto identify miRNA isoforms (isomiRs), suggesting that we should try to\nretain the R2 reads to improve our miRNA analyses.\n\nI decided to explore merging/trimming using two different sets of\nsoftware:\n\n- [BBMerge](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/bb-tools-user-guide/bbmerge-guide/)\n  \\[@bushnell2017\\]\n\n- [`fastp`](https://github.com/OpenGene/fastp)\\[@chen2023; @chen2018\\]\n\n[BBMerge](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/bb-tools-user-guide/bbmerge-guide/)\nseemed like a good tool, as it’s specifically designed to handle merging\nof Illumina PE sequencing reads. Plus, it’s part of the [BBTols\nsuite](https://sourceforge.net/projects/bbmap/), which has a number of\nother tools, and packages like this usually have nice\ncross-compatibility between the different tools.\n\n[`fastp`](https://github.com/OpenGene/fastp) has both trimming *and*\nmerging built into the tools itself, which I hadn’t previously realized\n(but, had never explored, since this isn’t how we usually work with PE\nsequencing data). I was simply going to use\n[`fastp`](https://github.com/OpenGene/fastp) for trimming, as it’s the\ntrimmer thta I’m most familiar with. I honestly thought I’d trim with\n[`fastp`](https://github.com/OpenGene/fastp), and then merge with\n[BBMerge](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/bb-tools-user-guide/bbmerge-guide/),\nbut the fact that [`fastp`](https://github.com/OpenGene/fastp) had it\nbuilt-in could make my life easier.\n\nSo, with all of that out of the way, let’s start the analysis. This will\nonly use a single set of PE sequencing reads, as an initial exploration.\nWe’ll decide on the best approach and then use that approach to run all\nthe sequencing data through the chosen “pipeline.”\n\n::: {.callout-note}\nCode below is knitted from [20240202-e5-coral-sRNAseq-merging-explorations.Rmd](https://github.com/RobertsLab/code/blob/5529ffc115d5ca9bc9e51459556bee803f67efc8/r_projects/sam/20240202-e5-coral-sRNAseq-merging-explorations/code/20240202-e5-coral-sRNAseq-merging-explorations.Rmd), commit `5529ffc`.\n:::\n\n- <a href=\"#1-intro\" id=\"toc-1-intro\">1 INTRO</a>\n- <a href=\"#2-setup\" id=\"toc-2-setup\">2 SETUP</a>\n  - <a href=\"#21-create-a-bash-variables-file\"\n    id=\"toc-21-create-a-bash-variables-file\">2.1 Create a Bash variables\n    file</a>\n  - <a href=\"#22-download-raw-srnaseq-reads\"\n    id=\"toc-22-download-raw-srnaseq-reads\">2.2 Download raw sRNAseq\n    reads</a>\n    - <a href=\"#221-verify-raw-read-checksums\"\n      id=\"toc-221-verify-raw-read-checksums\">2.2.1 Verify raw read\n      checksums</a>\n  - <a href=\"#23-create-adapters-fasta\"\n    id=\"toc-23-create-adapters-fasta\">2.3 Create adapters FastA</a>\n  - <a href=\"#24-fastp\" id=\"toc-24-fastp\">2.4 <code>fastp</code></a>\n    - <a href=\"#241-paired-end-trimming\"\n      id=\"toc-241-paired-end-trimming\">2.4.1 Paired-end Trimming</a>\n    - <a href=\"#242-single-end-trimming---r1-reads-only\"\n      id=\"toc-242-single-end-trimming---r1-reads-only\">2.4.2 Single-end\n      Trimming - R1 Reads Only</a>\n  - <a href=\"#25-bbmerge\" id=\"toc-25-bbmerge\">2.5 BBMerge</a>\n    - <a href=\"#251-raw-reads\" id=\"toc-251-raw-reads\">2.5.1 Raw reads</a>\n    - <a href=\"#252-trimmed-polyg-only\" id=\"toc-252-trimmed-polyg-only\">2.5.2\n      Trimmed PolyG Only</a>\n    - <a href=\"#253-trimmed-adapters--polyg\"\n      id=\"toc-253-trimmed-adapters--polyg\">2.5.3 Trimmed Adapters &amp;\n      PolyG</a>\n    - <a href=\"#254-trimmed-adapters--polyg-max-length-31bp\"\n      id=\"toc-254-trimmed-adapters--polyg-max-length-31bp\">2.5.4 Trimmed\n      Adapters &amp; PolyG Max Length 31bp</a>\n  - <a href=\"#26-fastqc\" id=\"toc-26-fastqc\">2.6 FastQC</a>\n  - <a href=\"#27-multiqc\" id=\"toc-27-multiqc\">2.7 MultiQC</a>\n\n\n\n# 2 SETUP\n\n## 2.1 Create a Bash variables file\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"## Data URL\"\necho 'export raw_reads_url=\"https://owl.fish.washington.edu/nightingales/P_evermanni/30-852430235/\"'\n\necho \"# Data directories\"\necho 'export fastqc_out_dir=\"./fastqc\"'\necho 'export raw_reads_dir=\"./raw\"'\necho 'export trimmed_fastqs_dir=\"./trimmed-reads\"'\necho \"\"\n\necho \"## NEB nebnext-small-rna-library-prep-set-for-illumina adapters\"\necho 'export first_adapter=\"AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC\"'\necho 'export second_adapter=\"GATCGTCGGACTGTAGAACTCTGAACGTGTAGATCTCGGTGGTCGCCGTATCATT\"'\necho \"\"\n\necho \"# Input/output files\"\necho 'export NEB_adapters_fasta=NEB-adapters.fasta'\necho \"\"\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export bbmerge=\"${programs_dir}/bbmap-39.06/bbmerge.sh\"'\necho 'export fastp=\"${programs_dir}/fastp\"'\necho 'export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"'\necho 'export multiqc=/home/sam/programs/mambaforge/bin/multiqc'\necho \"\"\n\necho \"# Set number of CPUs to use\"\necho 'export threads=46'\necho \"\"\n\necho \"# Initialize arrays\"\necho 'export trimmed_fastqs_array=()'\n\n\n} > .bashvars\n\ncat .bashvars\n```\n\n    #### Assign Variables ####\n\n    ## Data URL\n    export raw_reads_url=\"https://owl.fish.washington.edu/nightingales/P_evermanni/30-852430235/\"\n    # Data directories\n    export fastqc_out_dir=\"./fastqc\"\n    export raw_reads_dir=\"./raw\"\n    export trimmed_fastqs_dir=\"./trimmed-reads\"\n\n    ## NEB nebnext-small-rna-library-prep-set-for-illumina adapters\n    export first_adapter=\"AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC\"\n    export second_adapter=\"GATCGTCGGACTGTAGAACTCTGAACGTGTAGATCTCGGTGGTCGCCGTATCATT\"\n\n    # Input/output files\n    export NEB_adapters_fasta=NEB-adapters.fasta\n\n    # Paths to programs\n    export programs_dir=\"/home/shared\"\n    export bbmerge=\"${programs_dir}/bbmap-39.06/bbmerge.sh\"\n    export fastp=\"${programs_dir}/fastp\"\n    export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"\n    export multiqc=/home/sam/programs/mambaforge/bin/multiqc\n\n    # Set number of CPUs to use\n    export threads=46\n\n    # Initialize arrays\n    export trimmed_fastqs_array=()\n\n## 2.2 Download raw sRNAseq reads\n\nReads are downloaded from\n<https://owl.fish.washington.edu/nightingales/P_evermanni/30-852430235/>\n\nThe `--cut-dirs 3` command cuts the preceding directory structure\n(i.e. `nightingales/P_evermanni/30-852430235/`) so that we just end up\nwith the reads.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\nmkdir --parents \"${raw_reads_dir}\" \"${trimmed_fastqs_dir}\"\n\nwget \\\n--directory-prefix ${raw_reads_dir} \\\n--recursive \\\n--no-check-certificate \\\n--continue \\\n--cut-dirs 3 \\\n--no-host-directories \\\n--no-parent \\\n--quiet \\\n--accept \"sRNA-POR-79*,checksums.md5\" ${raw_reads_url}\n\nls -lh \"${raw_reads_dir}\"\n```\n\n    total 1.8G\n    -rw-r--r-- 1 sam sam  798 May 17  2023 checksums.md5\n    -rw-r--r-- 1 sam sam 899M May 17  2023 sRNA-POR-79-S1-TP2_R1_001.fastq.gz\n    -rw-r--r-- 1 sam sam 916M May 17  2023 sRNA-POR-79-S1-TP2_R2_001.fastq.gz\n\n### 2.2.1 Verify raw read checksums\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${raw_reads_dir}\"\n\n# Checksums file contains other files, so this just looks for the sRNAseq files.\ngrep \"sRNA-POR-79\" checksums.md5 | md5sum --check\n```\n\n    sRNA-POR-79-S1-TP2_R1_001.fastq.gz: OK\n    sRNA-POR-79-S1-TP2_R2_001.fastq.gz: OK\n\n## 2.3 Create adapters FastA\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\necho \"Creating adapters FastA.\"\necho \"\"\nadapter_count=0\n\n# Check for adapters file first\n# Then create adapters file if doesn't exist\nif [ -f \"${NEB_adapters_fasta}\" ]; then\n  echo \"${NEB_adapters_fasta} already exists. Nothing to do.\"\nelse\n  for adapter in \"${first_adapter}\" \"${second_adapter}\"\n  do\n    adapter_count=$((adapter_count + 1))\n    printf \">%s\\n%s\\n\" \"adapter_${adapter_count}\" \"${adapter}\"\n  done >> \"${NEB_adapters_fasta}\"\nfi\n\necho \"\"\necho \"Adapters FastA:\"\necho \"\"\ncat \"${NEB_adapters_fasta}\"\necho \"\"\n```\n\n    Creating adapters FastA.\n\n\n    Adapters FastA:\n\n    >adapter_1\n    AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC\n    >adapter_2\n    GATCGTCGGACTGTAGAACTCTGAACGTGTAGATCTCGGTGGTCGCCGTATCATT\n\n## 2.4 [`fastp`](https://github.com/OpenGene/fastp)\n\n[`fastp`](https://github.com/OpenGene/fastp) has many built-in\nfunctions, including before/after trimming plots, and read 1 and read 2\nmerging.\n\n<div class=\"callout-note\">\n\nSetting `--overlap_len_require 17` forces\n[`fastp`](https://github.com/OpenGene/fastp) to look at reads starting\nat base 17, instead of the default 30 and results in more accurate\nanalyses, since these are sRNA-seq libraries where the expected/desired\nread lengths will be 17 - 30bp in length.\n\n</div>\n\n### 2.4.1 Paired-end Trimming\n\nThe paired end trimming will examine how some of the trimming options\nimpact sequencing read lengths, quality, and subsequent merging.\n\n#### 2.4.1.1 PolyG Trimming Only\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-polyG_only.R1.fq.gz \\\n--out2 ./trimmed-reads/fastp-polyG_only.R2.fq.gz \\\n--disable_adapter_trimming \\\n--trim_poly_g \\\n--overlap_len_require 17 \\\n--thread ${threads} \\\n--html \"fastp-polyG-only.html\" \\\n--json \"fastp-polyG-only.json\" \\\n--report_title \"fastp-polyG-only\"\n```\n\n    WARNING: fastp uses up to 16 threads although you specified 46\n    Read1 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2604771220(87.8689%)\n    Q30 bases: 2427856243(81.9009%)\n\n    Read2 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2619314070(88.3595%)\n    Q30 bases: 2408732242(81.2557%)\n\n    Read1 after filtering:\n    total reads: 19450041\n    total bases: 1698288792\n    Q20 bases: 1478970498(87.0859%)\n    Q30 bases: 1370182460(80.6802%)\n\n    Read2 after filtering:\n    total reads: 19450041\n    total bases: 1849068926\n    Q20 bases: 1690862447(91.444%)\n    Q30 bases: 1596965342(86.3659%)\n\n    Filtering result:\n    reads passed filter: 38900082\n    reads failed due to low quality: 595592\n    reads failed due to too many N: 40\n    reads failed due to too short: 29404\n\n    Duplication rate: 10.4184%\n\n    Insert size peak (evaluated by paired-end reads): 29\n\n    JSON report: fastp-polyG-only.json\n    HTML report: fastp-polyG-only.html\n\n    /home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz --out1 ./trimmed-reads/fastp-polyG_only.R1.fq.gz --out2 ./trimmed-reads/fastp-polyG_only.R2.fq.gz --disable_adapter_trimming --trim_poly_g --overlap_len_require 17 --thread 46 --html fastp-polyG-only.html --json fastp-polyG-only.json --report_title fastp-polyG-only \n    fastp v0.23.2, time used: 43 seconds\n\n#### 2.4.1.2 Adapters & PolyG Trimming\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-adapters-polyG.R1.fq.gz \\\n--out2 ./trimmed-reads/fastp-adapters-polyG.R2.fq.gz \\\n--adapter_fasta NEB-adapters.fasta \\\n--trim_poly_g \\\n--overlap_len_require 17 \\\n--thread ${threads} \\\n--html \"fastp-adapters-polyG.html\" \\\n--json \"fastp-adapters-polyG.json\" \\\n--report_title \"fastp-adapters-polyG-only\"\n```\n\n    WARNING: fastp uses up to 16 threads although you specified 46\n    Read1 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2604771220(87.8689%)\n    Q30 bases: 2427856243(81.9009%)\n\n    Read2 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2619314070(88.3595%)\n    Q30 bases: 2408732242(81.2557%)\n\n    Read1 after filtering:\n    total reads: 16734573\n    total bases: 489646406\n    Q20 bases: 480139354(98.0584%)\n    Q30 bases: 466862298(95.3468%)\n\n    Read2 after filtering:\n    total reads: 16734573\n    total bases: 492483642\n    Q20 bases: 484765577(98.4328%)\n    Q30 bases: 469308001(95.2941%)\n\n    Filtering result:\n    reads passed filter: 33469146\n    reads failed due to low quality: 232788\n    reads failed due to too many N: 0\n    reads failed due to too short: 5823184\n    reads with adapter trimmed: 30461598\n    bases trimmed due to adapters: 2013836548\n\n    Duplication rate: 10.4184%\n\n    Insert size peak (evaluated by paired-end reads): 29\n\n    JSON report: fastp-adapters-polyG.json\n    HTML report: fastp-adapters-polyG.html\n\n    /home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz --out1 ./trimmed-reads/fastp-adapters-polyG.R1.fq.gz --out2 ./trimmed-reads/fastp-adapters-polyG.R2.fq.gz --adapter_fasta NEB-adapters.fasta --trim_poly_g --overlap_len_require 17 --thread 46 --html fastp-adapters-polyG.html --json fastp-adapters-polyG.json --report_title fastp-adapters-polyG-only \n    fastp v0.23.2, time used: 32 seconds\n\n#### 2.4.1.3 PolyG Trimming Max Length 31\n\nThis can’t be run because we know from the polyG only trimming, that\nmost read lengths are \\>89bp. As such, it will end up discarding all the\nreads…\n\n#### 2.4.1.4 Adapters & PolyG Trimming Max Length 31\n\n<div class=\"callout-note\">\n\nThe max length is based on the `fastp` insert peak size from the adapter\nand polyG trimming results, and previous evaluation of mean read lengths\nvia\n[`FastQC`](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/)\nand [`MultiQC`](https://multiqc.info/).\n\n</div>\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz \\\n--out2 ./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz \\\n--adapter_fasta NEB-adapters.fasta \\\n--trim_poly_g \\\n--overlap_len_require 17 \\\n--length_limit 31 \\\n--thread ${threads} \\\n--html \"fastp-adapters-polyG-31bp.html\" \\\n--json \"fastp-adapters-polyG-31bp.json\" \\\n--report_title \"fastp-adapters-polyG-31bp\"\n```\n\n    WARNING: fastp uses up to 16 threads although you specified 46\n    Read1 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2604771220(87.8689%)\n    Q30 bases: 2427856243(81.9009%)\n\n    Read2 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2619314070(88.3595%)\n    Q30 bases: 2408732242(81.2557%)\n\n    Read1 after filtering:\n    total reads: 13190855\n    total bases: 339210880\n    Q20 bases: 335529961(98.9149%)\n    Q30 bases: 327446980(96.532%)\n\n    Read2 after filtering:\n    total reads: 13190855\n    total bases: 338558013\n    Q20 bases: 335504115(99.098%)\n    Q30 bases: 325352134(96.0994%)\n\n    Filtering result:\n    reads passed filter: 26381710\n    reads failed due to low quality: 232788\n    reads failed due to too many N: 0\n    reads failed due to too short: 5354066\n    reads failed due to too long: 7556554\n    reads with adapter trimmed: 30461598\n    bases trimmed due to adapters: 2013836548\n\n    Duplication rate: 10.4184%\n\n    Insert size peak (evaluated by paired-end reads): 29\n\n    JSON report: fastp-adapters-polyG-31bp.json\n    HTML report: fastp-adapters-polyG-31bp.html\n\n    /home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz --out1 ./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz --out2 ./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz --adapter_fasta NEB-adapters.fasta --trim_poly_g --overlap_len_require 17 --length_limit 31 --thread 46 --html fastp-adapters-polyG-31bp.html --json fastp-adapters-polyG-31bp.json --report_title fastp-adapters-polyG-31bp \n    fastp v0.23.2, time used: 31 seconds\n\n#### 2.4.1.5 Adapters & PolyG Trimming Max Length 31 With Merge\n\nThis will attempt to merge the R1 and R2 reads.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\n--adapter_fasta NEB-adapters.fasta \\\n--trim_poly_g \\\n--overlap_len_require 17 \\\n--length_limit 31 \\\n--merge \\\n--merged_out ./trimmed-reads/fastp-adapters-polyG-31bp-merged.fq.gz \\\n--thread ${threads} \\\n--html \"fastp-adapters-polyG-31bp-merged.html\" \\\n--json \"fastp-adapters-polyG-31bp-merged.json\" \\\n--report_title \"fastp-adapters-polyG-31bp-merged\"\n```\n\n    WARNING: fastp uses up to 16 threads although you specified 46\n    Read1 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2604771220(87.8689%)\n    Q30 bases: 2427856243(81.9009%)\n\n    Read2 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2619314070(88.3595%)\n    Q30 bases: 2408732242(81.2557%)\n\n    Merged and filtered:\n    total reads: 12259576\n    total bases: 324356716\n    Q20 bases: 320917135(98.9396%)\n    Q30 bases: 313148708(96.5445%)\n\n    Filtering result:\n    reads passed filter: 26506174\n    reads failed due to low quality: 179320\n    reads failed due to too many N: 0\n    reads failed due to too short: 5774946\n    reads failed due to too long: 7064678\n    reads with adapter trimmed: 30461598\n    bases trimmed due to adapters: 2013836548\n    reads corrected by overlap analysis: 484376\n    bases corrected by overlap analysis: 766038\n\n    Duplication rate: 10.4184%\n\n    Insert size peak (evaluated by paired-end reads): 29\n\n    Read pairs merged: 12259576\n    % of original read pairs: 62.0344%\n    % in reads after filtering: 100%\n\n\n    JSON report: fastp-adapters-polyG-31bp-merged.json\n    HTML report: fastp-adapters-polyG-31bp-merged.html\n\n    /home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz --adapter_fasta NEB-adapters.fasta --trim_poly_g --overlap_len_require 17 --length_limit 31 --merge --merged_out ./trimmed-reads/fastp-adapters-polyG-31bp-merged.fq.gz --thread 46 --html fastp-adapters-polyG-31bp-merged.html --json fastp-adapters-polyG-31bp-merged.json --report_title fastp-adapters-polyG-31bp-merged \n    fastp v0.23.2, time used: 43 seconds\n\n### 2.4.2 Single-end Trimming - R1 Reads Only\n\nUsing just the R1 reads, per Azenta’s recommendation.\n\n#### 2.4.2.1 Auto-adapters & PolyG Trimming\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-R1-auto_adapters-polyG.fq.gz \\\n--trim_poly_g \\\n--thread ${threads} \\\n--html \"fastp-R1-auto_adapters-polyG.html\" \\\n--json \"fastp-R1-auto_adapters-polyG.json\" \\\n--report_title \"fastp-R1-auto_adapters-polyG\"\n```\n\n    Detecting adapter sequence for read1...\n    >Illumina TruSeq Adapter Read 1\n    AGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n\n    WARNING: fastp uses up to 16 threads although you specified 46\n    Read1 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2604771220(87.8689%)\n    Q30 bases: 2427856243(81.9009%)\n\n    Read1 after filtering:\n    total reads: 16984592\n    total bases: 540469705\n    Q20 bases: 522006375(96.5838%)\n    Q30 bases: 504657126(93.3738%)\n\n    Filtering result:\n    reads passed filter: 16984592\n    reads failed due to low quality: 30923\n    reads failed due to too many N: 1\n    reads failed due to too short: 2747043\n    reads with adapter trimmed: 18545632\n    bases trimmed due to adapters: 1166285709\n\n    Duplication rate (may be overestimated since this is SE data): 29.621%\n\n    JSON report: fastp-R1-auto_adapters-polyG.json\n    HTML report: fastp-R1-auto_adapters-polyG.html\n\n    /home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --out1 ./trimmed-reads/fastp-R1-auto_adapters-polyG.fq.gz --trim_poly_g --thread 46 --html fastp-R1-auto_adapters-polyG.html --json fastp-R1-auto_adapters-polyG.json --report_title fastp-R1-auto_adapters-polyG \n    fastp v0.23.2, time used: 31 seconds\n\n#### 2.4.2.2 Auto-adapters & PolyG Trimming Max Length 31\n\n<div class=\"callout-note\">\n\nThe max length is based on the `fastp` insert peak size from the adapter\nand polyG trimming results, and previous evaluation of mean read lengths\nvia\n[`FastQC`](https://www.bioinformatics.babraham.ac.uk/projects/fastqc/)\nand [`MultiQC`](https://multiqc.info/).\n\n</div>\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-R1-31bp-auto_adapters-polyG.fq.gz \\\n--trim_poly_g \\\n--length_limit 31 \\\n--thread ${threads} \\\n--html \"fastp-R1-auto_adapters-polyG-31bp.html\" \\\n--json \"fastp-R1-auto_adapters-polyG-31bp.json\" \\\n--report_title \"fastp-R1-auto_adapters-polyG-31bp\"\n```\n\n    Detecting adapter sequence for read1...\n    >Illumina TruSeq Adapter Read 1\n    AGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n\n    WARNING: fastp uses up to 16 threads although you specified 46\n    Read1 before filtering:\n    total reads: 19762559\n    total bases: 2964383850\n    Q20 bases: 2604771220(87.8689%)\n    Q30 bases: 2427856243(81.9009%)\n\n    Read1 after filtering:\n    total reads: 12801426\n    total bases: 328647991\n    Q20 bases: 325069951(98.9113%)\n    Q30 bases: 317201339(96.517%)\n\n    Filtering result:\n    reads passed filter: 12801426\n    reads failed due to low quality: 30923\n    reads failed due to too many N: 1\n    reads failed due to too short: 2747043\n    reads failed due to too long: 4183166\n    reads with adapter trimmed: 18545632\n    bases trimmed due to adapters: 1166285709\n\n    Duplication rate (may be overestimated since this is SE data): 29.621%\n\n    JSON report: fastp-R1-auto_adapters-polyG-31bp.json\n    HTML report: fastp-R1-auto_adapters-polyG-31bp.html\n\n    /home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --out1 ./trimmed-reads/fastp-R1-31bp-auto_adapters-polyG.fq.gz --trim_poly_g --length_limit 31 --thread 46 --html fastp-R1-auto_adapters-polyG-31bp.html --json fastp-R1-auto_adapters-polyG-31bp.json --report_title fastp-R1-auto_adapters-polyG-31bp \n    fastp v0.23.2, time used: 31 seconds\n\n## 2.5 BBMerge\n\n### 2.5.1 Raw reads\n\n[BBMerge](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/bb-tools-user-guide/bbmerge-guide/)\ndocumentations actually indicates that merging performs best using\n*raw*, untrimmed reads, so we’ll try that out first…\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n${bbmerge} \\\nin1=./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\nin2=./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\nadapters=./NEB-adapters.fasta \\\nmininsert=17 \\\nout=./trimmed-reads/sRNA-POR-79-S1-TP2-raw-bbmerge.fq.gz\n```\n\n    java -ea -Xmx1000m -Xms1000m -Djava.library.path=/home/shared/bbmap-39.06/jni/ -cp /home/shared/bbmap-39.06/current/ jgi.BBMerge in1=./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz in2=./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz adapters=./NEB-adapters.fasta mininsert=17 out=./trimmed-reads/sRNA-POR-79-S1-TP2-raw-bbmerge.fq.gz\n    Executing jgi.BBMerge [in1=./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz, in2=./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz, adapters=./NEB-adapters.fasta, mininsert=17, out=./trimmed-reads/sRNA-POR-79-S1-TP2-raw-bbmerge.fq.gz]\n    Version 39.06\n\n    Writing mergable reads merged.\n    Started output threads.\n    Total time: 56.412 seconds.\n\n    Pairs:                  19762559\n    Joined:                 151908      0.769%\n    Ambiguous:              0           0.000%\n    No Solution:            19610645    99.231%\n    Too Short:              6           0.000%\n    Adapters Expected:      60129       0.152%\n    Adapters Found:         58428       0.148%\n\n    Avg Insert:             131.5\n    Standard Deviation:     62.2\n    Mode:                   156\n\n    Insert range:           17 - 289\n    90th percentile:        203\n    75th percentile:        156\n    50th percentile:        156\n    25th percentile:        72\n    10th percentile:        32\n\n### 2.5.2 Trimmed PolyG Only\n\nRunning\n[BBMerge](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/bb-tools-user-guide/bbmerge-guide/)\non just raw reads yielded poor results (\\>99% of reads could *not* be\nmerged). Additionally, the average insert size was determined to be\n131.5bp, which is not going to be useful for sRNA-seq.\n\nI know that there’s a very large stretch of polyG sequence in the reads\n(likely due to the small insert size and “long” read length - Gs get\nadded as a “placeholder” base each cycle that exceeds the insert size),\nso let’s try merging reads *after* polyG sequence has been trimmed.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n${bbmerge} \\\nin1=./trimmed-reads/fastp-polyG_only.R1.fq.gz \\\nin2=./trimmed-reads/fastp-polyG_only.R2.fq.gz \\\nadapters=./NEB-adapters.fasta \\\nmininsert=17 \\\nout=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-polyG_only-bbmerge.fq.gz\n```\n\n    java -ea -Xmx1000m -Xms1000m -Djava.library.path=/home/shared/bbmap-39.06/jni/ -cp /home/shared/bbmap-39.06/current/ jgi.BBMerge in1=./trimmed-reads/fastp-polyG_only.R1.fq.gz in2=./trimmed-reads/fastp-polyG_only.R2.fq.gz adapters=./NEB-adapters.fasta mininsert=17 out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-polyG_only-bbmerge.fq.gz\n    Executing jgi.BBMerge [in1=./trimmed-reads/fastp-polyG_only.R1.fq.gz, in2=./trimmed-reads/fastp-polyG_only.R2.fq.gz, adapters=./NEB-adapters.fasta, mininsert=17, out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-polyG_only-bbmerge.fq.gz]\n    Version 39.06\n\n    Writing mergable reads merged.\n    Started output threads.\n    Total time: 52.363 seconds.\n\n    Pairs:                  19450041\n    Joined:                 12649853    65.038%\n    Ambiguous:              0           0.000%\n    No Solution:            5981377     30.753%\n    Too Short:              818811      4.210%\n    Adapters Expected:      12781441    32.857%\n    Adapters Found:         12553911    32.272%\n\n    Avg Insert:             30.0\n    Standard Deviation:     14.6\n    Mode:                   29\n\n    Insert range:           17 - 289\n    90th percentile:        37\n    75th percentile:        31\n    50th percentile:        29\n    25th percentile:        25\n    10th percentile:        21\n\nThe results from using polyG-trimmed reads are certainly much better\nthan just merging raw reads (12,649,853 reads could be joined this\ntime). Mean insert size is now determined to be 30bp, which is what we\nmight expect. However, the insert range (17 - 289) is still concerning,\nas reads \\>30bp likely aren’t usable. Adapter sequences are still\npresent, which are certainly contributing to some of the inability to\nmerge, as well as the large read lengths. So, let’s try merging reads\nthat have been trimmed of both polyG and adapter sequences.\n\n### 2.5.3 Trimmed Adapters & PolyG\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n${bbmerge} \\\nin1=./trimmed-reads/fastp-adapters-polyG.R1.fq.gz \\\nin2=./trimmed-reads/fastp-adapters-polyG.R2.fq.gz \\\nadapters=./NEB-adapters.fasta \\\nmininsert=17 \\\nout=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-bbmerge.fq.gz\n```\n\n    java -ea -Xmx1000m -Xms1000m -Djava.library.path=/home/shared/bbmap-39.06/jni/ -cp /home/shared/bbmap-39.06/current/ jgi.BBMerge in1=./trimmed-reads/fastp-adapters-polyG.R1.fq.gz in2=./trimmed-reads/fastp-adapters-polyG.R2.fq.gz adapters=./NEB-adapters.fasta mininsert=17 out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-bbmerge.fq.gz\n    Executing jgi.BBMerge [in1=./trimmed-reads/fastp-adapters-polyG.R1.fq.gz, in2=./trimmed-reads/fastp-adapters-polyG.R2.fq.gz, adapters=./NEB-adapters.fasta, mininsert=17, out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-bbmerge.fq.gz]\n    Version 39.06\n\n    Writing mergable reads merged.\n    Started output threads.\n    Total time: 27.985 seconds.\n\n    Pairs:                  16734573\n    Joined:                 15533284    92.822%\n    Ambiguous:              0           0.000%\n    No Solution:            603776      3.608%\n    Too Short:              597513      3.571%\n    Adapters Expected:      28222       0.084%\n    Adapters Found:         18307       0.055%\n\n    Avg Insert:             29.4\n    Standard Deviation:     13.2\n    Mode:                   29\n\n    Insert range:           17 - 289\n    90th percentile:        36\n    75th percentile:        31\n    50th percentile:        29\n    25th percentile:        25\n    10th percentile:        21\n\nWell, trimming adapters certainly made a difference, as well! Now,\n15,533,284 reads get joined (as opposed to 12,649,853 when using just\npolyG-trimmed reads). The average insert size changes very little, but,\noddly, the insert range remains the same (17 - 289).\n\nFor kicks, let’s throw the reads that have been trimmed to 31bp into\n[BBMerge](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/bb-tools-user-guide/bbmerge-guide/)\nand see what happens.\n\n### 2.5.4 Trimmed Adapters & PolyG Max Length 31bp\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n${bbmerge} \\\nin1=./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz \\\nin2=./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz \\\nadapters=./NEB-adapters.fasta \\\nmininsert=17 \\\nout=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-31bp-bbmerge.fq.gz\n```\n\n    java -ea -Xmx1000m -Xms1000m -Djava.library.path=/home/shared/bbmap-39.06/jni/ -cp /home/shared/bbmap-39.06/current/ jgi.BBMerge in1=./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz in2=./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz adapters=./NEB-adapters.fasta mininsert=17 out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-31bp-bbmerge.fq.gz\n    Executing jgi.BBMerge [in1=./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz, in2=./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz, adapters=./NEB-adapters.fasta, mininsert=17, out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-31bp-bbmerge.fq.gz]\n    Version 39.06\n\n    Writing mergable reads merged.\n    Started output threads.\n    Total time: 21.354 seconds.\n\n    Pairs:                  13190855\n    Joined:                 12346728    93.601%\n    Ambiguous:              0           0.000%\n    No Solution:            281891      2.137%\n    Too Short:              562236      4.262%\n    Adapters Expected:      4           0.000%\n    Adapters Found:         4           0.000%\n\n    Avg Insert:             26.3\n    Standard Deviation:     4.0\n    Mode:                   29\n\n    Insert range:           17 - 35\n    90th percentile:        31\n    75th percentile:        29\n    50th percentile:        28\n    25th percentile:        24\n    10th percentile:        20\n\nThis resulted in 12,346,728 reads being joined. This is on par with the\n12,649,853 reads joined when using just polyG-trimmed reads.\nAdditionally, we see the average insert size is 26.3bp, which is even\nmore inline with what we’d expect for miRNAs (22-24bp), and the insert\nrange is also inline with what we’d expect for these libraries (17 -\n35bp). However, this is about 20% fewer reads than the 15,533,284 reads\nwhen using polyG- and adapter-trimmed reads.\n\nMaybe I’ll test out the subsequent downstream analyses using these\ndifferent merging results…\n\n## 2.6 FastQC\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Populate array with FastQ files\nfastq_array=(./trimmed-reads/*.fq.gz)\n\n# Pass array contents to new variable\nfastqc_list=$(echo \"${fastq_array[*]}\")\n\n# Run FastQC\n# NOTE: Do NOT quote ${fastqc_list}\n${fastqc} \\\n--threads ${threads} \\\n--quiet \\\n--outdir ./ \\\n${fastqc_list}\n```\n\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n\n## 2.7 MultiQC\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n${multiqc} .\n```\n\n      /// MultiQC 🔍 | v1.14\n\n    |           multiqc | MultiQC Version v1.25 now available!\n    |           multiqc | Search path : /home/shared/8TB_HDD_01/sam/gitrepos/RobertsLab/code/r_projects/sam/20240202-e5-coral-sRNAseq-merging-explorations/code\n    |         searching | ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 57/57  \n    |            fastqc | Found 13 reports\n    |           multiqc | Compressing plot data\n    |           multiqc | Report      : multiqc_report.html\n    |           multiqc | Data        : multiqc_data\n    |           multiqc | MultiQC complete\n\nCheck out the [`MultiQC`](https://multiqc.info/) results here (HTML):\n\n- [MultiQC Report](./multiqc_report.html)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}