{
  "hash": "3c7ccd29f2cbb25f6c6837403b3f4115",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sam White\ntoc-title: Contents\ntoc-depth: 5\ntoc-location: left\ntitle: FastQC Trimming and QC - A.pulchra RNA-seq from Azenta Project 30-1047560508 Using fastp\ndate: '2024-10-05'\ndraft: false\nengine: knitr\ncategories: \n  - \"2024\"\n  - \"RNA-seq\"\n  - \"30-1047560508\"\n  - \"Azenta\"\n  - \"coral\"\n  - \"Acropora pulchra\"\n  - \"fastp\"\n  - \"FastQC\"\n  - \"MultiQC\"\n  - \"trimming\"\n  - \"E5\"\n  - \"timeseries_molecular\"\nbibliography: references.bib\n---\n\n\n\nThis Rmd file trims *A.pulchra* RNA-seq files using [fastp](https://github.com/OpenGene/fastp) [@chen2023], followed by quality checks with [FastQC](https://github.com/s-andrews/FastQC) and [MultiQC](https://multiqc.info/) [@ewels2016].\n\n::: callout-note\nThis notebook entry is knitted from [`urol-e5/timeseries_molecular/D-Apul/code/01.00-D-Apul-RNAseq-trimming-fastp-FastQC-MultiQC.Rmd`](https://github.com/urol-e5/timeseries_molecular/blob/5245d490fceb30c2ddecdbaa5dead3eccf56be95/D-Apul/code/01.00-D-Apul-RNAseq-trimming-fastp-FastQC-MultiQC.Rmd) (GitHub), commit `5245d49`.\n:::\n\nThis Rmd file trims *A.pulchra* RNA-seq files using [fastp](https://github.com/OpenGene/fastp) [@chen2023], followed by quality checks with [FastQC](https://github.com/s-andrews/FastQC) and [MultiQC](https://multiqc.info/) [@ewels2016].\n\nExpects input files formatted like so: `<number>--<sample_name>_R[12]_001.fastq.gz`\n\nAll trimmed FastQs produced by this script are here:\n\n[01.00-D-Apul-RNAseq-trimming-fastp-FastQC-MultiQC/trimmed-fastqs/](https://gannet.fish.washington.edu/Atumefaciens/gitrepos/urol-e5/timeseries_molecular/D-Apul/output/01.00-D-Apul-RNAseq-trimming-fastp-FastQC-MultiQC/trimmed-fastqs/)\n\n# 1 Create a Bash variables file\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"# Data directories\"\necho 'export timeseries_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular'\necho 'export output_dir_top=${timeseries_dir}/D-Apul/output/01.00-D-Apul-RNAseq-trimming-fastp-FastQC-MultiQC'\necho 'export raw_reads_dir=${timeseries_dir}/D-Apul/data/raw-fastqs'\necho 'export raw_reads_url=\"https://owl.fish.washington.edu/nightingales/E5-coral-time-series/30-1047560508/\"'\necho 'export trimmed_fastqs_dir=${output_dir_top}/trimmed-fastqs'\necho 'export trimmed_fastqc_dir=${output_dir_top}/trimmed-fastqc'\necho \"\"\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export fastp=\"${programs_dir}/fastp\"'\necho 'export fastqc=${programs_dir}/FastQC-0.12.1/fastqc'\necho 'export multiqc=/home/sam/programs/mambaforge/bin/multiqc'\necho \"\"\n\necho \"# Set FastQ filename patterns\"\necho \"export fastq_pattern='*.fastq.gz'\"\necho \"export R1_fastq_pattern='*_R1_*.fastq.gz'\"\necho \"export R2_fastq_pattern='*_R2_*.fastq.gz'\"\necho \"export trimmed_fastq_pattern='*fastp-trim.fq.gz'\"\necho \"\"\n\necho \"# Set number of CPUs to use\"\necho 'export threads=40'\necho \"\"\n\n\necho \"## Inititalize arrays\"\necho 'export fastq_array_R1=()'\necho 'export fastq_array_R2=()'\necho 'export raw_fastqs_array=()'\necho 'export R1_names_array=()'\necho 'export R2_names_array=()'\necho \"\"\n\necho \"# Programs associative array\"\necho \"declare -A programs_array\"\necho \"programs_array=(\"\necho '[fastp]=\"${fastp}\" \\'\necho '[fastqc]=\"${fastqc}\" \\'\necho '[multiqc]=\"${multiqc}\" \\'\necho \")\"\necho \"\"\n\necho \"# Print formatting\"\necho 'export line=\"--------------------------------------------------------\"'\necho \"\"\n} > .bashvars\n\ncat .bashvars\n```\n\n```         \n#### Assign Variables ####\n\n# Data directories\nexport timeseries_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular\nexport output_dir_top=${timeseries_dir}/D-Apul/output/01.00-D-Apul-RNAseq-trimming-fastp-FastQC-MultiQC\nexport raw_reads_dir=${timeseries_dir}/D-Apul/data/raw-fastqs\nexport raw_reads_url=\"https://owl.fish.washington.edu/nightingales/E5-coral-time-series/30-1047560508/\"\nexport trimmed_fastqs_dir=${output_dir_top}/trimmed-fastqs\nexport trimmed_fastqc_dir=${output_dir_top}/trimmed-fastqc\n\n# Paths to programs\nexport programs_dir=\"/home/shared\"\nexport fastp=\"${programs_dir}/fastp\"\nexport fastqc=${programs_dir}/FastQC-0.12.1/fastqc\nexport multiqc=/home/sam/programs/mambaforge/bin/multiqc\n\n# Set FastQ filename patterns\nexport fastq_pattern='*.fastq.gz'\nexport R1_fastq_pattern='*_R1_*.fastq.gz'\nexport R2_fastq_pattern='*_R2_*.fastq.gz'\nexport trimmed_fastq_pattern='*fastp-trim.fq.gz'\n\n# Set number of CPUs to use\nexport threads=40\n\n## Inititalize arrays\nexport fastq_array_R1=()\nexport fastq_array_R2=()\nexport raw_fastqs_array=()\nexport R1_names_array=()\nexport R2_names_array=()\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=(\n[fastp]=\"${fastp}\" \\\n[fastqc]=\"${fastqc}\" \\\n[multiqc]=\"${multiqc}\" \\\n)\n\n# Print formatting\nexport line=\"--------------------------------------------------------\"\n```\n\nIf needed, download raw RNA-seq.\n\nChange `eval=FALSE` to `eval=TRUE` to execute the next two chunks to download RNA-seq and then verify MD5 checksums.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make output directory if it doesn't exist\nmkdir --parents ${raw_reads_dir}\n\n# Create list of only A.pulchra sample names\nsample_list=$(awk -F \",\" 'NR > 2 {print $5\"\\t\"$6}' ${timeseries_dir}/data/rna_metadata.csv | awk -F\"[\\t-]\" '$2 == \"ACR\" {print $1}')\n\necho \"\"\necho \"${line}\"\necho \"\"\necho \"Sample list:\"\necho \"\"\necho \"${sample_list}\"\necho \"\"\necho \"${line}\"\necho \"\"\n\n\n# Use printf to format each item for use in wget\nformatted_list=$(printf \"*%s*,\" ${sample_list})\n\n# Remove the trailing comma and append *.md5\nformatted_list=\"${formatted_list%,},*.md5\"\n\n# Output the final wget command\necho \"\"\necho \"${line}\"\necho \"\"\necho \"Formatted wget accept list:\"\necho \"\"\necho \"wget --accept=\\\"$formatted_list\\\"\"\necho \"\"\necho \"${line}\"\necho \"\"\n\n# Run wget to retrieve FastQs and MD5 files\nwget \\\n--directory-prefix ${raw_reads_dir} \\\n--recursive \\\n--no-check-certificate \\\n--continue \\\n--cut-dirs 3 \\\n--no-host-directories \\\n--no-parent \\\n--quiet \\\n--accept=\\\"$formatted_list\\\" ${raw_reads_url}\n\nls -lh \"${raw_reads_dir}\"\n```\n\nVerify raw read checksums\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${raw_reads_dir}\"\n\n# Checksums file contains other files, so this just looks for the sRNAseq files.\nfor file in *.md5\ndo\n  md5sum --check \"${file}\"\ndone\n```\n\n# 2 Fastp Trimming\n\n[fastp](https://github.com/OpenGene/fastp) (Chen 2023) is set to auto-detect Illumina adapters, as well as trim the first 20bp from each read, as past experience shows these first 20bp are more inconsistent than the remainder of the read length.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make output directories, if it doesn't exist\nmkdir --parents \"${trimmed_fastqs_dir}\"\n\n# Change to raw reads directory\ncd \"${raw_reads_dir}\"\n\n# Create arrays of fastq R1 files and sample names\nfor fastq in ${R1_fastq_pattern}\ndo\n  fastq_array_R1+=(\"${fastq}\")\n  R1_names_array+=(\"$(echo \"${fastq}\" | awk -F\"_\" '{print $1}')\")\ndone\n\n# Create array of fastq R2 files\nfor fastq in ${R2_fastq_pattern}\ndo\n  fastq_array_R2+=(\"${fastq}\")\n  R2_names_array+=(\"$(echo \"${fastq}\" | awk -F\"_\" '{print $1}')\")\ndone\n\n# Create list of fastq files used in analysis\n# Create MD5 checksum for reference\nif [ ! -f \"${output_dir_top}\"/raw-fastq-checksums.md5 ]; then\nfor fastq in *.gz\n  do\n    md5sum ${fastq} >> \"${output_dir_top}\"/raw-fastq-checksums.md5\n  done\nfi\n\n# Run fastp on files\n# Adds JSON report output for downstream usage by MultiQC\nfor index in \"${!fastq_array_R1[@]}\"\ndo\n  R1_sample_name=$(echo \"${R1_names_array[index]}\")\n  R2_sample_name=$(echo \"${R2_names_array[index]}\")\n  ${fastp} \\\n  --in1 ${fastq_array_R1[index]} \\\n  --in2 ${fastq_array_R2[index]} \\\n  --detect_adapter_for_pe \\\n  --trim_front1 20 \\\n  --trim_front2 20 \\\n  --thread ${threads} \\\n  --html \"${trimmed_fastqs_dir}\"/\"${R1_sample_name}\".fastp-trim.report.html \\\n  --json \"${trimmed_fastqs_dir}\"/\"${R1_sample_name}\".fastp-trim.report.json \\\n  --out1 \"${trimmed_fastqs_dir}\"/\"${R1_sample_name}\"_R1_001.fastp-trim.fq.gz \\\n  --out2 \"${trimmed_fastqs_dir}\"/\"${R2_sample_name}\"_R2_001.fastp-trim.fq.gz \\\n  2>> \"${trimmed_fastqs_dir}\"/fastp.stderr\n\n  # Generate md5 checksums for newly trimmed files\n  cd \"${trimmed_fastqs_dir}\"\n  md5sum \"${R1_sample_name}\"_R1_001.fastp-trim.fq.gz > \"${R1_sample_name}\"_R1_001.fastp-trim.fq.gz.md5\n  md5sum \"${R2_sample_name}\"_R2_001.fastp-trim.fq.gz > \"${R2_sample_name}\"_R2_001.fastp-trim.fq.gz.md5\n  cd -\ndone\n```\n\n# 3 Quality Check with FastQC and MultiQC\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make output directory if it doesn't exist\nmkdir --parents \"${trimmed_fastqc_dir}\"\n\n############ RUN FASTQC ############\n\n\n# Create array of trimmed FastQs\ntrimmed_fastqs_array=(${trimmed_fastqs_dir}/${trimmed_fastq_pattern})\n\n# Pass array contents to new variable as space-delimited list\ntrimmed_fastqc_list=$(echo \"${trimmed_fastqs_array[*]}\")\n\necho \"Beginning FastQC on trimmed reads...\"\necho \"\"\n\n# Run FastQC\n### NOTE: Do NOT quote raw_fastqc_list\n${programs_array[fastqc]} \\\n--threads ${threads} \\\n--outdir ${trimmed_fastqs_dir} \\\n--quiet \\\n${trimmed_fastqc_list}\n\necho \"FastQC on trimmed reads complete!\"\necho \"\"\n\n############ END FASTQC ############\n\n############ RUN MULTIQC ############\necho \"Beginning MultiQC on trimmed FastQC...\"\necho \"\"\n\n${programs_array[multiqc]} ${trimmed_fastqs_dir} -o ${trimmed_fastqs_dir}\n\necho \"\"\necho \"MultiQC on trimmed FastQs complete.\"\necho \"\"\n\n############ END MULTIQC ############\n\necho \"Removing FastQC zip files.\"\necho \"\"\nrm ${trimmed_fastqs_dir}/*.zip\necho \"FastQC zip files removed.\"\necho \"\"\n```\n\n```         \nBeginning FastQC on trimmed reads...\n\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\nFastQC on trimmed reads complete!\n\nBeginning MultiQC on trimmed FastQC...\n\n\n  /// MultiQC 🔍 | v1.14\n\n|           multiqc | MultiQC Version v1.25.1 now available!\n|           multiqc | Search path : /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/D-Apul/output/01.00-D-Apul-RNAseq-trimming-fastp-FastQC-MultiQC/trimmed-fastqs\n|         searching | ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 442/442  \n|            fastqc | Found 88 reports\n|           multiqc | Compressing plot data\n|           multiqc | Previous MultiQC output found! Adjusting filenames..\n|           multiqc | Use -f or --force to overwrite existing reports instead\n|           multiqc | Report      : ../output/01.00-D-Apul-RNAseq-trimming-fastp-FastQC-MultiQC/trimmed-fastqs/multiqc_report_1.html\n|           multiqc | Data        : ../output/01.00-D-Apul-RNAseq-trimming-fastp-FastQC-MultiQC/trimmed-fastqs/multiqc_data_1\n|           multiqc | MultiQC complete\n|           multiqc | 1 flat-image plot used in the report due to large sample numbers\n|           multiqc | To force interactive plots, use the '--interactive' flag. \nSee the documentation.\n\nMultiQC on trimmed FastQs complete.\n\nRemoving FastQC zip files.\n\nFastQC zip files removed.\n```\n\n::: {#refs .references .csl-bib-body .hanging-indent}\n::: {#ref-chen2023 .csl-entry}\nChen, Shifu. 2023. “Ultrafast One-Pass FASTQ Data Preprocessing, Quality Control, and Deduplication Using Fastp.” *iMeta* 2 (2). <https://doi.org/10.1002/imt2.107>.\n:::\n\n::: {#ref-ewels2016 .csl-entry}\nEwels, Philip, Måns Magnusson, Sverker Lundin, and Max Käller. 2016. “MultiQC: Summarize Analysis Results for Multiple Tools and Samples in a Single Report.” *Bioinformatics* 32 (19): 3047–48. <https://doi.org/10.1093/bioinformatics/btw354>.\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}