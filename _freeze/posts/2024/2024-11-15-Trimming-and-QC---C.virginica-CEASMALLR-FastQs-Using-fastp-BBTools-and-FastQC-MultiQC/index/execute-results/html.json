{
  "hash": "02065a7a9e70ebef4395621ecaaec787",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sam White\ntoc-title: Contents\ntoc-depth: 5\ntoc-location: left\ntitle: Trimming and QC - C.virginica CEASMALLR FastQs Using fastp BBTools and FastQC-MultiQC\ndate: '2024-11-15'\ndraft: false\nengine: knitr\ncategories: \n  - \"2024\"\n  - \"trimming\"\n  - \"FastQC\"\n  - \"fastp\"\n  - \"BBTools\"\n  - \"MultiQC\"\n  - \"Crassostrea virginica\"\n  - \"WGBS\"\n  - \"BS-seq\"\n  - \"bisulfite\"\n  - \"Eastern oyster\"\n  - \"ceasmallr\"\n---\n\n\n\n# INTRO\n\nThis notebook is part of the [ceasmallr](https://github.com/sr320/ceasmallr) (GitHub repo) project, comparing DNA methylation in [_Crassostrea virginica_ (Eastern oyster)](https://en.wikipedia.org/wiki/Eastern_oyster) larvae and zygotes, via whole-genome bisulfite sequencing (WGBS).\n\nTrimming was done using [`fastp`](https://github.com/OpenGene/fastp). After an initial round of trimming, it was discovered that there were problems with some of the FastQ R1/R2 pairs - some did not have an equal number of reads. This leads to an error (and incomplete trimming) in those samples. As such, a step was added to assess these samples and repair them using the [BBTools](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/) `repair.sh` script.\n\nAlso, trimming had [originally been performed on 20220829](../../2022/2022-08-29-FastQ-Trimming-and-QC---C.virginica-Larval-BS-seq-Data-from-Lotterhos-Lab-and-Part-of-CEABIGR-Project-Using-fastp-on-Mox/index.qmd) (Notebook entry), but had not been fully assessed, which led to the discovery of the trimming errors, and the implemented repair in this notebook.\n\n:::: {.callout-note}\nThis notebook was copied from knitted markdown from [`00.00-trimming-fastp.Rmd`](https://github.com/sr320/ceasmallr/blob/daa2453e45377711745635b81a3bb3a9b894d546/code/00.00-trimming-fastp.Rmd) (commit `daa2453`)\n:::\n\n\n\n# 1 Description\n\nThis notebook will download raw WGBS FastQs, concatenate them (there\nwere multiple lanes run), and then trim them using\n[fastp](https://github.com/OpenGene/fastp). Samples which generate an\nerror during trimming will attempt to be repaired using [BBTools\n`repairl.sh`](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/)\n(BBMap – Bushnell B. – sourceforge.net/projects/bbmap/). Trimming\nresults will be analyzed with FastQC and summarized by\n[MultiQC](https://github.com/MultiQC/MultiQC) (Ewels et al. 2016).\n\n## 1.1 Inputs\n\nRaw FastQ files with the following pattern:\n\n- `*.fastq.gz`\n\n## 1.2 Outputs\n\nThe expected outputs will be:\n\n- `multiqc_report.html`: A summary report of the alignment results\n  generated by [MultiQC](https://github.com/MultiQC/MultiQC), in HTML\n  format.\n\n- `*fastp-trim*.fq.gz`: Trimmed FastQ files.\n\n  - Due to the large file sizes of FastQs, these cannot be hosted in the\n    [ceasmallr GitHub repo](https://github.com/sr320/ceasmallr). As such\n    these files are available for download here:\n\n    - <https://gannet.fish.washington.edu/gitrepos/ceasmallr/output/00.00-trimming-fastp/>\n\n# 2 Create a Bash variables file\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"# Data directories\"\necho 'export repo_dir=/home/shared/8TB_HDD_01/sam/gitrepos/ceasmallr'\necho 'export output_dir_top=${repo_dir}/output/00.00-trimming-fastp'\necho 'export raw_reads_url=\"https://owl.fish.washington.edu/nightingales/C_virginica/2018OALarvae_DNAm_discovery/\"'\necho 'export raw_reads_dir=\"${repo_dir}/data/raw_reads\"'\necho 'export trimmed_fastqs_dir=\"${output_dir_top}/trimmed-fastqs\"'\necho \"\"\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export bbmap_repair=\"${programs_dir}/bbmap-39.12/repair.sh\"'\necho 'export bismark_dir=\"${programs_dir}/Bismark-0.24.0\"'\necho 'export bowtie2_dir=\"${programs_dir}/bowtie2-2.4.4-linux-x86_64\"'\necho 'export fastp=\"${programs_dir}/fastp-v0.24.0/fastp\"'\necho 'export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"'\necho 'export multiqc=\"/home/sam/programs/mambaforge/bin/multiqc\"'\necho 'export samtools_dir=\"${programs_dir}/samtools-1.12\"'\necho \"\"\n\n\necho \"# Set FastQ filename patterns\"\necho \"export fastq_pattern='*.fastq.gz'\"\necho \"export R1_fastq_pattern='*_R1_*.fastq.gz'\"\necho \"export R2_fastq_pattern='*_R2_*.fastq.gz'\"\necho \"export trimmed_fastq_pattern='*fastp-trim*.fq.gz'\"\necho \"\"\n\necho \"# Set number of CPUs to use\"\necho 'export threads=40'\necho \"\"\n\n\necho \"## Inititalize arrays\"\necho 'export fastq_array_R1=()'\necho 'export fastq_array_R2=()'\necho 'export trimmed_fastqs_array=()'\necho 'export R1_names_array=()'\necho 'export R2_names_array=()'\necho \"\"\n\necho \"# Print formatting\"\necho 'export line=\"--------------------------------------------------------\"'\necho \"\"\n} > .bashvars\n\ncat .bashvars\n```\n\n    #### Assign Variables ####\n\n    # Data directories\n    export repo_dir=/home/shared/8TB_HDD_01/sam/gitrepos/ceasmallr\n    export output_dir_top=${repo_dir}/output/00.00-trimming-fastp\n    export raw_reads_url=\"https://owl.fish.washington.edu/nightingales/C_virginica/2018OALarvae_DNAm_discovery/\"\n    export raw_reads_dir=\"${repo_dir}/data/raw_reads\"\n    export trimmed_fastqs_dir=\"${output_dir_top}/trimmed-fastqs\"\n\n    # Paths to programs\n    export programs_dir=\"/home/shared\"\n    export bbmap_repair=\"${programs_dir}/bbmap-39.12/repair.sh\"\n    export bismark_dir=\"${programs_dir}/Bismark-0.24.0\"\n    export bowtie2_dir=\"${programs_dir}/bowtie2-2.4.4-linux-x86_64\"\n    export fastp=\"${programs_dir}/fastp-v0.24.0/fastp\"\n    export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"\n    export multiqc=\"/home/sam/programs/mambaforge/bin/multiqc\"\n    export samtools_dir=\"${programs_dir}/samtools-1.12\"\n\n    # Set FastQ filename patterns\n    export fastq_pattern='*.fastq.gz'\n    export R1_fastq_pattern='*_R1_*.fastq.gz'\n    export R2_fastq_pattern='*_R2_*.fastq.gz'\n    export trimmed_fastq_pattern='*fastp-trim*.fq.gz'\n\n    # Set number of CPUs to use\n    export threads=40\n\n    ## Inititalize arrays\n    export fastq_array_R1=()\n    export fastq_array_R2=()\n    export trimmed_fastqs_array=()\n    export R1_names_array=()\n    export R2_names_array=()\n\n    # Print formatting\n    export line=\"--------------------------------------------------------\"\n\n# 3 Download raw reads\n\nThe `--cut-dirs 2` command cuts the preceding directory structure\n(i.e. `nightingales/C_virginica/`) so that we just end up with the\nreads.\n\n``` bash\n\n# Load bash variables into memory\nsource .bashvars\n\n# Create directory, if it doesn't exist\nmkdir --parents ${raw_reads_dir}\n\nwget \\\n--directory-prefix ${raw_reads_dir} \\\n--recursive \\\n--no-check-certificate \\\n--continue \\\n--cut-dirs 2 \\\n--no-parent \\\n--no-host-directories \\\n--quiet \\\n${raw_reads_url}\n\nls -lh \"${raw_reads_dir}\"\n```\n\n## 3.1 Verify checkums\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${raw_reads_dir}\"/2018OALarvae_DNAm_discovery\n\nmd5sum --check md5sum_list.txt\n\necho \"\"\necho \"${line}\"\necho \"\"\n\ncd second_lane\n\nmd5sum --check md5sum_list.txt\n```\n\n# 4 Concatenate reads\n\nConcatenation also handles samples where there might be a missing set of\nR2 reads in the second round of sequencing.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${raw_reads_dir}\"\n\n\n# Concatenate FastQ files from 1st and 2nd runs\n# Do NOT quote fastq_pattern variable\n\n# Declare an associative array to keep track of processed files\ndeclare -A processed_files\n\nfor first_run_fastq in \"${raw_reads_dir}\"/2018OALarvae_DNAm_discovery/${fastq_pattern}\ndo\n  # Strip full path to just get filename.\n  first_run_fastq_name=\"${first_run_fastq##*/}\"\n\n  # Initialize a flag to check if a match is found\n  match_found=false\n\n  # Process second run and concatenate with corresponding FastQ from first run\n  # Do NOT quote fastq_pattern variable\n  for second_run_fastq in \"${raw_reads_dir}\"/2018OALarvae_DNAm_discovery/second_lane/${fastq_pattern}\n  do\n    # Strip full path to just get filename.\n    second_run_fastq_name=\"${second_run_fastq##*/}\"\n\n    # Concatenate FastQs with same filenames\n    if [[ \"${first_run_fastq_name}\" == \"${second_run_fastq_name}\" ]]\n    then\n      echo \"Concatenating ${first_run_fastq} with ${second_run_fastq} to ${raw_reads_dir}/${first_run_fastq_name}\"\n      echo \"\"\n      cat \"${first_run_fastq}\" \"${second_run_fastq}\" >> \"${raw_reads_dir}/${first_run_fastq_name}\"\n      match_found=true\n      processed_files[\"${first_run_fastq_name}\"]=true\n      break\n    fi\n  done\n\n  # If no match is found, copy the file to the target directory\n  if [[ \"${match_found}\" == false ]]\n  then\n    if [[ -z \"${processed_files[${first_run_fastq_name}]}\" ]]\n    then\n      echo \"NO MATCH!\"\n      echo \"Copying ${first_run_fastq} to ${raw_reads_dir}\"\n      echo \"\"\n      cp \"${first_run_fastq}\" \"${raw_reads_dir}\"\n      processed_files[\"${first_run_fastq_name}\"]=true\n    fi\n  fi\n\n  echo \"Generating checksums for concatenated FastQs...\"\n  md5sum \"${first_run_fastq_name}\" | tee --append \"${first_run_fastq_name}\".md5\n  echo \"\"\n  echo \"${line}\"\n  echo \"\"\ndone\n```\n\n# 5 Trimming and Error Repair\n\nTrimming will remove any Illumina sequencing adapters, as well as polyG\nand polyX (primarily polyA) sequences. Trimming will also remove the\nfirst 15bp from the 5’ end of each read.\n\nSamples generating an error during trimming will attempt to be repaired\nwith BBTools’ `repair.sh` script.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make output directory, if it doesn't exist\nmkdir --parents ${output_dir_top}\n\ncd \"${raw_reads_dir}\"\n\n\n# Create arrays of fastq R1 files and sample names\n# Do NOT quote R1_fastq_pattern variable\n\nfor fastq in ${R1_fastq_pattern}\ndo\n  fastq_array_R1+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R1_names_array+=(\"${fastq%%.*}\")\ndone\n\n# Create array of fastq R2 files\n# Do NOT quote R2_fastq_pattern variable\nfor fastq in ${R2_fastq_pattern}\ndo\n  fastq_array_R2+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R2_names_array+=(${fastq%%.*})\ndone\n\n\n\n# Run fastp on files\n# Adds JSON report output for downstream usage by MultiQC\n\necho \"Beginning fastp trimming.\"\necho \"\"\n\nfor index in \"${!fastq_array_R1[@]}\"\ndo\n  R1_sample_name=\"${R1_names_array[index]}\"\n  R2_sample_name=\"${R2_names_array[index]}\"\n  \n  stderr_PE_name=$(echo ${R1_sample_name} | awk -F\"_\" '{print $1}')\n  \n  ${fastp} \\\n  --in1 ${fastq_array_R1[index]} \\\n  --in2 ${fastq_array_R2[index]} \\\n  --detect_adapter_for_pe \\\n  --trim_poly_g \\\n  --trim_poly_x \\\n  --thread 16 \\\n  --trim_front1 15 \\\n  --trim_front2 15 \\\n  --html ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.report.html \\\n  --json ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.report.json \\\n  --out1 ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.fq.gz \\\n  --out2 ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.fq.gz \\\n  2> ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr\n  \n  grep --before-context 5 \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr\n  \n  # Check for fastp errors and then repair\n  if grep --quiet \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr; then\n      \n    rm ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.fq.gz\n    rm ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.fq.gz\n    \n    \n    ${bbmap_repair} \\\n    in1=${fastq_array_R1[index]} \\\n    in2=${fastq_array_R2[index]} \\\n    out1=\"${R1_sample_name}\".REPAIRED.fastq.gz \\\n    out2=\"${R2_sample_name}\".REPAIRED.fastq.gz \\\n    outs=/dev/null \\\n    2> \"${R1_sample_name}\".REPAIRED.stderr\n    \n    ${fastp} \\\n    --in1 \"${R1_sample_name}\".REPAIRED.fastq.gz \\\n    --in2 \"${R2_sample_name}\".REPAIRED.fastq.gz \\\n    --detect_adapter_for_pe \\\n    --trim_poly_g \\\n    --trim_poly_x \\\n    --thread 16 \\\n    --trim_front1 15 \\\n    --trim_front2 15 \\\n    --html ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.report.html \\\n    --json ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.report.json \\\n    --out1 ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.fq.gz \\\n    --out2 ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.REPAIRED.fq.gz \\\n    2> ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.REPAIRED.stderr\n \n    \n    if grep --quiet \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.REPAIRED.stderr; then\n      echo \"These ${stderr_PE_name} samples are broken.\"\n      echo \"Just give up.  :(\"\n      echo \"\"\n    fi\n  fi\n\n  echo \"Finished trimming:\"\n  echo \"${fastq_array_R1[index]}\"\n  echo \"${fastq_array_R1[index]}\"\n  echo \"\"\n  \n  # Generate md5 checksums for newly trimmed files\n  cd \"${output_dir_top}\"\n  md5sum \"${R1_sample_name}\".fastp-trim.fq.gz > \"${R1_sample_name}\".fastp-trim.fq.gz.md5\n  md5sum \"${R2_sample_name}\".fastp-trim.fq.gz > \"${R2_sample_name}\".fastp-trim.fq.gz.md5\n  \n  cd \"${raw_reads_dir}\"\ndone\n```\n\n# 6 FastQC\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${output_dir_top}\"\n\n############ RUN FASTQC ############\n\n\n# Create array of trimmed FastQs\ntrimmed_fastqs_array=(${trimmed_fastq_pattern})\n\n# Pass array contents to new variable as space-delimited list\ntrimmed_fastqc_list=$(echo \"${trimmed_fastqs_array[*]}\")\n\necho \"Beginning FastQC on trimmed reads...\"\necho \"\"\n\n# Run FastQC\n### NOTE: Do NOT quote raw_fastqc_list\n${fastqc} \\\n--threads ${threads} \\\n--outdir \"${output_dir_top}\" \\\n--quiet \\\n${trimmed_fastqc_list}\n\necho \"FastQC on trimmed reads complete!\"\necho \"\"\n\n############ END FASTQC ############\n```\n\n# 7 MultiQC\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${output_dir_top}\"\n\n${multiqc} .\n```\n\n:::: {.callout-caution}\nThere are two files which have excessive polyG sequences after trimming, despite specifying [`fastp`](https://github.com/OpenGene/fastp) to trim polyG sequences\n\n- `CF03-CM03-Zygote_R1`\n- `EF04-EM04-Zygote_R1`\n\nEach of the corresponging R2 samples has excessive polyA sequences present.\n:::\n\n\n![FastQC adaptor sequences plot showing excessive polyG sequences in CF03-CM03-Zygote_R1.](./20241115-cvir-trimming-fastqc-CF03-CM03-Zygote_R1-adaptor.plot.png){#fig-CF03_CM03_R1_polyG fig-alt=\"FastQC adaptor sequences plot showing excessive polyG sequences in CF03-CM03-Zygote_R1.\" .lightbox}\n\n<div id=\"refs\" class=\"references csl-bib-body hanging-indent\">\n\n<div id=\"ref-ewels2016\" class=\"csl-entry\">\n\nEwels, Philip, Måns Magnusson, Sverker Lundin, and Max Käller. 2016.\n“MultiQC: Summarize Analysis Results for Multiple Tools and Samples in a\nSingle Report.” *Bioinformatics* 32 (19): 3047–48.\n<https://doi.org/10.1093/bioinformatics/btw354>.\n\n</div>\n\n</div>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}