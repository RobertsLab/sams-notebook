{
  "hash": "e7598e139354f9dc79ee0557acb88698",
  "result": {
    "engine": "knitr",
    "markdown": "---\nauthor: Sam White\ntoc-title: Contents\ntoc-depth: 5\ntoc-location: left\ntitle: Trimming - P.evermanni RNA-seq Trimming and QC with fastp FastQC and MultiQC for E5 timeseries_molecular Project\ndate: '2025-02-24'\ndraft: false\nengine: knitr\ncategories: \n  - \"2025\"\n  - \"Porites evermanni\"\n  - \"E5\"\n  - \"trimming\"\n  - \"fastp\"\n  - \"FastQC\"\n  - \"MultiQC\"\n  - \"RNAseq\"\n  - \"timeseries_molecular\"\n---\n\n\n\n# INTRO\n\nI [previously ran FastQC and MultiQC quality checks (20250220)](../2025-02-20-FastQC-MultiQC---P.evermanni-RNA-seq-Data-for-timeseries_molecular-Project/index.qmd) (Notebook) on the _P.evermanni_ raw RNA-seq data [received 20240926](../../2024/2024-09-26-Data-Received---E5-Coral-Time-Series-RNA-seq-Azenta-Project-30-1047560508/index.qmd) (Notebook), as part of [urol-e5/timeseries_molecular](https://github.com/urol-e5/timeseries_molecular) (GitHub repo).\n\n::: {.callout-note}\nThe contents below are from markdown knitted from [`01.00-E-Peve-RNAseq-trimming-fastp-FastQC-MultiQC.md`](https://github.com/urol-e5/timeseries_molecular/blob/3b9cad0f2a47af1bb0e2417fd458e92285a1ee35/E-Peve/code/01.00-E-Peve-RNAseq-trimming-fastp-FastQC-MultiQC.md) (commit `3b9cad0`).\n:::\n\n\n# 1 Background\n\nThis Rmd file trims *P.evermanni* RNAseq files using\n[fastp](https://github.com/OpenGene/fastp) (Chen 2023), followed by\nquality checks with [FastQC](https://github.com/s-andrews/FastQC) and\n[MultiQC](https://multiqc.info/)(Ewels et al. 2016).\n\nBased off of the initial FastQC/MultiQC, we trimmed 15bp from each read.\n\n## 1.1 Inputs\n\nRaw WGBS FastQ files with the following pattern:\n\n- `*.fastq.gz`\n\n  - Expects input files formatted like so:\n    `<species_abbreviation>-<colony_ID>-<timepoint>_R[12]_001.fastq.gz`\n\n<div class=\"callout-note\">\n\nIf one needs to download the raw FastQs, please see\n[00.00-E-Peve-RNAseq-reads-FastQC-MultiQC.Rmd](./00.00-E-Peve-RNAseq-reads-FastQC-MultiQC.Rmd)\n\n</div>\n\n## 1.2 Outputs\n\nThe expected outputs will be:\n\n- `*_fastqc.html`: Individual FastQC reports.\n\n- `*fastp-trim*.fq.gz`: Trimmed FastQ files.\n\n- `*.md5`: Individual MD5 checksums for trimmed FastQs.\n\n- `*.fastp-trim.report.html`: Individual fastp trimming reports. HTML\n  format.\n\n- `*.fastp-trim.report.json`: Individual fastp trimming reports. JSON\n  format.\n\n- `multiqc_report.html`: A summary report of the alignment results\n  generated by [MultiQC](https://github.com/MultiQC/MultiQC), in HTML\n  format.\n\n  - Due to the large file sizes of FastQs, these cannot be hosted in the\n    [timeseries_molecular GitHub\n    repo](https://github.com/urol-e5/timeseries_molecular/tree/main). As\n    such these files are available for download here:\n\n- <https://gannet.fish.washington.edu/Atumefaciens/gitrepos/urol-e5/timeseries_molecular/E-Peve/output/01.00-E-Peve-RNAseq-trimming-fastp-FastQC-MultiQC/>\n\n# 2 Create a Bash variables file\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"# Data directories\"\necho 'export timeseries_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular'\necho 'export output_dir_top=${timeseries_dir}/E-Peve/output/01.00-E-Peve-RNAseq-trimming-fastp-FastQC-MultiQC'\necho 'export raw_reads_dir=${timeseries_dir}/E-Peve/data/rnaseq-raw-fastqs'\necho \"\"\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export fastp=\"${programs_dir}/fastp\"'\necho 'export fastqc=${programs_dir}/FastQC-0.12.1/fastqc'\necho 'export multiqc=/home/sam/programs/mambaforge/bin/multiqc'\necho \"\"\n\necho \"# Set FastQ filename patterns\"\necho \"export fastq_pattern='*.fastq.gz'\"\necho \"export R1_fastq_pattern='*_R1_*.fastq.gz'\"\necho \"export R2_fastq_pattern='*_R2_*.fastq.gz'\"\necho \"export trimmed_fastq_pattern='*fastp-trim.fq.gz'\"\necho \"\"\n\necho \"# Set number of CPUs to use\"\necho 'export threads=40'\necho \"\"\n\n\necho \"## Inititalize arrays\"\necho 'export fastq_array_R1=()'\necho 'export fastq_array_R2=()'\necho 'export raw_fastqs_array=()'\necho 'export R1_names_array=()'\necho 'export R2_names_array=()'\necho \"\"\n\necho \"# Programs associative array\"\necho \"declare -A programs_array\"\necho \"programs_array=(\"\necho '[fastp]=\"${fastp}\" \\'\necho '[fastqc]=\"${fastqc}\" \\'\necho '[multiqc]=\"${multiqc}\" \\'\necho \")\"\necho \"\"\n\necho \"# Print formatting\"\necho 'export line=\"--------------------------------------------------------\"'\necho \"\"\n} > .bashvars\n\ncat .bashvars\n```\n\n    #### Assign Variables ####\n\n    # Data directories\n    export timeseries_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular\n    export output_dir_top=${timeseries_dir}/E-Peve/output/01.00-E-Peve-RNAseq-trimming-fastp-FastQC-MultiQC\n    export raw_reads_dir=${timeseries_dir}/E-Peve/data/rnaseq-raw-fastqs\n\n    # Paths to programs\n    export programs_dir=\"/home/shared\"\n    export fastp=\"${programs_dir}/fastp\"\n    export fastqc=${programs_dir}/FastQC-0.12.1/fastqc\n    export multiqc=/home/sam/programs/mambaforge/bin/multiqc\n\n    # Set FastQ filename patterns\n    export fastq_pattern='*.fastq.gz'\n    export R1_fastq_pattern='*_R1_*.fastq.gz'\n    export R2_fastq_pattern='*_R2_*.fastq.gz'\n    export trimmed_fastq_pattern='*fastp-trim.fq.gz'\n\n    # Set number of CPUs to use\n    export threads=40\n\n    ## Inititalize arrays\n    export fastq_array_R1=()\n    export fastq_array_R2=()\n    export raw_fastqs_array=()\n    export R1_names_array=()\n    export R2_names_array=()\n\n    # Programs associative array\n    declare -A programs_array\n    programs_array=(\n    [fastp]=\"${fastp}\" \\\n    [fastqc]=\"${fastqc}\" \\\n    [multiqc]=\"${multiqc}\" \\\n    )\n\n    # Print formatting\n    export line=\"--------------------------------------------------------\"\n\n# 3 Fastp Trimming\n\n[fastp](https://github.com/OpenGene/fastp) (Chen 2023) is set to\nauto-detect Illumina adapters, as well as trim the first 15bp from each\nread, as past experience shows these first 15bp are more inconsistent\nthan the remainder of the read length.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make output directories, if it doesn't exist\nmkdir --parents \"${output_dir_top}\"\n\n# Change to raw reads directory\ncd \"${raw_reads_dir}\"\n\n# Create arrays of fastq R1 files and sample names\nfor fastq in ${R1_fastq_pattern}\ndo\n  fastq_array_R1+=(\"${fastq}\")\n  R1_names_array+=(\"$(echo \"${fastq}\" | awk -F\"_\" '{print $1}')\")\ndone\n\n# Create array of fastq R2 files\nfor fastq in ${R2_fastq_pattern}\ndo\n  fastq_array_R2+=(\"${fastq}\")\n  R2_names_array+=(\"$(echo \"${fastq}\" | awk -F\"_\" '{print $1}')\")\ndone\n\n# Create list of fastq files used in analysis\n# Create MD5 checksum for reference\nif [ ! -f \"${output_dir_top}\"/raw-fastq-checksums.md5 ]; then\nfor fastq in *.gz\n  do\n    md5sum ${fastq} >> \"${output_dir_top}\"/raw-fastq-checksums.md5\n  done\nfi\n\n# Run fastp on files\n# Adds JSON report output for downstream usage by MultiQC\nfor index in \"${!fastq_array_R1[@]}\"\ndo\n  R1_sample_name=$(echo \"${R1_names_array[index]}\")\n  R2_sample_name=$(echo \"${R2_names_array[index]}\")\n  ${fastp} \\\n  --in1 ${fastq_array_R1[index]} \\\n  --in2 ${fastq_array_R2[index]} \\\n  --detect_adapter_for_pe \\\n  --trim_poly_g \\\n  --trim_poly_x \\\n  --trim_front1 15 \\\n  --trim_front2 15 \\\n  --thread ${threads} \\\n  --html \"${output_dir_top}\"/\"${R1_sample_name}\".fastp-trim.report.html \\\n  --json \"${output_dir_top}\"/\"${R1_sample_name}\".fastp-trim.report.json \\\n  --out1 \"${output_dir_top}\"/\"${R1_sample_name}\"_R1_001.fastp-trim.fq.gz \\\n  --out2 \"${output_dir_top}\"/\"${R2_sample_name}\"_R2_001.fastp-trim.fq.gz \\\n  2>> \"${output_dir_top}\"/fastp.stderr\n\n  # Generate md5 checksums for newly trimmed files\n  cd \"${output_dir_top}\"\n  md5sum \"${R1_sample_name}\"_R1_001.fastp-trim.fq.gz > \"${R1_sample_name}\"_R1_001.fastp-trim.fq.gz.md5\n  md5sum \"${R2_sample_name}\"_R2_001.fastp-trim.fq.gz > \"${R2_sample_name}\"_R2_001.fastp-trim.fq.gz.md5\n  cd -\ndone\n```\n\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n    /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/data/rnaseq-raw-fastqs\n\n# 4 Quality Check with FastQC and MultiQC\n\n## 4.1 FastQC\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${output_dir_top}\"\n\n############ RUN FASTQC ############\n\n\n# Create array of trimmed FastQs\ntrimmed_fastqs_array=(${trimmed_fastq_pattern})\n\n# Pass array contents to new variable as space-delimited list\ntrimmed_fastqc_list=$(echo \"${trimmed_fastqs_array[*]}\")\n\necho \"Beginning FastQC on trimmed reads...\"\necho \"\"\n\n# Run FastQC\n### NOTE: Do NOT quote raw_fastqc_list\n${fastqc} \\\n--threads ${threads} \\\n--outdir \"${output_dir_top}\" \\\n--quiet \\\n${trimmed_fastqc_list}\n\necho \"FastQC on trimmed reads complete!\"\necho \"\"\n\n############ END FASTQC ############\n```\n\n    Beginning FastQC on trimmed reads...\n\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    FastQC on trimmed reads complete!\n\n## 4.2 MultiQC\n\nUses `--cl-config \"sp: { fastp: { fn: '*report.json' } }\"` to update the\nMultiQC search pattern for the fastp module.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\ncd \"${output_dir_top}\"\n\n${programs_array[multiqc]} . \\\n--cl-config \"sp: { fastp: { fn: '*report.json' } }\" \\\n--interactive\n\n# Remove zip files\nrm *_fastqc.zip\n```\n\n      /// MultiQC 🔍 | v1.14\n\n    |           multiqc | MultiQC Version v1.27 now available!\n    |           multiqc | Search path : /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/output/01.00-E-Peve-RNAseq-trimming-fastp-FastQC-MultiQC\n    |         searching | ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 382/382  \n    |             fastp | Found 38 reports\n    |            fastqc | Found 76 reports\n    |           multiqc | Compressing plot data\n    |           multiqc | Report      : multiqc_report.html\n    |           multiqc | Data        : multiqc_data\n    |           multiqc | MultiQC complete\n\n# RESULTS\n\nOverall, trimming looks good.\n\nMultiQC report:\n\n- [01.00-E-Peve-RNAseq-trimming-fastp-FastQC-MultiQC/multiqc_report.html](https://github.com/urol-e5/timeseries_molecular/blob/3b9cad0f2a47af1bb0e2417fd458e92285a1ee35/E-Peve/output/01.00-E-Peve-RNAseq-trimming-fastp-FastQC-MultiQC/multiqc_report.html) (GitHub repo)\n\n![MultiQC screencap showing post-trimming Sequence Content.](./20250224-peve-rnaseq-trimmed-multiqc-plot-sequence-content.png){fig-alt=\"Screenshot of trimmed MultiQC per base sequence content plot.\"}\n\n\n![MultiQC screencap showing post-trimming Adapter Content.](./20250224-peve-rnaseq-trimmed-multiqc-plot-adapter-content.png){fig-alt=\"MultiQC screencap showing post-trimming Adapter Content.\"}\n\n# 5 References\n\n<div id=\"refs\" class=\"references csl-bib-body hanging-indent\">\n\n<div id=\"ref-chen2023\" class=\"csl-entry\">\n\nChen, Shifu. 2023. “Ultrafast One-Pass FASTQ Data Preprocessing, Quality\nControl, and Deduplication Using Fastp.” *iMeta* 2 (2).\n<https://doi.org/10.1002/imt2.107>.\n\n</div>\n\n<div id=\"ref-ewels2016\" class=\"csl-entry\">\n\nEwels, Philip, Måns Magnusson, Sverker Lundin, and Max Käller. 2016.\n“MultiQC: Summarize Analysis Results for Multiple Tools and Samples in a\nSingle Report.” *Bioinformatics* 32 (19): 3047–48.\n<https://doi.org/10.1093/bioinformatics/btw354>.\n\n</div>\n\n</div>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}