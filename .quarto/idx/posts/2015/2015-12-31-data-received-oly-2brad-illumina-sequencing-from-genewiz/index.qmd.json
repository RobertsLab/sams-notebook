{"title":"Data Received - Oly 2bRAD Illumina Sequencing from Genewiz","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","date":"2015-12-31 20:57:48+00:00","layout":"post","slug":"data-received-oly-2brad-illumina-sequencing-from-genewiz","title":"Data Received - Oly 2bRAD Illumina Sequencing from Genewiz","categories":["2015","2bRAD Library Tests for Sequencing at Genewiz","Olympia oyster reciprocal transplant"],"tags":["2bRAD","bash","code","command line","olympia oyster","Ostrea lurida","RAD","shell"]},"containsRefs":false,"markdown":"\n\nThe data was made available to use on 20151224 and took two days to download.\n\nThe full list of samples (and the individual samples/libraries/indexes) submitted to Genewiz for this project by Katherine Silliman & me can be seen here (Google Sheet): [White_BS1511196_R2_barcodes](https://docs.google.com/spreadsheets/d/1DJP4zpF3OcISOAQ-MM8bW85WcJqdB5EvcExs2wGvzcg/edit?usp=sharing)\n\nThe data supplied were all of the Illumina output files (currently not entirely sure where/how we want to store all of this, but we'll probably want to use them for attempting our own demultiplexing since there were a significant amount of reads that Genewiz was unable to demultiplex), in addition to demultiplexed FASTQ files. The FASTQ files were buried in inconvenient locations, and there are over 300 of them, so I used the power of the command line to find them and copy them to a single location: https://owl.fish.washington.edu/nightingales/O_lurida/2bRAD_Dec2015\n\nFind and copy all FASTQ files:\n\n\n    \n    <code>find /run/user/1000/gvfs/smb-share\\:server\\=owl.fish.washington.edu\\,share\\=home/ -name '*.fastq.*' -exec cp -n '{}' /run/user/1000/gvfs/smb-share\\:server\\=owl.fish.washington.edu\\,share\\=web/nightingales/O_lurida/ \\;</code>\n\n\n\nCode explanation:\n\n\n    \n    <code>find</code>\n\n\n\n\n\n\n\n  * Command line program used for searching for files\n\n\n\n\n    \n    <code>/run/user/1000/gvfs/smb-share\\:server\\=owl.fish.washington.edu\\,share\\=home/ </code>\n\n\n\n\n\n\n\n  * Location of the files I wanted to search through. The path looks a little crazy because I was working remotely and had the server share mounted.\n\n\n\n\n    \n    <code>-name '*.fastq.*'</code>\n\n\n\n\n\n\n\n  * The name argument tells the find command to look for filenames that have \".fastq\" in them.\n\n\n\n\n    \n    <code>-exec cp -n '{}'</code>\n\n\n\n\n\n\n\n  * The exec option tells the find command to execute a subsequent action upon finding a match. In this case, I'm using the copy command (cp) and telling the program not to overwrite (clobber, -n) any duplicate files.\n\n\n\n\n    \n    <code>/run/user/1000/gvfs/smb-share\\:server\\=owl.fish.washington.edu\\,share\\=web/nightingales/O_lurida/2bRAD_Dec2015 \\;</code>\n\n\n\n\n\n\n\n  * The location where I want the matched files copied.\n\n\n\nI created a readme file in the directory directory with these files: [readme.md](https://owl.fish.washington.edu/nightingales/O_lurida/2bRAD_Dec2015/readme.md)\n\nI wanted to add some information about the project to the readme file, like total number of sequencing reads generated and the number of reads in each FASTQ file.\n\nHere's how to count the total of all reads generated in this project\n\n\n    \n    <code>totalreads=0; for i in *.gz; do linecount=`gunzip -c \"$i\" | wc -l`; readcount=$((linecount/4)); totalreads=$((readcount+totalreads)); done; echo $totalreads</code>\n\n\n\nTotal Reads: 588,396,334\n\nCode explanation:\n\n\n    \n    <code>totalreads=0;</code>\n\n\n\n\n\n\n\n  * Creates variable called \"totalreads\" and initializes value to 0.\n\n\n\n\n    \n    <code>for i in *.gz;</code>\n\n\n\n\n\n\n\n  * Initiates a for loop to process any filenames that end with \".gz\". The FASTQ files have been compressed with gzip and end with the .gz extension.\n\n\n\n\n    \n    <code>do linecount=</code>\n\n\n\n\n\n\n\n  * Creates variable called \"linecount\" that stores the results of the following command:\n\n\n\n\n    \n    <code>`gunzip -c \"$i\" | wc -l`;</code>\n\n\n\n\n\n\n\n  * Unzips the files ($i) to stdout (-c) instead of actually uncompressing them. This is piped to the word count command, with the line flag (wc -l) to count the number of lines in the files.\n\n\n\n\n    \n    <code>readcount=$((linecount/4));</code>\n\n\n\n\n\n\n\n  * Divides the value stored in linecount by 4. This is because an entry for a single Illumina read comprises four lines. This value is stored in the \"readcount\" variable.\n\n\n\n\n    \n    <code>totalreads=$((readcount+totalreads));</code>\n\n\n\n\n\n\n\n  * Adds the readcount for the current file and adds the value to totalreads.\n\n\n\n\n    \n    <code>done;</code>\n\n\n\n\n\n\n\n  * End the for loop.\n\n\n\n\n    \n    <code>echo $totalreads</code>\n\n\n\n\n\n\n\n  * Prints the value of totalreads to the screen.\n\n\n\nNext, I wanted to generate list of the FASTQ files and corresponding read counts, and append this information to the readme file.\n\n\n    \n    <code>for i in *.gz; do linecount=`gunzip -c \"$i\" | wc -l`; readcount=$(($linecount/4)); printf \"%s\\t%s\\n%s\\t\\t\\n\" \"$i\" \"$readcount\" >> readme.md; done</code>\n\n\n\nCode explanation:\n\n\n    \n    <code>for i in *.gz; do linecount=`gunzip -c \"$i\" | wc -l`; readcount=$(($linecount/4));</code>\n\n\n\n\n\n\n\n  * Same for loop as above that calculates the number of reads in each FASTQ file.\n\n\n\n\n    \n    <code>printf \"%s\\t%s\\n\\n\" \"$i\" \"$readcount\" >> readme.md;</code>\n\n\n\n\n\n\n\n  * This formats the the printed output. The \"%s\\t%s\\n\\n\" portion prints the value in $i as a string (%s), followed by a tab (\\t), followed by the value in $readcount as a string (%s), followed by two consecutive newlines (\\n\\n) to provide an empty line between the entries. See the readme file linked above to see how the output looks.\n\n\n\n\n    \n    <code>>> readme.md; done</code>\n\n\n\n\n\n\n\n  * This appends the result from each loop to the readme.md file and ends the for loop (done).\n\n\n","srcMarkdownNoYaml":"\n\nThe data was made available to use on 20151224 and took two days to download.\n\nThe full list of samples (and the individual samples/libraries/indexes) submitted to Genewiz for this project by Katherine Silliman & me can be seen here (Google Sheet): [White_BS1511196_R2_barcodes](https://docs.google.com/spreadsheets/d/1DJP4zpF3OcISOAQ-MM8bW85WcJqdB5EvcExs2wGvzcg/edit?usp=sharing)\n\nThe data supplied were all of the Illumina output files (currently not entirely sure where/how we want to store all of this, but we'll probably want to use them for attempting our own demultiplexing since there were a significant amount of reads that Genewiz was unable to demultiplex), in addition to demultiplexed FASTQ files. The FASTQ files were buried in inconvenient locations, and there are over 300 of them, so I used the power of the command line to find them and copy them to a single location: https://owl.fish.washington.edu/nightingales/O_lurida/2bRAD_Dec2015\n\nFind and copy all FASTQ files:\n\n\n    \n    <code>find /run/user/1000/gvfs/smb-share\\:server\\=owl.fish.washington.edu\\,share\\=home/ -name '*.fastq.*' -exec cp -n '{}' /run/user/1000/gvfs/smb-share\\:server\\=owl.fish.washington.edu\\,share\\=web/nightingales/O_lurida/ \\;</code>\n\n\n\nCode explanation:\n\n\n    \n    <code>find</code>\n\n\n\n\n\n\n\n  * Command line program used for searching for files\n\n\n\n\n    \n    <code>/run/user/1000/gvfs/smb-share\\:server\\=owl.fish.washington.edu\\,share\\=home/ </code>\n\n\n\n\n\n\n\n  * Location of the files I wanted to search through. The path looks a little crazy because I was working remotely and had the server share mounted.\n\n\n\n\n    \n    <code>-name '*.fastq.*'</code>\n\n\n\n\n\n\n\n  * The name argument tells the find command to look for filenames that have \".fastq\" in them.\n\n\n\n\n    \n    <code>-exec cp -n '{}'</code>\n\n\n\n\n\n\n\n  * The exec option tells the find command to execute a subsequent action upon finding a match. In this case, I'm using the copy command (cp) and telling the program not to overwrite (clobber, -n) any duplicate files.\n\n\n\n\n    \n    <code>/run/user/1000/gvfs/smb-share\\:server\\=owl.fish.washington.edu\\,share\\=web/nightingales/O_lurida/2bRAD_Dec2015 \\;</code>\n\n\n\n\n\n\n\n  * The location where I want the matched files copied.\n\n\n\nI created a readme file in the directory directory with these files: [readme.md](https://owl.fish.washington.edu/nightingales/O_lurida/2bRAD_Dec2015/readme.md)\n\nI wanted to add some information about the project to the readme file, like total number of sequencing reads generated and the number of reads in each FASTQ file.\n\nHere's how to count the total of all reads generated in this project\n\n\n    \n    <code>totalreads=0; for i in *.gz; do linecount=`gunzip -c \"$i\" | wc -l`; readcount=$((linecount/4)); totalreads=$((readcount+totalreads)); done; echo $totalreads</code>\n\n\n\nTotal Reads: 588,396,334\n\nCode explanation:\n\n\n    \n    <code>totalreads=0;</code>\n\n\n\n\n\n\n\n  * Creates variable called \"totalreads\" and initializes value to 0.\n\n\n\n\n    \n    <code>for i in *.gz;</code>\n\n\n\n\n\n\n\n  * Initiates a for loop to process any filenames that end with \".gz\". The FASTQ files have been compressed with gzip and end with the .gz extension.\n\n\n\n\n    \n    <code>do linecount=</code>\n\n\n\n\n\n\n\n  * Creates variable called \"linecount\" that stores the results of the following command:\n\n\n\n\n    \n    <code>`gunzip -c \"$i\" | wc -l`;</code>\n\n\n\n\n\n\n\n  * Unzips the files ($i) to stdout (-c) instead of actually uncompressing them. This is piped to the word count command, with the line flag (wc -l) to count the number of lines in the files.\n\n\n\n\n    \n    <code>readcount=$((linecount/4));</code>\n\n\n\n\n\n\n\n  * Divides the value stored in linecount by 4. This is because an entry for a single Illumina read comprises four lines. This value is stored in the \"readcount\" variable.\n\n\n\n\n    \n    <code>totalreads=$((readcount+totalreads));</code>\n\n\n\n\n\n\n\n  * Adds the readcount for the current file and adds the value to totalreads.\n\n\n\n\n    \n    <code>done;</code>\n\n\n\n\n\n\n\n  * End the for loop.\n\n\n\n\n    \n    <code>echo $totalreads</code>\n\n\n\n\n\n\n\n  * Prints the value of totalreads to the screen.\n\n\n\nNext, I wanted to generate list of the FASTQ files and corresponding read counts, and append this information to the readme file.\n\n\n    \n    <code>for i in *.gz; do linecount=`gunzip -c \"$i\" | wc -l`; readcount=$(($linecount/4)); printf \"%s\\t%s\\n%s\\t\\t\\n\" \"$i\" \"$readcount\" >> readme.md; done</code>\n\n\n\nCode explanation:\n\n\n    \n    <code>for i in *.gz; do linecount=`gunzip -c \"$i\" | wc -l`; readcount=$(($linecount/4));</code>\n\n\n\n\n\n\n\n  * Same for loop as above that calculates the number of reads in each FASTQ file.\n\n\n\n\n    \n    <code>printf \"%s\\t%s\\n\\n\" \"$i\" \"$readcount\" >> readme.md;</code>\n\n\n\n\n\n\n\n  * This formats the the printed output. The \"%s\\t%s\\n\\n\" portion prints the value in $i as a string (%s), followed by a tab (\\t), followed by the value in $readcount as a string (%s), followed by two consecutive newlines (\\n\\n) to provide an empty line between the entries. See the readme file linked above to see how the output looks.\n\n\n\n\n    \n    <code>>> readme.md; done</code>\n\n\n\n\n\n\n\n  * This appends the result from each loop to the readme.md file and ends the for loop (done).\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","date":"2015-12-31 20:57:48+00:00","layout":"post","slug":"data-received-oly-2brad-illumina-sequencing-from-genewiz","title":"Data Received - Oly 2bRAD Illumina Sequencing from Genewiz","categories":["2015","2bRAD Library Tests for Sequencing at Genewiz","Olympia oyster reciprocal transplant"],"tags":["2bRAD","bash","code","command line","olympia oyster","Ostrea lurida","RAD","shell"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}