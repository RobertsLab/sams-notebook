{"title":"FastQ Read Alignment and Quantification - P.generosa Water Metagenomic Libraries to MetaGeneMark Assembly with Hisat2 on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"FastQ Read Alignment and Quantification - P.generosa Water Metagenomic Libraries to MetaGeneMark Assembly with Hisat2 on Mox","date":"2020-07-31 13:41","tags":["metagenemark","alignment","hisat2","Panopea generosa","geoduck","metagenomics","mox"],"categories":["2020","Miscellaneous"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nContinuing working on the manuscript for this data, Emma wanted the number of reads aligned to each gene. [I previously created and assembly with genes/proteins using MetaGeneMark on 20190103](https://robertslab.github.io/sams-notebook/posts/2019/2019-01-02-Metagenome-Assembly---P.generosa-Water-Sample-HiSeqX-Data-Using-Megahit/), but the assemby process didn't output any sort of stastics on read counts.\n\nSo, to get this data, I used [Hisat2](https://ccb.jhu.edu/software/hisat2/manual.shtml#running-hisat2) to align reads (creating a BAM file) and then used [`samtools idxstats`](http://www.htslib.org/doc/samtools-idxstats.html) to generate a file with read counts aligned to each gene.\n\nThis was all done on Mox.\n\nHere's how the sample names breakdown:\n\n| Sample | Develomental Stage (days post-fertilization) | pH Treatment |\n|--------|-------------------------|--------------|\n| MG1    | 13                      | 8.2          |\n| MG2    | 17                      | 8.2          |\n| MG3    | 6                       | 7.1          |\n| MG5    | 10                      | 8.2          |\n| MG6    | 13                      | 7.1          |\n| MG7    | 17                      | 7.1          |\n\n\n\nSBATCH script (GitHub):\n\n- [20200731_metagenome_hisat2_alignments.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200731_metagenome_hisat2_alignments.sh)\n\n\n```shell\n#!/bin/bash\n#SBATCH --job-name=metagenome_hisat2_alignments\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=7-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200731_metagenome_hisat2_alignments\n\n\n###################################################################################\n# These variables need to be set by user\n\n# Assign Variables\nreads_dir=/gscratch/srlab/sam/data/metagenomics/P_generosa/sequencing\nassembly=/gscratch/srlab/sam/data/metagenomics/P_generosa/assemblies/20190103-mgm-nucleotides.fa\nthreads=28\n# Set hisat2 basename\nhisat2_basename=20190103-mgm\n\n# Array of the various comparisons to evaluate\nlibraries_array=(\nMG_1 \\\nMG_2 \\\nMG_3 \\\nMG_5 \\\nMG_6 \\\nMG_7\n)\n\n\n###################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n## Hisat2 requires Python2. Fails with syntax error if using Python3\n#module load intel-python3_2017\nmodule load intel-python2_2017\n\n# Program directories\nhisat2_dir=\"/gscratch/srlab/programs/hisat2-2.2.0/\"\nsamtools_dir=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\n\n# Programs array\ndeclare -A programs_array\nprograms_array=(\n[hisat2]=\"${hisat2_dir}hisat2\" \\\n[hisat2_build]=\"${hisat2_dir}hisat2-build\" \\\n[samtools_view]=\"${samtools_dir} view\" \\\n[samtools_sort]=\"${samtools_dir} sort\" \\\n[samtools_index]=\"${samtools_dir} index\"\n[samtools_idxstats]=\"${samtools_dir} idxstats\"\n)\n\n# Capture FastA checksums for verification\necho \"Generating checksum for ${assembly}\"\nmd5sum \"${assembly}\" >> fasta.checksums.md5\necho \"Finished generating checksum for ${assembly}\"\necho \"\"\n\n# Build hisat2 index\n${programs_array[hisat2_build]} \\\n-f \"${assembly}\" \\\n\"${hisat2_basename}\" \\\n-p ${threads}\n\n# Loop through each library\nfor library in \"${libraries_array[@]}\"\ndo\n\n  ## Inititalize arrays\n  R1_array=()\n  R2_array=()\n  reads_array=()\n\n  # Variables\n  R1_list=\"\"\n  R2_list=\"\"\n\n\n  if [[ \"${library}\" == \"MG_1\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_1*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_1*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_1*R2*fastq.gz)\n\n\n\n  elif [[ \"${library}\" == \"MG_2\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_2*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_2*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_2*R2*fastq.gz)\n\n  elif [[ \"${library}\" == \"MG_3\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_3*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_3*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_3*R2*fastq.gz)\n\n  elif [[ \"${library}\" == \"MG_5\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_5*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_5*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_5*R2*fastq.gz)\n\n  elif [[ \"${library}\" == \"MG_6\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_6*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_6*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_6*R2*fastq.gz)\n\n  elif [[ \"${library}\" == \"MG_7\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_7*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_7*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_7*R2*fastq.gz)\n\n\n  fi\n\n  # Create list of fastq files used in analysis\n  ## Uses parameter substitution to strip leading path from filename\n  printf \"%s\\n\" \"${reads_array[@]##*/}\" >> \"${library}\".fastq.list.txt\n\n  # Create comma-separated lists of FastQ reads\n  R1_list=$(echo \"${R1_array[@]}\" | tr \" \" \",\")\n  R2_list=$(echo \"${R2_array[@]}\" | tr \" \" \",\")\n\n  # Align reads to metagenome assembly\n  ${programs_array[hisat2]} \\\n  --threads ${threads} \\\n  -x \"${hisat2_basename}\" \\\n  -q \\\n  -1 \"${R1_list}\" \\\n  -2 \"${R2_list}\" \\\n  -S \"${library}\".sam \\\n  2>&1 | tee \"${library}\".alignment_stats.txt\n\n  # Convert SAM file to BAM\n  ${programs_array[samtools_view]} \\\n  --threads ${threads} \\\n  -b \"${library}\".sam \\\n  > \"${library}\".bam\n\n  # Sort BAM\n  ${programs_array[samtools_sort]} \\\n  --threads ${threads} \\\n  \"${library}\".bam \\\n  -o \"${library}\".sorted.bam\n\n  # Index for use in IGV\n  ##-@ specifies thread count; --thread option not available in samtools index\n  ${programs_array[samtools_index]} \\\n  -@ ${threads} \\\n  \"${library}\".sorted.bam\n\n  # Get index stats from sorted bam\n  # Third column is number of reads\n  ${programs_array[samtools_idxstats]} \\\n  --threads ${threads} \\\n  \"${library}\".sorted.bam \\\n  > \"${library}\".sorted.bam.stats.txt\n\n  # Remove original SAM and unsorted BAM\n  rm \"${library}\".bam \"${library}\".sam\n\n\ndone\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\n\n# Capture program options\nfor program in \"${!programs_array[@]}\"\ndo\n\t{\n  echo \"Program options for ${program}: \"\n\techo \"\"\n\t${programs_array[$program]} --help\n\techo \"\"\n\techo \"\"\n\techo \"----------------------------------------------\"\n\techo \"\"\n\techo \"\"\n  } &>> program_options.log || true\ndone\n\n```\n\n---\n\n# RESULTS\n\nRuntime: Took about 5hrs:\n\n![Runtime](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200731_metagenome_hisat2_alignments_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200731_metagenome_hisat2_alignments/](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/)\n\nSamtools idxstats output files. They are tab-delimited.\n\nFormat:\n\n`<sequence name> <sequence length> <# mapped read-segments> <# unmapped read-segments>`\n\nNOTE: The last line of each file begins with an asterisk and seems to have a total read count? It's not clear what this line is, as it is not described [in the `samtools idxstats` documentation](http://www.htslib.org/doc/samtools-idxstats.html).\n\n- [MG_1.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_1.sorted.bam.stats.txt)\n\n- [MG_2.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_2.sorted.bam.stats.txt)\n\n- [MG_3.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_3.sorted.bam.stats.txt)\n\n- [MG_5.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_5.sorted.bam.stats.txt)\n\n- [MG_6.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_6.sorted.bam.stats.txt)\n\n- [MG_7.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_7.sorted.bam.stats.txt)\n","srcMarkdownNoYaml":"\nContinuing working on the manuscript for this data, Emma wanted the number of reads aligned to each gene. [I previously created and assembly with genes/proteins using MetaGeneMark on 20190103](https://robertslab.github.io/sams-notebook/posts/2019/2019-01-02-Metagenome-Assembly---P.generosa-Water-Sample-HiSeqX-Data-Using-Megahit/), but the assemby process didn't output any sort of stastics on read counts.\n\nSo, to get this data, I used [Hisat2](https://ccb.jhu.edu/software/hisat2/manual.shtml#running-hisat2) to align reads (creating a BAM file) and then used [`samtools idxstats`](http://www.htslib.org/doc/samtools-idxstats.html) to generate a file with read counts aligned to each gene.\n\nThis was all done on Mox.\n\nHere's how the sample names breakdown:\n\n| Sample | Develomental Stage (days post-fertilization) | pH Treatment |\n|--------|-------------------------|--------------|\n| MG1    | 13                      | 8.2          |\n| MG2    | 17                      | 8.2          |\n| MG3    | 6                       | 7.1          |\n| MG5    | 10                      | 8.2          |\n| MG6    | 13                      | 7.1          |\n| MG7    | 17                      | 7.1          |\n\n\n\nSBATCH script (GitHub):\n\n- [20200731_metagenome_hisat2_alignments.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200731_metagenome_hisat2_alignments.sh)\n\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=metagenome_hisat2_alignments\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=7-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200731_metagenome_hisat2_alignments\n\n\n###################################################################################\n# These variables need to be set by user\n\n# Assign Variables\nreads_dir=/gscratch/srlab/sam/data/metagenomics/P_generosa/sequencing\nassembly=/gscratch/srlab/sam/data/metagenomics/P_generosa/assemblies/20190103-mgm-nucleotides.fa\nthreads=28\n# Set hisat2 basename\nhisat2_basename=20190103-mgm\n\n# Array of the various comparisons to evaluate\nlibraries_array=(\nMG_1 \\\nMG_2 \\\nMG_3 \\\nMG_5 \\\nMG_6 \\\nMG_7\n)\n\n\n###################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n## Hisat2 requires Python2. Fails with syntax error if using Python3\n#module load intel-python3_2017\nmodule load intel-python2_2017\n\n# Program directories\nhisat2_dir=\"/gscratch/srlab/programs/hisat2-2.2.0/\"\nsamtools_dir=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\n\n# Programs array\ndeclare -A programs_array\nprograms_array=(\n[hisat2]=\"${hisat2_dir}hisat2\" \\\n[hisat2_build]=\"${hisat2_dir}hisat2-build\" \\\n[samtools_view]=\"${samtools_dir} view\" \\\n[samtools_sort]=\"${samtools_dir} sort\" \\\n[samtools_index]=\"${samtools_dir} index\"\n[samtools_idxstats]=\"${samtools_dir} idxstats\"\n)\n\n# Capture FastA checksums for verification\necho \"Generating checksum for ${assembly}\"\nmd5sum \"${assembly}\" >> fasta.checksums.md5\necho \"Finished generating checksum for ${assembly}\"\necho \"\"\n\n# Build hisat2 index\n${programs_array[hisat2_build]} \\\n-f \"${assembly}\" \\\n\"${hisat2_basename}\" \\\n-p ${threads}\n\n# Loop through each library\nfor library in \"${libraries_array[@]}\"\ndo\n\n  ## Inititalize arrays\n  R1_array=()\n  R2_array=()\n  reads_array=()\n\n  # Variables\n  R1_list=\"\"\n  R2_list=\"\"\n\n\n  if [[ \"${library}\" == \"MG_1\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_1*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_1*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_1*R2*fastq.gz)\n\n\n\n  elif [[ \"${library}\" == \"MG_2\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_2*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_2*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_2*R2*fastq.gz)\n\n  elif [[ \"${library}\" == \"MG_3\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_3*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_3*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_3*R2*fastq.gz)\n\n  elif [[ \"${library}\" == \"MG_5\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_5*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_5*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_5*R2*fastq.gz)\n\n  elif [[ \"${library}\" == \"MG_6\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_6*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_6*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_6*R2*fastq.gz)\n\n  elif [[ \"${library}\" == \"MG_7\" ]]; then\n\n    reads_array=(\"${reads_dir}\"/*MG_7*fastq.gz)\n\n    # Create array of fastq R1 files\n    R1_array=(\"${reads_dir}\"/*MG_7*R1*fastq.gz)\n\n    # Create array of fastq R2 files\n    R2_array=(\"${reads_dir}\"/*MG_7*R2*fastq.gz)\n\n\n  fi\n\n  # Create list of fastq files used in analysis\n  ## Uses parameter substitution to strip leading path from filename\n  printf \"%s\\n\" \"${reads_array[@]##*/}\" >> \"${library}\".fastq.list.txt\n\n  # Create comma-separated lists of FastQ reads\n  R1_list=$(echo \"${R1_array[@]}\" | tr \" \" \",\")\n  R2_list=$(echo \"${R2_array[@]}\" | tr \" \" \",\")\n\n  # Align reads to metagenome assembly\n  ${programs_array[hisat2]} \\\n  --threads ${threads} \\\n  -x \"${hisat2_basename}\" \\\n  -q \\\n  -1 \"${R1_list}\" \\\n  -2 \"${R2_list}\" \\\n  -S \"${library}\".sam \\\n  2>&1 | tee \"${library}\".alignment_stats.txt\n\n  # Convert SAM file to BAM\n  ${programs_array[samtools_view]} \\\n  --threads ${threads} \\\n  -b \"${library}\".sam \\\n  > \"${library}\".bam\n\n  # Sort BAM\n  ${programs_array[samtools_sort]} \\\n  --threads ${threads} \\\n  \"${library}\".bam \\\n  -o \"${library}\".sorted.bam\n\n  # Index for use in IGV\n  ##-@ specifies thread count; --thread option not available in samtools index\n  ${programs_array[samtools_index]} \\\n  -@ ${threads} \\\n  \"${library}\".sorted.bam\n\n  # Get index stats from sorted bam\n  # Third column is number of reads\n  ${programs_array[samtools_idxstats]} \\\n  --threads ${threads} \\\n  \"${library}\".sorted.bam \\\n  > \"${library}\".sorted.bam.stats.txt\n\n  # Remove original SAM and unsorted BAM\n  rm \"${library}\".bam \"${library}\".sam\n\n\ndone\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\n\n# Capture program options\nfor program in \"${!programs_array[@]}\"\ndo\n\t{\n  echo \"Program options for ${program}: \"\n\techo \"\"\n\t${programs_array[$program]} --help\n\techo \"\"\n\techo \"\"\n\techo \"----------------------------------------------\"\n\techo \"\"\n\techo \"\"\n  } &>> program_options.log || true\ndone\n\n```\n\n---\n\n# RESULTS\n\nRuntime: Took about 5hrs:\n\n![Runtime](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200731_metagenome_hisat2_alignments_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200731_metagenome_hisat2_alignments/](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/)\n\nSamtools idxstats output files. They are tab-delimited.\n\nFormat:\n\n`<sequence name> <sequence length> <# mapped read-segments> <# unmapped read-segments>`\n\nNOTE: The last line of each file begins with an asterisk and seems to have a total read count? It's not clear what this line is, as it is not described [in the `samtools idxstats` documentation](http://www.htslib.org/doc/samtools-idxstats.html).\n\n- [MG_1.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_1.sorted.bam.stats.txt)\n\n- [MG_2.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_2.sorted.bam.stats.txt)\n\n- [MG_3.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_3.sorted.bam.stats.txt)\n\n- [MG_5.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_5.sorted.bam.stats.txt)\n\n- [MG_6.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_6.sorted.bam.stats.txt)\n\n- [MG_7.sorted.bam.stats.txt](https://gannet.fish.washington.edu/Atumefaciens/20200731_metagenome_hisat2_alignments/MG_7.sorted.bam.stats.txt)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"FastQ Read Alignment and Quantification - P.generosa Water Metagenomic Libraries to MetaGeneMark Assembly with Hisat2 on Mox","date":"2020-07-31 13:41","tags":["metagenemark","alignment","hisat2","Panopea generosa","geoduck","metagenomics","mox"],"categories":["2020","Miscellaneous"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}