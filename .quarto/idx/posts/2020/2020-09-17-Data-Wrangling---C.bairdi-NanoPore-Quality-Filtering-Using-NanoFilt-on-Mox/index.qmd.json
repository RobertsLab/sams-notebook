{"title":"Data Wrangling - C.bairdi NanoPore Quality Filtering Using NanoFilt on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Data Wrangling - C.bairdi NanoPore Quality Filtering Using NanoFilt on Mox","date":"2020-09-17 11:52","tags":["Tanner crab","NanoFilt","mox","nanopore","Chionoecetes bairdi"],"categories":["2020","Miscellaneous"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nI previously converting our _C.bairdi_ NanoPre sequencing data from the raw Fast5 format to FastQ format for our three sets of data:\n\n- [C.bairdi-20102558-2729-Run-01](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-04-Data-Wrangling---NanoPore-Fast5-Conversion-to-FastQ-of-C.bairdi-20102558-2729-Run-01-on-Mox-with-GPU-Node/)\n\n- [C.bairdi-20102558-2729-Run-02](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-04-Data-Wrangling---NanoPore-Fast5-Conversion-to-FastQ-of-C.bairdi-20102558-2729-Run-02-on-Mox-with-GPU-Node/)\n\n- [C.bairdi-6129_403_26](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-04-Data-Wrangling---NanoPore-Fast5-Conversion-to-FastQ-of-C.bairdi-6129_403_26-on-Mox-with-GPU-Node/)\n\nI [visualized the data with NanoPlot on 20200914](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-14-Data-Wrangling---Visualization-of-C.bairdi-NanoPore-Sequencing-Using-NanoPlot-on-Mox/).\n\nIn preparation for an attempt at a _de novo_ assembly, I decided to quality filter the sequencing data using [NanoFilt](https://github.com/wdecoster/nanofilt). I semi-arbitrarily selected a quality score of 7 as the cutoff. This is primarily based on the fact that this value is the default used by ONT when you allow their software to automatically make basecalls and quality selections. Additionally, some of the visualizations of the raw sequencing reads show a bit of a bifurcation in quality above/below this quality score.\n\nThe job was run on Mox.\n\nSBATCH script (GitHub):\n\n- [20200917_cbai_nanofilt_nanopore-data.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200917_cbai_nanofilt_nanopore-data.sh)\n\n```shell\n#!/bin/bash\n#SBATCH --job-name=cbai_nanofilt_Q7_nanopore-data\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=10-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200917_cbai_nanofilt_Q7_nanopore-data\n\n\n\n\n###################################################################################\n# These variables need to be set by user\n\n# Load Anaconda\n# Uknown why this is needed, but Anaconda will not run if this line is not included.\n. \"/gscratch/srlab/programs/anaconda3/etc/profile.d/conda.sh\"\n\n\n# Activate the NanoPlot Anaconda environment\nconda activate nanofilt_2.6.0_env\n\n\n# Declare array\nraw_reads_dir_array=()\n\n# Paths to reads\nraw_reads_dir_array=(\n\"/gscratch/srlab/sam/data/C_bairdi/DNAseq/ont_FAL58500_04bb4d86_20102558-2729\" \\\n\"/gscratch/srlab/sam/data/C_bairdi/DNAseq/ont_FAL58500_94244ffd_20102558-2729\" \\\n\"/gscratch/srlab/sam/data/C_bairdi/DNAseq/ont_FAL86873_d8db260e_cbai_6129_403_26\"\n)\n\n# FastQ concatenation filename\nfastq_cat=20200917_cbai_nanopore_all.fastq\n\nfastq_filtered=20200917_cbai_nanopore_all_quality-7.fastq\n\n# Paths to programs\nnanofilt=NanoFilt\n\n# Set mean quality filter (integer)\nquality=7\n\n###################################################################################\n\n\n# Exit script if any command fails\nset -e\n\n# Inititalize array\nprograms_array=()\n\n# Programs array\nprograms_array=(\"${nanofilt}\")\n\n\n# Loop through NanoPore data directories\n# to run NanoPlot, FastQC, and MultiQC\nfor directory in \"${raw_reads_dir_array[@]}\"\ndo\n\n  # Find all FastQ files and concatenate into singel file\n  while IFS= read -r -d '' filename\n  do\n    # Concatenate all FastQ files into single file\n    # for NanoFilt and generate MD5 checksums\n    echo \"Now concatenating ${filename} to ${fastq_cat}...\"\n    cat \"${filename}\" >> ${fastq_cat}\n\n    # Create checksums file\n    echo \"Now generating checksum for ${filename}...\"\n    echo \"\"\n    md5sum \"${filename}\" >> fastq_checksums.md5\n\n  done < <(find \"${directory}\" -name \"*.fastq\" -type f -print0)\n\ndone\n\n# Generate MD5 checksum for concatenated FastQ file\necho \"Now generating checksum for ${fastq_cat}...\"\necho \"\"\nmd5sum \"${fastq_cat}\" >> fastq_checksums.md5\n\n# Run NanoFilt\n## Sets readtype to 1D (default)\n## Filters on mean quality >= 7 (ONT \"standard\")\n## FYI: seems to require piping stdin (i.e. cat fastq |)to NanoFilt...\necho \"Running ${programs_array[nanofilt]}\"\necho \"\"\ncat ${fastq_cat} \\\n| ${programs_array[nanofilt]} \\\n--readtype 1D \\\n--quality ${quality} \\\n> ${fastq_filtered}\necho \"${programs_array[nanofilt]} complete.\"\necho \"\"\n\n# Generate MD5 checksum for concatenated FastQ file\necho \"Now generating checksum for ${fastq_filtered}...\"\necho \"\"\nmd5sum \"${fastq_filtered}\" >> fastq_checksums.md5\n\n\n# Capture program options\nfor program in \"${!programs_array[@]}\"\ndo\n\t{\n  echo \"Program options for ${programs_array[program]}: \"\n\techo \"\"\n\t${programs_array[program]} -h\n\techo \"\"\n\techo \"\"\n\techo \"----------------------------------------------\"\n\techo \"\"\n\techo \"\"\n} &>> program_options.log || true\ndone\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n```\n\n\n---\n\n# RESULTS\n\nRuntime was short, ~5.5mins:\n\n![NanoFilt runtime on C.bairdi Q7 filtered NanoPore reads](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200917_cbai_nanofilt_Q7_nanopore-data_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200917_cbai_nanofilt_Q7_nanopore-data/](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_nanofilt_Q7_nanopore-data/)\n\nQ7 Filtered FastQ file (2.2GB):\n\n- [20200917_cbai_nanofilt_Q7_nanopore-data/20200917_cbai_nanopore_all_quality-7.fastq](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_nanofilt_Q7_nanopore-data/20200917_cbai_nanopore_all_quality-7.fastq)\n\n  - MD5 checksum:\n\n    - `2f3b651bb0b875b0287e71e315cad59a`\n\nWill use this data set for all downstream manipulations.\n","srcMarkdownNoYaml":"\nI previously converting our _C.bairdi_ NanoPre sequencing data from the raw Fast5 format to FastQ format for our three sets of data:\n\n- [C.bairdi-20102558-2729-Run-01](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-04-Data-Wrangling---NanoPore-Fast5-Conversion-to-FastQ-of-C.bairdi-20102558-2729-Run-01-on-Mox-with-GPU-Node/)\n\n- [C.bairdi-20102558-2729-Run-02](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-04-Data-Wrangling---NanoPore-Fast5-Conversion-to-FastQ-of-C.bairdi-20102558-2729-Run-02-on-Mox-with-GPU-Node/)\n\n- [C.bairdi-6129_403_26](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-04-Data-Wrangling---NanoPore-Fast5-Conversion-to-FastQ-of-C.bairdi-6129_403_26-on-Mox-with-GPU-Node/)\n\nI [visualized the data with NanoPlot on 20200914](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-14-Data-Wrangling---Visualization-of-C.bairdi-NanoPore-Sequencing-Using-NanoPlot-on-Mox/).\n\nIn preparation for an attempt at a _de novo_ assembly, I decided to quality filter the sequencing data using [NanoFilt](https://github.com/wdecoster/nanofilt). I semi-arbitrarily selected a quality score of 7 as the cutoff. This is primarily based on the fact that this value is the default used by ONT when you allow their software to automatically make basecalls and quality selections. Additionally, some of the visualizations of the raw sequencing reads show a bit of a bifurcation in quality above/below this quality score.\n\nThe job was run on Mox.\n\nSBATCH script (GitHub):\n\n- [20200917_cbai_nanofilt_nanopore-data.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200917_cbai_nanofilt_nanopore-data.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=cbai_nanofilt_Q7_nanopore-data\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=10-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200917_cbai_nanofilt_Q7_nanopore-data\n\n\n\n\n###################################################################################\n# These variables need to be set by user\n\n# Load Anaconda\n# Uknown why this is needed, but Anaconda will not run if this line is not included.\n. \"/gscratch/srlab/programs/anaconda3/etc/profile.d/conda.sh\"\n\n\n# Activate the NanoPlot Anaconda environment\nconda activate nanofilt_2.6.0_env\n\n\n# Declare array\nraw_reads_dir_array=()\n\n# Paths to reads\nraw_reads_dir_array=(\n\"/gscratch/srlab/sam/data/C_bairdi/DNAseq/ont_FAL58500_04bb4d86_20102558-2729\" \\\n\"/gscratch/srlab/sam/data/C_bairdi/DNAseq/ont_FAL58500_94244ffd_20102558-2729\" \\\n\"/gscratch/srlab/sam/data/C_bairdi/DNAseq/ont_FAL86873_d8db260e_cbai_6129_403_26\"\n)\n\n# FastQ concatenation filename\nfastq_cat=20200917_cbai_nanopore_all.fastq\n\nfastq_filtered=20200917_cbai_nanopore_all_quality-7.fastq\n\n# Paths to programs\nnanofilt=NanoFilt\n\n# Set mean quality filter (integer)\nquality=7\n\n###################################################################################\n\n\n# Exit script if any command fails\nset -e\n\n# Inititalize array\nprograms_array=()\n\n# Programs array\nprograms_array=(\"${nanofilt}\")\n\n\n# Loop through NanoPore data directories\n# to run NanoPlot, FastQC, and MultiQC\nfor directory in \"${raw_reads_dir_array[@]}\"\ndo\n\n  # Find all FastQ files and concatenate into singel file\n  while IFS= read -r -d '' filename\n  do\n    # Concatenate all FastQ files into single file\n    # for NanoFilt and generate MD5 checksums\n    echo \"Now concatenating ${filename} to ${fastq_cat}...\"\n    cat \"${filename}\" >> ${fastq_cat}\n\n    # Create checksums file\n    echo \"Now generating checksum for ${filename}...\"\n    echo \"\"\n    md5sum \"${filename}\" >> fastq_checksums.md5\n\n  done < <(find \"${directory}\" -name \"*.fastq\" -type f -print0)\n\ndone\n\n# Generate MD5 checksum for concatenated FastQ file\necho \"Now generating checksum for ${fastq_cat}...\"\necho \"\"\nmd5sum \"${fastq_cat}\" >> fastq_checksums.md5\n\n# Run NanoFilt\n## Sets readtype to 1D (default)\n## Filters on mean quality >= 7 (ONT \"standard\")\n## FYI: seems to require piping stdin (i.e. cat fastq |)to NanoFilt...\necho \"Running ${programs_array[nanofilt]}\"\necho \"\"\ncat ${fastq_cat} \\\n| ${programs_array[nanofilt]} \\\n--readtype 1D \\\n--quality ${quality} \\\n> ${fastq_filtered}\necho \"${programs_array[nanofilt]} complete.\"\necho \"\"\n\n# Generate MD5 checksum for concatenated FastQ file\necho \"Now generating checksum for ${fastq_filtered}...\"\necho \"\"\nmd5sum \"${fastq_filtered}\" >> fastq_checksums.md5\n\n\n# Capture program options\nfor program in \"${!programs_array[@]}\"\ndo\n\t{\n  echo \"Program options for ${programs_array[program]}: \"\n\techo \"\"\n\t${programs_array[program]} -h\n\techo \"\"\n\techo \"\"\n\techo \"----------------------------------------------\"\n\techo \"\"\n\techo \"\"\n} &>> program_options.log || true\ndone\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n```\n\n\n---\n\n# RESULTS\n\nRuntime was short, ~5.5mins:\n\n![NanoFilt runtime on C.bairdi Q7 filtered NanoPore reads](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200917_cbai_nanofilt_Q7_nanopore-data_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200917_cbai_nanofilt_Q7_nanopore-data/](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_nanofilt_Q7_nanopore-data/)\n\nQ7 Filtered FastQ file (2.2GB):\n\n- [20200917_cbai_nanofilt_Q7_nanopore-data/20200917_cbai_nanopore_all_quality-7.fastq](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_nanofilt_Q7_nanopore-data/20200917_cbai_nanopore_all_quality-7.fastq)\n\n  - MD5 checksum:\n\n    - `2f3b651bb0b875b0287e71e315cad59a`\n\nWill use this data set for all downstream manipulations.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Data Wrangling - C.bairdi NanoPore Quality Filtering Using NanoFilt on Mox","date":"2020-09-17 11:52","tags":["Tanner crab","NanoFilt","mox","nanopore","Chionoecetes bairdi"],"categories":["2020","Miscellaneous"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}