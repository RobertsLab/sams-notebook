{"title":"Data Wrangling - NanoPore Fast5 Conversion to FastQ of C.bairdi 6129_403_26 on Mox with GPU Node","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Data Wrangling - NanoPore Fast5 Conversion to FastQ of C.bairdi 6129_403_26 on Mox with GPU Node","date":"2020-09-04 13:48","tags":["guppy","mox","Tanner crab","Fast5","FastQ","NanoPore"],"categories":["2020","Miscellaneous"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nTime to start working with [the NanoPore data that I generated back in March (???!!!)](https://robertslab.github.io/sams-notebook/posts/2020/2020-03-11-NanoPore-Sequencing---C.bairdi-gDNA-6129_403_26/). In order to proceed, I first need to convert the raw Fast5 files to FastQ. To do so, I'll use the NanoPore program `guppy`.\n\nAs noted in [a previous conversion](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-04-Data-Wrangling---NanoPore-Fast5-Conversion-to-FastQ-of-C.bairdi-20102558-2729-Run-01-on-Mox-with-GPU-Node/), I'll b processing this with a GPU node on Mox. Using a Mox GPU node decreases processing time by a ridiculous amount, compared to using CPUs. The only rub is that since we don't own a GPU node, any jobs we submit are:\n\n- lowest priority in any queue\n\n- can get interrupted at any time by jobs submitted by the node owner\n\nI'll be submitting these very early in the morning and with runtimes this fast, I shouldn't encounter any issues. Exciting!\n\nSBATCH script (GitHub):\n\n- [20200314_cbai_guppy_nanopore_6129_403_26.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200314_cbai_guppy_nanopore_6129_403_26.sh)\n\n```shell\n#!/bin/bash\n#SBATCH --job-name=cbai_guppy_nanopore_6129_403_26\n## Allocation Definition\n#SBATCH --account=srlab-ckpt\n#SBATCH --partition=ckpt\n## Resources\n## GPU\n#SBATCH --gres=gpu:P100:1\n#SBATCH --constraint=gpu_default\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=0-02:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200314_cbai_guppy_nanopore_6129_403_26\n\n## Script for running ONT guppy to perform\n## basecalling (i.e. convert raw ONT Fast5 to FastQ) of NanaPore data generated\n## on 20200311 from C.bairdi 6129_403_26 gDNA.\n\n## This script utilizes a GPU node. These nodes are only available as part of the checkpoint\n## partition/account. Since we don't own a GPU node, our GPU jobs are lowest priority and\n## can be interrupted at any time if the node owner submits a new job.\n\n###################################################################################\n# These variables need to be set by user\n\nwd=$(pwd)\n\n# Programs array\ndeclare -A programs_array\nprograms_array=(\n[guppy_basecaller]=\"/gscratch/srlab/programs/ont-guppy_4.0.15_linux64/bin/guppy_basecaller\"\n)\n\n# Establish variables for more readable code\n\n# Input files directory\nfast5_dir=/gscratch/srlab/sam/data/C_bairdi/DNAseq/ont_FAL86873_d8db260e_cbai_6129_403_26\n\n# Output directory\nout_dir=${wd}\n\n# CPU threads\nthreads=28\n\n# Flowcell type\nflowcell=\"FLO-MIN106\"\n\n# Sequencing kit used\nkit=\"SQK-RAD004\"\n\n# GPU devices setting\nGPU_devices=auto\n\n# Set number of FastQ sequences written per file (0 means all in one file)\nrecords_per_fastq=0\n\n###################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n# Load CUDA GPU module\nmodule load cuda/10.1.105_418.39\n\n\n${programs_array[guppy_basecaller]} \\\n--input_path ${fast5_dir} \\\n--save_path ${out_dir} \\\n--flowcell ${flowcell} \\\n--kit ${kit} \\\n--device ${GPU_devices} \\\n--records_per_fastq ${records_per_fastq} \\\n--num_callers ${threads}\n\n###################################################################################\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : n\n} >> system_path.log\n\n\n# Capture program options\nfor program in \"${!programs_array[@]}\"\ndo\n\t{\n  echo \"Program options for ${program}: \"\n\techo \"\"\n\t${programs_array[$program]} --help\n\techo \"\"\n\techo \"\"\n\techo \"----------------------------------------------\"\n\techo \"\"\n\techo \"\"\n} &>> program_options.log || true\ndone\n```\n\n\n---\n\n# RESULTS\n\nTook just a bit over an hour to process 127 files:\n\n![Fast5 to FastQ conversion runtime using Mox GPU node](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200314_cbai_guppy_nanopore_6129_403_26_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200314_cbai_guppy_nanopore_6129_403_26/](https://gannet.fish.washington.edu/Atumefaciens/20200314_cbai_guppy_nanopore_6129_403_26/)\n\nSequencing Summary (113MB; TXT)\n\n- [20200314_cbai_guppy_nanopore_6129_403_26/sequencing_summary.txt](https://gannet.fish.washington.edu/Atumefaciens/20200314_cbai_guppy_nanopore_6129_403_26/sequencing_summary.txt)\n\n  - Useful with downstream analysis tools, like [NanoPlot](https://github.com/wdecoster/NanoPlot).\n\nAll the resulting FastQ files can be accessed in the output folder linked above with this pattern:\n\n- `*.fastq`\n\nUnbeknownst to me, I misinterpreted the behavior of the program. I thought the FastQs from all of the Fast5 would be concatenated into a single FastQ. However, that's not the case. Each Fast5 got converted to its own FastQ. So, I now have 126 FastQ files instead of just one. Not a big deal as I can concatenate these at a later date.\n\nNow, I'll get these run through some QC software (FastQC, NanoPlot) to get an idea of how things look before processing them further.\n","srcMarkdownNoYaml":"\nTime to start working with [the NanoPore data that I generated back in March (???!!!)](https://robertslab.github.io/sams-notebook/posts/2020/2020-03-11-NanoPore-Sequencing---C.bairdi-gDNA-6129_403_26/). In order to proceed, I first need to convert the raw Fast5 files to FastQ. To do so, I'll use the NanoPore program `guppy`.\n\nAs noted in [a previous conversion](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-04-Data-Wrangling---NanoPore-Fast5-Conversion-to-FastQ-of-C.bairdi-20102558-2729-Run-01-on-Mox-with-GPU-Node/), I'll b processing this with a GPU node on Mox. Using a Mox GPU node decreases processing time by a ridiculous amount, compared to using CPUs. The only rub is that since we don't own a GPU node, any jobs we submit are:\n\n- lowest priority in any queue\n\n- can get interrupted at any time by jobs submitted by the node owner\n\nI'll be submitting these very early in the morning and with runtimes this fast, I shouldn't encounter any issues. Exciting!\n\nSBATCH script (GitHub):\n\n- [20200314_cbai_guppy_nanopore_6129_403_26.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200314_cbai_guppy_nanopore_6129_403_26.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=cbai_guppy_nanopore_6129_403_26\n## Allocation Definition\n#SBATCH --account=srlab-ckpt\n#SBATCH --partition=ckpt\n## Resources\n## GPU\n#SBATCH --gres=gpu:P100:1\n#SBATCH --constraint=gpu_default\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=0-02:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200314_cbai_guppy_nanopore_6129_403_26\n\n## Script for running ONT guppy to perform\n## basecalling (i.e. convert raw ONT Fast5 to FastQ) of NanaPore data generated\n## on 20200311 from C.bairdi 6129_403_26 gDNA.\n\n## This script utilizes a GPU node. These nodes are only available as part of the checkpoint\n## partition/account. Since we don't own a GPU node, our GPU jobs are lowest priority and\n## can be interrupted at any time if the node owner submits a new job.\n\n###################################################################################\n# These variables need to be set by user\n\nwd=$(pwd)\n\n# Programs array\ndeclare -A programs_array\nprograms_array=(\n[guppy_basecaller]=\"/gscratch/srlab/programs/ont-guppy_4.0.15_linux64/bin/guppy_basecaller\"\n)\n\n# Establish variables for more readable code\n\n# Input files directory\nfast5_dir=/gscratch/srlab/sam/data/C_bairdi/DNAseq/ont_FAL86873_d8db260e_cbai_6129_403_26\n\n# Output directory\nout_dir=${wd}\n\n# CPU threads\nthreads=28\n\n# Flowcell type\nflowcell=\"FLO-MIN106\"\n\n# Sequencing kit used\nkit=\"SQK-RAD004\"\n\n# GPU devices setting\nGPU_devices=auto\n\n# Set number of FastQ sequences written per file (0 means all in one file)\nrecords_per_fastq=0\n\n###################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n# Load CUDA GPU module\nmodule load cuda/10.1.105_418.39\n\n\n${programs_array[guppy_basecaller]} \\\n--input_path ${fast5_dir} \\\n--save_path ${out_dir} \\\n--flowcell ${flowcell} \\\n--kit ${kit} \\\n--device ${GPU_devices} \\\n--records_per_fastq ${records_per_fastq} \\\n--num_callers ${threads}\n\n###################################################################################\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : n\n} >> system_path.log\n\n\n# Capture program options\nfor program in \"${!programs_array[@]}\"\ndo\n\t{\n  echo \"Program options for ${program}: \"\n\techo \"\"\n\t${programs_array[$program]} --help\n\techo \"\"\n\techo \"\"\n\techo \"----------------------------------------------\"\n\techo \"\"\n\techo \"\"\n} &>> program_options.log || true\ndone\n```\n\n\n---\n\n# RESULTS\n\nTook just a bit over an hour to process 127 files:\n\n![Fast5 to FastQ conversion runtime using Mox GPU node](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200314_cbai_guppy_nanopore_6129_403_26_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200314_cbai_guppy_nanopore_6129_403_26/](https://gannet.fish.washington.edu/Atumefaciens/20200314_cbai_guppy_nanopore_6129_403_26/)\n\nSequencing Summary (113MB; TXT)\n\n- [20200314_cbai_guppy_nanopore_6129_403_26/sequencing_summary.txt](https://gannet.fish.washington.edu/Atumefaciens/20200314_cbai_guppy_nanopore_6129_403_26/sequencing_summary.txt)\n\n  - Useful with downstream analysis tools, like [NanoPlot](https://github.com/wdecoster/NanoPlot).\n\nAll the resulting FastQ files can be accessed in the output folder linked above with this pattern:\n\n- `*.fastq`\n\nUnbeknownst to me, I misinterpreted the behavior of the program. I thought the FastQs from all of the Fast5 would be concatenated into a single FastQ. However, that's not the case. Each Fast5 got converted to its own FastQ. So, I now have 126 FastQ files instead of just one. Not a big deal as I can concatenate these at a later date.\n\nNow, I'll get these run through some QC software (FastQC, NanoPlot) to get an idea of how things look before processing them further.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Data Wrangling - NanoPore Fast5 Conversion to FastQ of C.bairdi 6129_403_26 on Mox with GPU Node","date":"2020-09-04 13:48","tags":["guppy","mox","Tanner crab","Fast5","FastQ","NanoPore"],"categories":["2020","Miscellaneous"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}