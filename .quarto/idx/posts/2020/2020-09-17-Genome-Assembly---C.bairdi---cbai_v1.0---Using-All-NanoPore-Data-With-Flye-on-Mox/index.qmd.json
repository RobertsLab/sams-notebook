{"title":"Genome Assembly - C.bairdi - cbai_v1.0 - Using All NanoPore Data With Flye on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Genome Assembly - C.bairdi - cbai_v1.0 - Using All NanoPore Data With Flye on Mox","date":"2020-09-17 11:08","tags":["genome assembly","Tanner crab","Hematodinium","Chionoecetes bairdi","mox","flye"],"categories":["2020","Genome Assembly"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nAfter [quality filtering the _C.bairdi_ NanoPore data earlier today](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-17-Data-Wrangling---C.bairdi-NanoPore-Quality-Filtering-Using-NanoFilt-on-Mox/), I performed a _de novo_ assembly using [Flye](https://github.com/fenderglass/Flye) on Mox.\n\nSBATCH script (GitHub):\n\n- [20200917_cbai_flye_nanopore_genome_assembly.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200917_cbai_flye_nanopore_genome_assembly.sh)\n\n```shell\n#!/bin/bash\n#SBATCH --job-name=cbai_flye_nanopore_genome_assembly\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=25-00:00:00\n## Memory per node\n#SBATCH --mem=500G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200915_cbai_flye_nanopore_genome_assembly\n\n# Script to run Flye long read assembler on all quality filtered (Q7) C.bairdi NanoPore reads\n# from 20200917\n\n###################################################################################\n# These variables need to be set by user\n\n# Load Anaconda\n# Uknown why this is needed, but Anaconda will not run if this line is not included.\n. \"/gscratch/srlab/programs/anaconda3/etc/profile.d/conda.sh\"\n\n\n# Activate the flye Anaconda environment\nconda activate flye-2.8.1_env\n\n# Set number of CPUs to use\nthreads=28\n\n# Paths to programs\nflye=flye\n\n# Input FastQ\nfastq=/gscratch/srlab/sam/data/C_bairdi/DNAseq/20200917_cbai_nanopore_all_quality-7.fastq\n\n###################################################################################\n\n\n# Exit script if any command fails\nset -e\n\n\n# Capture this directory\nwd=$(pwd)\n\n# Inititalize arrays\nprograms_array=()\n\n\n# Programs array\nprograms_array=(\"${flye}\")\n\n# Run flye\n${flye} \\\n--nano-raw ${fastq} \\\n--out-dir ${wd} \\\n--threads ${threads}\n\n# Generate checksum file\nmd5sum \"${fastq}\" > fastq_checksums.md5\n\n# Capture program options\nfor program in \"${!programs_array[@]}\"\ndo\n\t{\n  echo \"Program options for ${programs_array[program]}: \"\n\techo \"\"\n\t${programs_array[program]} -h\n\techo \"\"\n\techo \"\"\n\techo \"----------------------------------------------\"\n\techo \"\"\n\techo \"\"\n} &>> program_options.log || true\ndone\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n```\n\n\n---\n\n# RESULTS\n\nRuntime was very fast; just over 1hr!\n\n![Flye runtime for C.bairdi Q7 NanoPore assembly](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200917_cbai_flye_nanopore_genome_assembly_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200917_cbai_flye_nanopore_genome_assembly/](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_flye_nanopore_genome_assembly/)\n\nGenome Assembly (FastA; 19MB)\n\n- [20200917_cbai_flye_nanopore_genome_assembly/cbai_genome_v1.0.fasta](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_flye_nanopore_genome_assembly/cbai_genome_v1.0.fasta)\n\n  - MD5 checksum (text):\n\n    - `2f3b651bb0b875b0287e71e315cad59a`\n\nNOTE: The output files were named `assembly_*`. At the time I ran this, I didn't realize that was the case, so I had to rename them to reflect the `cba_genome_v1.0` notation after the fact; thus this step is not present in the SBATCH script.\n\nWell, this is pretty exciting! Here's a quick assembly summary (found at the end of the [SLURM output file](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_flye_nanopore_genome_assembly/slurm-294008.out)):\n\n```\nINFO: Assembly statistics:\n\n\tTotal length:\t19216531\n\tFragments:\t3294\n\tFragments N50:\t14130\n\tLargest frg:\t141601\n\tScaffolds:\t6\n\tMean coverage:\t17\n```\nAdmittedly, there are definitely some issues with the assembly. For example, here's a portion of the FastA index file:\n\n```\ncontig_3421\t1\t11083798\t1\t2\ncontig_2582\t3\t4548025\t3\t4\ncontig_3109\t46\t8747210\t46\t47\ncontig_2139\t49\t3182267\t49\t50\ncontig_4287\t58\t16100814\t58\t59\ncontig_3575\t66\t12248950\t60\t61\ncontig_793\t69\t18935471\t60\t61\ncontig_3976\t84\t14959281\t60\t61\ncontig_2281\t104\t3633003\t60\t61\ncontig_4015\t104\t15091851\t60\t61\n```\n\nColumn #2 is the sequence length. The first two \"contigs\" have lengths of < 5bp! Obviously, this is useless. I know we can just filter out small contigs for subsequent analyses, but it's disconcerting that [Flye](https://github.com/fenderglass/Flye) actually spit these out as \"contigs\" instead of discarding them. I've [submitted an issue](https://github.com/fenderglass/Flye/issues/304) to see if I can obtain some understanding about why this occurred.\n\nRegardless, I'll get this posted to the [Genomic Resources wiki](https://github.com/RobertsLab/resources/wiki/Genomic-Resources).\n\nSo, where do we go from here? A couple of things:\n\n- Visualize the assembly graphs with something like [Bandage](https://github.com/rrwick/Bandage). I'm hoping this will lead to a better understanding of how these graph assemblies (as opposed to alignment-based assemblies) work.\n\n- Run BUSCO to assess genome \"completeness\".\n\n- Attempt to separate out _Hematodinium_ sequences.\n\n- Annotate the assembly with GenSAS and/or BLAST or something.\n","srcMarkdownNoYaml":"\nAfter [quality filtering the _C.bairdi_ NanoPore data earlier today](https://robertslab.github.io/sams-notebook/posts/2020/2020-09-17-Data-Wrangling---C.bairdi-NanoPore-Quality-Filtering-Using-NanoFilt-on-Mox/), I performed a _de novo_ assembly using [Flye](https://github.com/fenderglass/Flye) on Mox.\n\nSBATCH script (GitHub):\n\n- [20200917_cbai_flye_nanopore_genome_assembly.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200917_cbai_flye_nanopore_genome_assembly.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=cbai_flye_nanopore_genome_assembly\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=25-00:00:00\n## Memory per node\n#SBATCH --mem=500G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200915_cbai_flye_nanopore_genome_assembly\n\n# Script to run Flye long read assembler on all quality filtered (Q7) C.bairdi NanoPore reads\n# from 20200917\n\n###################################################################################\n# These variables need to be set by user\n\n# Load Anaconda\n# Uknown why this is needed, but Anaconda will not run if this line is not included.\n. \"/gscratch/srlab/programs/anaconda3/etc/profile.d/conda.sh\"\n\n\n# Activate the flye Anaconda environment\nconda activate flye-2.8.1_env\n\n# Set number of CPUs to use\nthreads=28\n\n# Paths to programs\nflye=flye\n\n# Input FastQ\nfastq=/gscratch/srlab/sam/data/C_bairdi/DNAseq/20200917_cbai_nanopore_all_quality-7.fastq\n\n###################################################################################\n\n\n# Exit script if any command fails\nset -e\n\n\n# Capture this directory\nwd=$(pwd)\n\n# Inititalize arrays\nprograms_array=()\n\n\n# Programs array\nprograms_array=(\"${flye}\")\n\n# Run flye\n${flye} \\\n--nano-raw ${fastq} \\\n--out-dir ${wd} \\\n--threads ${threads}\n\n# Generate checksum file\nmd5sum \"${fastq}\" > fastq_checksums.md5\n\n# Capture program options\nfor program in \"${!programs_array[@]}\"\ndo\n\t{\n  echo \"Program options for ${programs_array[program]}: \"\n\techo \"\"\n\t${programs_array[program]} -h\n\techo \"\"\n\techo \"\"\n\techo \"----------------------------------------------\"\n\techo \"\"\n\techo \"\"\n} &>> program_options.log || true\ndone\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n```\n\n\n---\n\n# RESULTS\n\nRuntime was very fast; just over 1hr!\n\n![Flye runtime for C.bairdi Q7 NanoPore assembly](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200917_cbai_flye_nanopore_genome_assembly_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200917_cbai_flye_nanopore_genome_assembly/](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_flye_nanopore_genome_assembly/)\n\nGenome Assembly (FastA; 19MB)\n\n- [20200917_cbai_flye_nanopore_genome_assembly/cbai_genome_v1.0.fasta](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_flye_nanopore_genome_assembly/cbai_genome_v1.0.fasta)\n\n  - MD5 checksum (text):\n\n    - `2f3b651bb0b875b0287e71e315cad59a`\n\nNOTE: The output files were named `assembly_*`. At the time I ran this, I didn't realize that was the case, so I had to rename them to reflect the `cba_genome_v1.0` notation after the fact; thus this step is not present in the SBATCH script.\n\nWell, this is pretty exciting! Here's a quick assembly summary (found at the end of the [SLURM output file](https://gannet.fish.washington.edu/Atumefaciens/20200917_cbai_flye_nanopore_genome_assembly/slurm-294008.out)):\n\n```\nINFO: Assembly statistics:\n\n\tTotal length:\t19216531\n\tFragments:\t3294\n\tFragments N50:\t14130\n\tLargest frg:\t141601\n\tScaffolds:\t6\n\tMean coverage:\t17\n```\nAdmittedly, there are definitely some issues with the assembly. For example, here's a portion of the FastA index file:\n\n```\ncontig_3421\t1\t11083798\t1\t2\ncontig_2582\t3\t4548025\t3\t4\ncontig_3109\t46\t8747210\t46\t47\ncontig_2139\t49\t3182267\t49\t50\ncontig_4287\t58\t16100814\t58\t59\ncontig_3575\t66\t12248950\t60\t61\ncontig_793\t69\t18935471\t60\t61\ncontig_3976\t84\t14959281\t60\t61\ncontig_2281\t104\t3633003\t60\t61\ncontig_4015\t104\t15091851\t60\t61\n```\n\nColumn #2 is the sequence length. The first two \"contigs\" have lengths of < 5bp! Obviously, this is useless. I know we can just filter out small contigs for subsequent analyses, but it's disconcerting that [Flye](https://github.com/fenderglass/Flye) actually spit these out as \"contigs\" instead of discarding them. I've [submitted an issue](https://github.com/fenderglass/Flye/issues/304) to see if I can obtain some understanding about why this occurred.\n\nRegardless, I'll get this posted to the [Genomic Resources wiki](https://github.com/RobertsLab/resources/wiki/Genomic-Resources).\n\nSo, where do we go from here? A couple of things:\n\n- Visualize the assembly graphs with something like [Bandage](https://github.com/rrwick/Bandage). I'm hoping this will lead to a better understanding of how these graph assemblies (as opposed to alignment-based assemblies) work.\n\n- Run BUSCO to assess genome \"completeness\".\n\n- Attempt to separate out _Hematodinium_ sequences.\n\n- Annotate the assembly with GenSAS and/or BLAST or something.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Genome Assembly - C.bairdi - cbai_v1.0 - Using All NanoPore Data With Flye on Mox","date":"2020-09-17 11:08","tags":["genome assembly","Tanner crab","Hematodinium","Chionoecetes bairdi","mox","flye"],"categories":["2020","Genome Assembly"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}