{"title":"SRA Library Assessment - Determine RNAseq Library Strandedness from P.trituberculatus SRA BioProject PRJNA597187","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"SRA Library Assessment - Determine RNAseq Library Strandedness from P.trituberculatus SRA BioProject PRJNA597187","date":"2020-05-21 14:53","tags":["PRJNA597187","RNAseq","Trinity","Bowtie2","transcriptome","Portunus trituberculatus","Japanese blue crab","SRA","mox"],"categories":["2020","Miscellaneous"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nWe've [produced a number of _C.bairid_ transcriptomes](https://github.com/RobertsLab/resources/wiki/Genomic-Resources#transcriptomes) utilizing different assembly approaches (e.g. _Arthropoda_ reads only, stranded libraries only, mixed strandedness libraries, etc) and we want to determine which of them is \"best\". Trinity has a [nice list of tools to assess the quality of transcriptome assemblies](https://github.com/trinityrnaseq/trinityrnaseq/wiki/Transcriptome-Assembly-Quality-Assessment), but most of the tools rely on comparison to a transcriptome of a related species.\n\nI was unable to readily find a crab transcriptome assembly anywhere, so decided to make our own assembly using RNAseq data from [NCBI SRA BioProject PRJNA597187](https://www.ncbi.nlm.nih.gov/bioproject/PRJNA597187/). This is from the Japanese blue crab, _Portunus trituberculatus_ and has a fair amount of sequencing data, which should result in a pretty comprehensive transcriptome.\n\nBefore assembling, however, I want to determine if the libraries in this particular project were stranded or not, as Trinity has an option to indicate stranded libraries for use in the assembly. Trinity also offers a script to determine library strandedness [which produces a set of violin plots to help discern the type of library one is working with](https://github.com/trinityrnaseq/trinityrnaseq/wiki/Examine-Strand-Specificity).\n\nBasically, you have to create a transcriptome assembly and then map the reads back to the assembly. Then, the Trinity script `examine_strand_specificity.pl` will generate the violin plots. I ran the Trinity script on just a single set of paired-end reads FastQs to make this happen relatively quickly. This was run on Mox.\n\nSBATCH script (GitHub):\n\n- [20200521_ptri_trinity_strandedness_check.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200521_ptri_trinity_strandedness_check.sh)\n\n```shell\n#!/bin/bash\n#SBATCH --job-name=trinity_ptri_strand_check\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=9-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200521_ptri_trinity_strandedness_check\n\n### De novo transcriptome assembly of Portunus trituberculatus (Japanese blue crab)\n### RNAseq data from  NCBI BioProject PRJNA597187.\n### Use single set of FastQ reads to determine library standedness.\n\n# Exit script if a command fails\nset -e\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\n# User-defined variables\nreads_dir=/gscratch/srlab/sam/data/P_trituberculatus/RNAseq\nthreads=28\nassembly_stats=assembly_stats.txt\n\n# Paths to programs\ntrinity_dir=\"/gscratch/srlab/programs/trinityrnaseq-v2.9.0\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\ntrinity_bowtie=\"${trinity_dir}/util/misc/run_bowtie2.pl\"\ntrinity_strand=\"${trinity_dir}/util/misc/examine_strand_specificity.pl\"\n\n\n## Inititalize arrays\nR1_array=()\nR2_array=()\n\n# Variables for R1/R2 lists\nR1_list=\"\"\nR2_list=\"\"\n\n# Create array of fastq R1 files\nR1_array=(\"${reads_dir}\"/SRR10757128.sra_1.fastq)\n\n# Create array of fastq R2 files\nR2_array=(\"${reads_dir}\"/SRR10757128.sra_2.fastq)\n\n# Create list of fastq files used in analysis\n## Uses parameter substitution to strip leading path from filename\nfor fastq in \"${!R1_array[@]}\"\ndo\n  {\n    echo \"${R1_array[${fastq}]##*/}\"\n    echo \"${R2_array[${fastq}]##*/}\"\n  } >> fastq.list.txt\ndone\n\n# Create comma-separated lists of FastQ reads\nR1_list=$(echo \"${R1_array[@]}\" | tr \" \" \",\")\nR2_list=$(echo \"${R2_array[@]}\" | tr \" \" \",\")\n\n\n# Run Trinity\n## Not running as \"stranded\", due to mix of library types\n${trinity_dir}/Trinity \\\n--seqType fq \\\n--max_memory 100G \\\n--CPU ${threads} \\\n--left \"${R1_list}\" \\\n--right \"${R2_list}\"\n\n# Assembly stats\n${trinity_dir}/util/TrinityStats.pl trinity_out_dir/Trinity.fasta \\\n> ${assembly_stats}\n\n# Create FastA index\n${samtools} faidx \\\ntrinity_out_dir/Trinity.fasta\n\n# Align reads to assembly\n${trinity_bowtie} \\\n--target trinity_out_dir/Trinity.fasta \\\n--left \"${R1_list}\" \\\n--right \"${R2_list}\" \\\n| ${samtools} view \\\n--threads ${threads} \\\n-Sb - \\\n| ${samtools} sort \\\n--threads ${threads} \\\n- -o bowtie2.coordSorted.bam\n\n# Examine strand specificity\n${trinity_strand} bowtie2.coordSorted.bam\n```\n\n---\n\n# RESULTS\n\nThis took a surprisingly long time to run, considering I was only using a single set of paired-end reads; ~15hrs (note: failure shown below was due to a missin R package (`vioplot`) needed for plotting)\n\n![strandedness runtime](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200521_ptri_trinity_strandedness_check_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200521_ptri_trinity_strandedness_check](https://gannet.fish.washington.edu/Atumefaciens/20200521_ptri_trinity_strandedness_check/)\n\nViolin plots (PDF):\n\n- [ss_analysis.dat.vioplot.pdf](https://gannet.fish.washington.edu/Atumefaciens/20200521_ptri_trinity_strandedness_check/ss_analysis.dat.vioplot.pdf)\n\n![ptri strandedness violin plots](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200521_ptri_trinity_strandedness_check_violin-plots.png?raw=true)\n\n---\n\nTrinity Example:\n\n![Trinity example of stranded library aligned to non-stranded assembly](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200521_ptri_trinity_strandedness_check_trinity_violin-plots.png?raw=true)\n\n---\n\nThe shape of my violin plots (\"barbell\") match the Trinity example of stranded libraries aligned to an assembly created with the non-stranded setting, indicating that the libraries for these RNAseq reads are stranded. I will create a transcriptome assembly from all of the reads using the stranded setting in Trinity.\n","srcMarkdownNoYaml":"\nWe've [produced a number of _C.bairid_ transcriptomes](https://github.com/RobertsLab/resources/wiki/Genomic-Resources#transcriptomes) utilizing different assembly approaches (e.g. _Arthropoda_ reads only, stranded libraries only, mixed strandedness libraries, etc) and we want to determine which of them is \"best\". Trinity has a [nice list of tools to assess the quality of transcriptome assemblies](https://github.com/trinityrnaseq/trinityrnaseq/wiki/Transcriptome-Assembly-Quality-Assessment), but most of the tools rely on comparison to a transcriptome of a related species.\n\nI was unable to readily find a crab transcriptome assembly anywhere, so decided to make our own assembly using RNAseq data from [NCBI SRA BioProject PRJNA597187](https://www.ncbi.nlm.nih.gov/bioproject/PRJNA597187/). This is from the Japanese blue crab, _Portunus trituberculatus_ and has a fair amount of sequencing data, which should result in a pretty comprehensive transcriptome.\n\nBefore assembling, however, I want to determine if the libraries in this particular project were stranded or not, as Trinity has an option to indicate stranded libraries for use in the assembly. Trinity also offers a script to determine library strandedness [which produces a set of violin plots to help discern the type of library one is working with](https://github.com/trinityrnaseq/trinityrnaseq/wiki/Examine-Strand-Specificity).\n\nBasically, you have to create a transcriptome assembly and then map the reads back to the assembly. Then, the Trinity script `examine_strand_specificity.pl` will generate the violin plots. I ran the Trinity script on just a single set of paired-end reads FastQs to make this happen relatively quickly. This was run on Mox.\n\nSBATCH script (GitHub):\n\n- [20200521_ptri_trinity_strandedness_check.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20200521_ptri_trinity_strandedness_check.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=trinity_ptri_strand_check\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=9-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20200521_ptri_trinity_strandedness_check\n\n### De novo transcriptome assembly of Portunus trituberculatus (Japanese blue crab)\n### RNAseq data from  NCBI BioProject PRJNA597187.\n### Use single set of FastQ reads to determine library standedness.\n\n# Exit script if a command fails\nset -e\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n# Document programs in PATH (primarily for program version ID)\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\n# User-defined variables\nreads_dir=/gscratch/srlab/sam/data/P_trituberculatus/RNAseq\nthreads=28\nassembly_stats=assembly_stats.txt\n\n# Paths to programs\ntrinity_dir=\"/gscratch/srlab/programs/trinityrnaseq-v2.9.0\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\ntrinity_bowtie=\"${trinity_dir}/util/misc/run_bowtie2.pl\"\ntrinity_strand=\"${trinity_dir}/util/misc/examine_strand_specificity.pl\"\n\n\n## Inititalize arrays\nR1_array=()\nR2_array=()\n\n# Variables for R1/R2 lists\nR1_list=\"\"\nR2_list=\"\"\n\n# Create array of fastq R1 files\nR1_array=(\"${reads_dir}\"/SRR10757128.sra_1.fastq)\n\n# Create array of fastq R2 files\nR2_array=(\"${reads_dir}\"/SRR10757128.sra_2.fastq)\n\n# Create list of fastq files used in analysis\n## Uses parameter substitution to strip leading path from filename\nfor fastq in \"${!R1_array[@]}\"\ndo\n  {\n    echo \"${R1_array[${fastq}]##*/}\"\n    echo \"${R2_array[${fastq}]##*/}\"\n  } >> fastq.list.txt\ndone\n\n# Create comma-separated lists of FastQ reads\nR1_list=$(echo \"${R1_array[@]}\" | tr \" \" \",\")\nR2_list=$(echo \"${R2_array[@]}\" | tr \" \" \",\")\n\n\n# Run Trinity\n## Not running as \"stranded\", due to mix of library types\n${trinity_dir}/Trinity \\\n--seqType fq \\\n--max_memory 100G \\\n--CPU ${threads} \\\n--left \"${R1_list}\" \\\n--right \"${R2_list}\"\n\n# Assembly stats\n${trinity_dir}/util/TrinityStats.pl trinity_out_dir/Trinity.fasta \\\n> ${assembly_stats}\n\n# Create FastA index\n${samtools} faidx \\\ntrinity_out_dir/Trinity.fasta\n\n# Align reads to assembly\n${trinity_bowtie} \\\n--target trinity_out_dir/Trinity.fasta \\\n--left \"${R1_list}\" \\\n--right \"${R2_list}\" \\\n| ${samtools} view \\\n--threads ${threads} \\\n-Sb - \\\n| ${samtools} sort \\\n--threads ${threads} \\\n- -o bowtie2.coordSorted.bam\n\n# Examine strand specificity\n${trinity_strand} bowtie2.coordSorted.bam\n```\n\n---\n\n# RESULTS\n\nThis took a surprisingly long time to run, considering I was only using a single set of paired-end reads; ~15hrs (note: failure shown below was due to a missin R package (`vioplot`) needed for plotting)\n\n![strandedness runtime](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200521_ptri_trinity_strandedness_check_runtime.png?raw=true)\n\nOutput folder:\n\n- [20200521_ptri_trinity_strandedness_check](https://gannet.fish.washington.edu/Atumefaciens/20200521_ptri_trinity_strandedness_check/)\n\nViolin plots (PDF):\n\n- [ss_analysis.dat.vioplot.pdf](https://gannet.fish.washington.edu/Atumefaciens/20200521_ptri_trinity_strandedness_check/ss_analysis.dat.vioplot.pdf)\n\n![ptri strandedness violin plots](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200521_ptri_trinity_strandedness_check_violin-plots.png?raw=true)\n\n---\n\nTrinity Example:\n\n![Trinity example of stranded library aligned to non-stranded assembly](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20200521_ptri_trinity_strandedness_check_trinity_violin-plots.png?raw=true)\n\n---\n\nThe shape of my violin plots (\"barbell\") match the Trinity example of stranded libraries aligned to an assembly created with the non-stranded setting, indicating that the libraries for these RNAseq reads are stranded. I will create a transcriptome assembly from all of the reads using the stranded setting in Trinity.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"SRA Library Assessment - Determine RNAseq Library Strandedness from P.trituberculatus SRA BioProject PRJNA597187","date":"2020-05-21 14:53","tags":["PRJNA597187","RNAseq","Trinity","Bowtie2","transcriptome","Portunus trituberculatus","Japanese blue crab","SRA","mox"],"categories":["2020","Miscellaneous"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}