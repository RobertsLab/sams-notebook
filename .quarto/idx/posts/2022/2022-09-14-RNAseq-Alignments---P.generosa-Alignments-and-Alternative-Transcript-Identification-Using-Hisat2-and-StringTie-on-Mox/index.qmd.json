{"title":"RNAseq Alignments - P.generosa Alignments and Alternative Transcript Identification Using Hisat2 and StringTie on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"RNAseq Alignments - P.generosa Alignments and Alternative Transcript Identification Using Hisat2 and StringTie on Mox","date":"2022-09-14 07:14","tags":["Panopea generosa","geoduck","mox","hisat2","StringTie","alignment","RNAseq"],"categories":["2022","Miscellaneous"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nAs part of [identifying long non-coding RNA (lncRNA) in Pacific geoduck](https://github.com/RobertsLab/resources/issues/1434)(GitHub Issue), one of the first things that I wanted to do was to gather all of our geoduck RNAseq data and align it to our geoduck genome. In addition to the alignments, some of the examples I've been following have also utilized expression levels as one aspect of the lncRNA selection criteria, so I figured I'd get this info as well.\n\n[Trimmed RNAseq data from 20220908](https://robertslab.github.io/sams-notebook/posts/2022/2022-09-08-FastQ-Trimming---Geoduck-RNAseq-Data-Using-fastp-on-Mox/) was aligned to our [_Panopea generosa_ (Pacific geoduck)](http://en.wikipedia.org/wiki/Geoduck) genome assembly, [Panopea-generosa-v1.0.fa](https://gannet.fish.washington.edu/Atumefaciens/20191105_swoose_pgen_v074_renaming/Panopea-generosa-v1.0.fa) (FastA; 914MB), using [`HISAT2`](https://daehwankimlab.github.io/hisat2/). Alternative transcripts and expression values were determined using [`StringTie`](https://ccb.jhu.edu/software/stringtie/). These were run on Mox.\n\nHere's a summary of the process:\n\n1. Generate necessary [`HISAT2`](https://daehwankimlab.github.io/hisat2/) reference files (e.g. splic sites, exons, genome indexes).\n\n2. Concatenate FastQ files based on tissue/age and/or OA treatment.\n\n3. Run [`HISAT2`](https://daehwankimlab.github.io/hisat2/) on concatenated FastQs.\n\n4. Run [`StringTie`](https://ccb.jhu.edu/software/stringtie/) on grouped samples, with output formatted for import into Ballgown.\n\nThe SBATCH script below is very long. Skip to [RESULTS section](#results) if you want.\n\n\nSBATCH script (GitHub):\n\n- [20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms.sh)\n\n```shell\n#!/bin/bash\n#SBATCH --job-name=20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=21-00:00:00\n## Memory per node\n#SBATCH --mem=200G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms\n\n## Script for HiSat2 indexing of P.generosa genome assembly Panopea-generosa-v1.0,\n## HiSat2 alignments, running Stringtie to identify splice sites and calculate gene/transcript expression values (FPKM),\n## formatted for import into Ballgown (R/Bioconductor).\n\n## Process part of identification of long non-coding RNAs (lnRNA) in geoduck.\n\n###################################################################################\n# These variables need to be set by user\n\n## Assign Variables\n\n# Set number of CPUs to use\nthreads=40\n\n# Index name for Hisat2 use\n# Needs to match index naem used in previous Hisat2 indexing step\ngenome_index_name=\"Panopea-generosa-v1.0\"\n\n# Location of Hisat2 index files\n# Must keep variable name formatting, as it's used by HiSat2\nHISAT2_INDEXES=$(pwd)\nexport HISAT2_INDEXES\n\n# Paths to programs\nhisat2_dir=\"/gscratch/srlab/programs/hisat2-2.1.0\"\nhisat2=\"${hisat2_dir}/hisat2\"\nhisat2_build=\"${hisat2_dir}/hisat2-build\"\nhisat2_exons=\"${hisat2_dir}/hisat2_extract_exons.py\"\nhisat2_splice_sites=\"${hisat2_dir}/hisat2_extract_splice_sites.py\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\nstringtie=\"/gscratch/srlab/programs/stringtie-1.3.6.Linux_x86_64/stringtie\"\n\n# Input/output files\nexons=\"Panopea-generosa-v1.0_hisat2_exons.tab\"\nfastq_dir=\"/gscratch/scrubbed/samwhite/outputs/20220909-pgen-fastqc-fastp-mutliqc-rnaseq/\"\ngenome_dir=\"/gscratch/srlab/sam/data/P_generosa/genomes\"\ngenome_index_dir=\"/gscratch/srlab/sam/data/P_generosa/genomes\"\ngenome_fasta=\"${genome_dir}/Panopea-generosa-v1.0.fasta\"\ngenome_gff=\"${genome_index_dir}/Panopea-generosa-v1.0.a4_biotype-trna_strand_converted-no_RNAmmer.gff\"\ngtf_list=\"gtf_list.txt\"\nmerged_bam=\"20220914-pgen-stringtie-Panopea-generosa-v1.0-sorted_bams-merged.bam\"\nsplice_sites=\"Panopea-generosa-v1.0_hisat2_splice_sites.tab\"\ntranscripts_gtf=\"${genome_dir}/Panopea-generosa-v1.0.a4_biotype-trna_strand_converted-no_RNAmmer.gtf\"\n\n\n# Set FastQ filename patterns\nfastq_pattern=\"fastp-trim.20220908.fq.gz\"\nR1_fastq_pattern='*R1*.fastp-trim.20220908.fq.gz'\nR2_fastq_pattern='*R2*.fastp-trim.20220908.fq.gz'\nR1_fastq_naming_pattern=\"R1.${fastq_pattern}\"\nR2_fastq_naming_pattern=\"R2.${fastq_pattern}\"\n\n# Declare associative array of sample names and metadata\ndeclare -A samples_associative_array=()\n\n# Set total number of samples/treatments (NOT number of FastQ files)\n# Used for confirming proper array population of samples_associative_array\ntotal_samples=8\n\n# Set total of original FastQ files\n# Used for confirming all FastQs are processed.\ntotal_fastqs=150\n\n# Inititalize arrays\nfastq_array_R1=()\nfastq_array_R2=()\n\n# Programs associative array\ndeclare -A programs_array\n\nprograms_array=(\n[hisat2]=\"${hisat2}\" \\\n[hisat2_build]=\"${hisat2_build}\" \\\n[hisat2_exons]=\"${hisat2_exons}\" \\\n[hisat2_splice_sites]=\"${hisat2_splice_sites}\"\n[samtools_index]=\"${samtools} index\" \\\n[samtools_merge]=\"${samtools} merge\" \\\n[samtools_sort]=\"${samtools} sort\" \\\n[samtools_view]=\"${samtools} view\" \\\n[stringtie]=\"${stringtie}\"\n)\n\n\n###################################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n\n\n# Create Hisat2 exons tab file\necho \"Generating Hisat2 exons file...\"\n\"${programs_array[hisat2_exons]}\" \\\n\"${transcripts_gtf}\" \\\n> \"${exons}\"\necho \"Exons file created: ${exons}.\"\necho \"\"\n\n# Create Hisat2 splice sites tab file\necho \"Generating Hisat2 splice sites file...\"\n\"${programs_array[hisat2_splice_sites]}\" \\\n\"${transcripts_gtf}\" \\\n> \"${splice_sites}\"\necho \"Splice sites file created: ${splice_sites}.\"\necho \"\"\n\n# Build Hisat2 reference index using splice sites and exons\necho \"Beginning HiSat2 genome indexing...\"\n\"${programs_array[hisat2_build]}\" \\\n\"${genome_fasta}\" \\\n\"${genome_index_name}\" \\\n--exon \"${exons}\" \\\n--ss \"${splice_sites}\" \\\n-p \"${threads}\" \\\n2> hisat2_build.err\necho \"HiSat2 genome index files completed.\"\necho \"\"\n\n# Generate checksums for all files\necho \"Generating checksums...\"\nmd5sum ./* | tee --append checksums.md5\necho \"\"\necho \"Finished generating checksums. See file: checksums.md5\"\necho \"\"\n\n# Copy Hisat2 index files to my data directory for later use with StringTie\necho \"Rsyncing HiSat2 genome index files to ${genome_dir}.\"\nrsync -av \"${genome_index_name}\"*.ht2 \"${genome_dir}\"\necho \"Rsync completed.\"\necho \"\"\n\n# Create arrays of fastq R1 files and sample names\n# Do NOT quote R1_fastq_pattern variable\necho \"Creating array of R1 FastQ files...\"\n\nfor fastq in \"${fastq_dir}\"${R1_fastq_pattern}\ndo\n  fastq_array_R1+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R1_names_array+=(\"${fastq%%.*}\")\ndone\n\necho \"\"\n\n# Create array of fastq R2 files\n# Do NOT quote R2_fastq_pattern variable\necho \"Creating array of R2 FastQ files...\"\n\nfor fastq in \"${fastq_dir}\"${R2_fastq_pattern}\ndo\n  fastq_array_R2+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R2_names_array+=(\"${fastq%%.*}\")\ndone\necho \"\"\n\n# Set sample counters for array verification\nR1_fastq_counter=0\nR2_fastq_counter=0\n\n# Concatenate R1 FastQ files\necho \"Beginning concatenation of R1 FastQ files...\"\necho \"\"\nfor fastq in \"${fastq_array_R1[@]}\"\ndo\n\n  # Generate MD5 checksums for original set of FastQs\n  echo \"Generating MD5 checksum for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append original-fastq-checksums.md5\n  echo \"\"\n\n  # Increment counter\n  ((R1_fastq_counter+=1))\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from first \".\"-delimited field\n  sample_type=$(echo \"${sample_name}\" | awk -F \".\" '{print $1}')\n\n  # Parse out tissue/sample types\n  juvenile_treatment=$(echo \"${sample_type}\" | awk -F [-_] '{print $3}')\n  tissue=$(echo \"${sample_type}\" | awk -F \"-\" '{print $2}')\n  trueseq_tissue=$(echo \"${sample_type}\" | awk -F [-_] '{print $7}')\n\n\n  # Concatenate reads from multiple runs\n  if\n    [[ \"${tissue}\" == \"ctenidia\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR012\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-ctenidia-\"${R1_fastq_naming_pattern}\"\n\n    echo \"Concatenated ${fastq} to concatenated-ctenidia-${R1_fastq_naming_pattern}\"\n    echo \"\"\n\n  elif\n    [[ \"${tissue}\" == \"gonad\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR006\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-gonad-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-gonad-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"heart\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-heart-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-heart-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"juvenile\" ]] \\\n    && [[ \"${juvenile_treatment}\" == \"ambient\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_ambient-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_ambient-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${trueseq_tissue}\" == \"NR019\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_ambient-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_ambient-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"juvenile\" ]] \\\n    && [[ \"${juvenile_treatment}\" == \"OA\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_OA-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_OA-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${trueseq_tissue}\" == \"NR005\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_OA-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_OA-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"larvae\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR021\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-larvae-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-larvae-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  # Handles Geo_Pool samples\n  else\n    echo \"Rsyincing ${fastq} to current directory\"\n    echo \"because it does not need concatenation.\"\n    echo \"\"\n    rsync -av \"${fastq}\" .\n    echo \"\"\n  fi\n\ndone\n\necho \"Finshed R1 FastQ concatenation.\"\necho \"\"\necho \"\"\necho \"\"\n\n# Concatenate R2 FastQ files\necho \"Beginning concatenation of R2 FastQ files...\"\necho \"\"\n\nfor fastq in \"${fastq_array_R2[@]}\"\ndo\n\n  # Generate MD5 checksums for original set of FastQs\n  echo \"Generating MD5 checksum for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append original-fastq-checksums.md5\n  echo \"\"\n\n  # Increment counter\n  ((R2_fastq_counter+=1))\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from first \".\"-delimited field\n  sample_type=$(echo \"${sample_name}\" | awk -F \".\" '{print $1}')\n\n  # Parse out tissue/sample types\n  juvenile_treatment=$(echo \"${sample_type}\" | awk -F [-_] '{print $3}')\n  tissue=$(echo \"${sample_type}\" | awk -F \"-\" '{print $2}')\n  trueseq_tissue=$(echo \"${sample_type}\" | awk -F [-_] '{print $7}')\n\n\n  # Concatenate reads from multiple runs\n  if\n    [[ \"${tissue}\" == \"ctenidia\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR012\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-ctenidia-\"${R2_fastq_naming_pattern}\"\n\n    echo \"Concatenated ${fastq} to concatenated-ctenidia-${R2_fastq_naming_pattern}\"\n    echo \"\"\n\n  elif\n    [[ \"${tissue}\" == \"gonad\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR006\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-gonad-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-gonad-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"heart\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-heart-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-heart-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"juvenile\" ]] \\\n    && [[ \"${juvenile_treatment}\" == \"ambient\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_ambient-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_ambient-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${trueseq_tissue}\" == \"NR019\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_ambient-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_ambient-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"juvenile\" ]] \\\n    && [[ \"${juvenile_treatment}\" == \"OA\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_OA-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_OA-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${trueseq_tissue}\" == \"NR005\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_OA-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_OA-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"larvae\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR021\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-larvae-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-larvae-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  # Handles Geo_Pool samples\n  else\n    rsync -av \"${fastq}\" .\n  fi\n\ndone\n\n# Check FastQ array sizes to confirm they have all expected samples\n# Exit if mismatch\n\necho \"Confirming expected number of FastQs processed...\"\nsum_fastqs=$((${R1_fastq_counter} + ${R2_fastq_counter}))\nif [[ \"${sum_fastqs}\" != \"${total_fastqs}\" ]]\nthen\n  echo \"Expected ${total_fastqs} FastQs, but only found ${sum_fastqs}!\"\n  echo \"\"\n  echo \"Check original-fastq-checksums.md5 file for list of FastQs processed.\"\n  echo \"\"\n  exit 1\nelse\n  echo \"Great!\"\n  printf \"%-20s %s\\n\" \"Expected:\" \"${total_fastqs}\"\n  printf \"%-20s %s\\n\" \"Processed:\" \"${sum_fastqs}\"\n  echo \"\"\nfi\n\n\n\n###### Load associative array ######\n\nfor fastq in *\"${fastq_pattern}\"\ndo\n  # Generate MD5 checksums for original set of FastQs\n  echo \"Generating MD5 checksums for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append concatenated-fastq-checksums.md5\n  echo \"\"\n\n  echo \"\"\n  echo \"Processing $fastq for associative array...\"\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from second \"-\"-delimited field\n  sample_type=$(echo \"${sample_name}\" | awk -F \"-\" '{print $2}')\n  echo \"Sample type before eval: ${sample_type}\"\n\n  # Get sample name from second \"-\"-delimited field\n  # Redundant command, but used to delineate juvenile OA treatment conditions\n  # in if statements below.\n  juvenile_treatment=\"${sample_type}\"\n  echo \"Juvenile treatment before eval: ${juvenile_treatment}\"\n\n  # Get sample name from the deoduck pool samples\n  gonad_pool=$(echo \"${sample_name}\" | awk 'BEGIN {OFS=\"_\"; FS=\"_\"} {print $1, $2, $3}')\n  echo \"Gonad pool before eval: ${gonad_pool}.\"\n\n\n  # Set treatment condition for each sample\n  # Primarily used for setting read group (RG) during BAM creation\n  if\n    [[ \"${sample_type}\" == \"gonad\" ]] \\\n    || [[ \"${gonad_pool}\" == \"Geo_Pool_F\" ]] \\\n    || [[ \"${gonad_pool}\" == \"Geo_Pool_M\" ]]\n  then\n    echo \"Sample type is: $sample_type\"\n    treatment=\"gonad\"\n    echo \"Treatment is: $treatment\"\n    echo \"\"\n    if\n      [[ \"${sample_type}\" == \"gonad\" ]]\n    then\n        if [[ ! -n ${samples_associative_array[${sample_type}]} ]]\n        then\n            # Append to associative array\n            samples_associative_array+=([\"${sample_type}\"]=\"${treatment}\")\n            echo \"Checking array:\"\n            echo ${samples_associative_array[@]}\n        fi\n    elif\n        [[ \"${gonad_pool}\" == \"Geo_Pool_F\" ]] \\\n        || [[ \"${gonad_pool}\" == \"Geo_Pool_M\" ]]\n    then\n        if [[ ! -n ${samples_associative_array[${gonad_pool}]} ]]\n        then\n            # Append to associative array\n            samples_associative_array+=([\"${gonad_pool}\"]=\"${treatment}\")\n            echo \"Checking array:\"\n            echo ${samples_associative_array[@]}\n        fi\n    fi\n  elif\n    [[ \"${sample_type}\" == \"juvenile_ambient\" ]] \\\n    || [[ \"${sample_type}\" == \"juvenile_OA\" ]]\n  then\n    echo \"Sample type is: $sample_type\"\n    treatment=\"juvenile\"\n    echo \"Treatment is: $treatment\"\n    echo \"\"\n        if [[ ! -n ${samples_associative_array[${sample_type}]} ]]\n        then\n            # Append to associative array\n            samples_associative_array+=([\"${sample_type}\"]=\"${treatment}\")\n            echo \"Checking array:\"\n            echo ${samples_associative_array[@]}\n        fi\n  elif\n    [[ \"${sample_type}\" == \"ctenidia\" ]] \\\n    || [[ \"${sample_type}\" == \"heart\" ]] \\\n    || [[ \"${sample_type}\" == \"larvae\" ]]\n  then\n    echo \"Sample type is: $sample_type\"\n    treatment=\"${sample_type}\"\n    echo \"Treatment is: $treatment\"\n    echo \"\"\n        if [[ ! -n ${samples_associative_array[${sample_type}]} ]]\n        then\n            # Append to associative array\n            samples_associative_array+=([\"${sample_type}\"]=\"${treatment}\")\n            echo \"Checking array:\"\n            echo ${samples_associative_array[@]}\n        fi\n  fi\ndone\n\n# Check array size to confirm it has all expected samples\n# Exit if mismatch\necho \"\"\necho \"Checking samples_associative_array to confirm expected number of samples...\"\necho \"\"\nif [[ \"${#samples_associative_array[@]}\" != \"${total_samples}\" ]]\n  then\n    echo \"samples_associative_array doesn't have all ${total_samples} samples.\"\n    echo \"Array has ${#samples_associative_array[@]} samples.\"\n    echo \"Please review array contents to begin troubleshooting.\"\n    echo \"\"\n    echo \"samples_associative_array contents:\"\n    echo \"\"\n    for item in \"${!samples_associative_array[@]}\"\n    do\n      printf \"%s\\t%s\\n\" \"${item}\" \"${samples_associative_array[${item}]}\"\n    done\n    echo \"\"\n\n    exit 1\n  else\n    echo \"\"\n    echo \"Associative array has expected number of samples: ${#samples_associative_array[@]}/${total_samples}.\"\n    echo \"\"\n\nfi\n\n\n############# BEGIN HISAT2 ALIGNMENTS ###############\n\n# Run Hisat2 on each FastQ file\necho \"\"\necho \"Beginning Hisat2 alignments...\"\necho \"\"\n\nfor sample in \"${!samples_associative_array[@]}\"\ndo\n\n  ## Inititalize arrays\n  fastq_array_R1=()\n  fastq_array_R2=()\n\n  # Create and switch to dedicated sample directory\n  echo \"Creating and moving into ${sample} directory.\"\n  mkdir \"${sample}\" && cd \"$_\"\n  echo \"\"\n\n  # Create array of fastq R1 files\n  # and generate MD5 checksums file.\n\n  # Identify corresponding FastQ file\n  # Pipe to sed replace leading \"./\" with \"../\" to manage relative FastQ path\n  fastq=$(find .. -name \"*${sample}*R1*.gz\")\n\n  fastq_array_R1+=(\"${fastq}\")\n  echo \"Generating checksum for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append input_fastqs_checksums.md5\n  echo \"Checksum for ${fastq} completed.\"\n  echo \"\"\n\n\n  # Create array of fastq R2 files\n  # and generate MD5 checksums\n\n  # Identify corresponding FastQ file\n  # Pipe to sed replace leading \"./\" with \"../\" to manage relative FastQ path\n  fastq=$(find .. -name \"*${sample}*R2*.gz\")\n\n  fastq_array_R2+=(\"${fastq}\")\n  echo \"Generating checksum for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append input_fastqs_checksums.md5\n  echo \"Checksum for ${fastq} completed.\"\n  echo \"\"\n\n\n  # Create comma-separated lists of FastQs for Hisat2\n  printf -v joined_R1 '%s,' \"${fastq_array_R1[@]}\"\n  fastq_list_R1=$(echo \"${joined_R1%,}\")\n\n  printf -v joined_R2 '%s,' \"${fastq_array_R2[@]}\"\n  fastq_list_R2=$(echo \"${joined_R2%,}\")\n\n\n  # Hisat2 alignments\n  # Sets read group info (RG) using samples array\n\n  echo \"Beginning Hisat2 alignment of ${sample}.\"\n  \"${programs_array[hisat2]}\" \\\n  -x \"${genome_index_name}\" \\\n  -1 \"${fastq_list_R1}\" \\\n  -2 \"${fastq_list_R2}\" \\\n  -S \"${sample}\".sam \\\n  --rg-id \"${sample}\" \\\n  --rg \"SM:\"\"${samples_associative_array[$sample]}\" \\\n  2> \"${sample}\"_hisat2.err\n  echo \"\"\n  echo \"Hisat2 alignment of ${sample} completed.\"\n  echo \"\"\n\n  # Sort SAM files, convert to BAM, and index\n  echo \"Sorting ${sample}.sam and converting to ${sample}.sorted.bam...\"\n  ${programs_array[samtools_view]} \\\n  -@ \"${threads}\" \\\n  -Su \"${sample}\".sam \\\n  | ${programs_array[samtools_sort]} - \\\n  -@ \"${threads}\" \\\n  -o \"${sample}\".sorted.bam\n  echo \"Sorting and conversion completed.\"\n  echo \"\"\n\n  # Index BAM\n  echo \"Creating index of ${sample}.sorted.bam...\"\n  ${programs_array[samtools_index]} \"${sample}\".sorted.bam\n  echo \"Indexing completed.\"\n  echo \"\"\n\n\n  # Run stringtie on alignments\n  # Uses \"-B\" option to output tables intended for use in Ballgown\n  # Uses \"-e\" option; recommended when using \"-B\" option.\n  # Limits analysis to only reads alignments matching reference.\n  echo \"Beginning StingTie on ${sample}.sorted.bam...\"\n  \"${programs_array[stringtie]}\" \"${sample}\".sorted.bam \\\n  -p \"${threads}\" \\\n  -o \"${sample}\".gtf \\\n  -G \"${genome_gff}\" \\\n  -C \"${sample}.cov_refs.gtf\" \\\n  -B \\\n  -e\n  echo \"StingTie completed for ${sample}.sorted.bam.\"\n  echo \"\"\n\n# Add GTFs to list file, only if non-empty\n# Identifies GTF files that only have header\n  gtf_lines=$(wc -l < \"${sample}\".gtf )\n  if [ \"${gtf_lines}\" -gt 2 ]; then\n    echo \"Adding ${sample}.gtf to ${gtf_list}.\"\n    echo \"$(pwd)/${sample}.gtf\" >> ../\"${gtf_list}\"\n    echo \"Added ${sample}.gtf to ${gtf_list}.\"\n    echo \"\"\n  fi\n\n  # Delete unneeded SAM files\n  echo \"Removing unneeded SAM files...\"\n  rm ./*.sam\n  echo \"\"\n\n  # Generate checksums\n  for file in *\n  do\n    echo \"Generating MD5 checksums...\"\n    md5sum \"${file}\" | tee --append \"${sample}\"-checksums.md5\n    echo \"\"\n  done\n  echo \"Finished generating checksums.\"\n  echo \"\"\n\n  # Move up to orig. working directory\n  echo \"Returning to previous directory...\"\n  cd ..\n  echo \"Now in $(pwd).\"\n  echo \"\"\n\ndone\n\n# Merge all BAMs to singular BAM for use in transcriptome assembly later\n## Create list of sorted BAMs for merging\necho \"Looking for sorted BAMs...\"\nfind . -name \"*sorted.bam\" > sorted_bams.list\necho \"All BAMs added to sorted_bams.list.\"\necho \"\"\n\n## Merge sorted BAMs\necho \"Merging all BAMs...\"\n${programs_array[samtools_merge]} \\\n-b sorted_bams.list \\\n${merged_bam} \\\n--threads ${threads}\necho \"Finished merging BAMs.\"\necho \"Merged into ${merged_bam}.\"\necho \"\"\n\n## Index merged BAM\necho \"Indexing ${merged_bam}...\"\n${programs_array[samtools_index]} ${merged_bam}\necho \"Indexing completed.\"\necho \"\"\n\n\n\n# Create singular transcript file, using GTF list file\necho \"Merging StringTie GTF files...\"\n\"${programs_array[stringtie]}\" --merge \\\n\"${gtf_list}\" \\\n-p \"${threads}\" \\\n-G \"${genome_gff}\" \\\n-o \"${genome_index_name}\".stringtie.gtf\necho \"Merge completed.\"\necho \"Merged into ${genome_index_name}.stringtie.gtf.\"\n\n\n# Generate checksums\necho \"Generating MD5 checksums.\"\nfind . -type f -maxdepth 1 -exec md5sum {} + >> checksums.md5\necho \"MD5 checksums completed.\"\n\n\n#######################################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\n  echo \"Finished logging programs options.\"\n  echo \"\"\nfi\n\n\n# Document programs in PATH (primarily for program version ID)\necho \"Logging system $PATH...\"\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\necho \"Finished logging system $PATH.\"\n```\n\n\n---\n\n# RESULTS\n\nRuntime was 1 day and 17.5hrs:\n\n![Screencap of Mox job runtime emails, showing successful completion after 1 day and 17.5 hrs](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms-runtime.png?raw=true)\n\nOutput folder:\n\n- [20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms/](https://gannet.fish.washington.edu/Atumefaciens/20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms/)\n\nDue to the large number of files, please just browse the directory linked above. A [directory tree](#output-directory-tree) is posted below for guidance. Sub-directories have been created, and subsequent tables, for direct import into Ballgown, if desired/needed.\n\nSee the various MD5 checksum files to see which files were utilized for each step.\n\n#### OUTPUT DIRECTORY TREE\n\n```shell\n\n├── 20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms.sh\n├── 20220914-pgen-stringtie-Panopea-generosa-v1.0-sorted_bams-merged.bam\n├── 20220914-pgen-stringtie-Panopea-generosa-v1.0-sorted_bams-merged.bam.bai\n├── checksums.md5\n├── concatenated-ctenidia-R1.fastp-trim.20220908.fq.gz\n├── concatenated-ctenidia-R2.fastp-trim.20220908.fq.gz\n├── concatenated-fastq-checksums.md5\n├── concatenated-gonad-R1.fastp-trim.20220908.fq.gz\n├── concatenated-gonad-R2.fastp-trim.20220908.fq.gz\n├── concatenated-heart-R1.fastp-trim.20220908.fq.gz\n├── concatenated-heart-R2.fastp-trim.20220908.fq.gz\n├── concatenated-juvenile_ambient-R1.fastp-trim.20220908.fq.gz\n├── concatenated-juvenile_ambient-R2.fastp-trim.20220908.fq.gz\n├── concatenated-juvenile_OA-R1.fastp-trim.20220908.fq.gz\n├── concatenated-juvenile_OA-R2.fastp-trim.20220908.fq.gz\n├── concatenated-larvae-R1.fastp-trim.20220908.fq.gz\n├── concatenated-larvae-R2.fastp-trim.20220908.fq.gz\n├── ctenidia\n│   ├── ctenidia-checksums.md5\n│   ├── ctenidia.cov_refs.gtf\n│   ├── ctenidia.gtf\n│   ├── ctenidia_hisat2.err\n│   ├── ctenidia.sorted.bam\n│   ├── ctenidia.sorted.bam.bai\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── Geo_Pool_F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── Geo_Pool_F-checksums.md5\n│   ├── Geo_Pool_F.cov_refs.gtf\n│   ├── Geo_Pool_F.gtf\n│   ├── Geo_Pool_F_hisat2.err\n│   ├── Geo_Pool_F.sorted.bam\n│   ├── Geo_Pool_F.sorted.bam.bai\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── Geo_Pool_F_GGCTAC_L006_R1_001.fastp-trim.20220908.fq.gz\n├── Geo_Pool_F_GGCTAC_L006_R2_001.fastp-trim.20220908.fq.gz\n├── Geo_Pool_M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── Geo_Pool_M-checksums.md5\n│   ├── Geo_Pool_M.cov_refs.gtf\n│   ├── Geo_Pool_M.gtf\n│   ├── Geo_Pool_M_hisat2.err\n│   ├── Geo_Pool_M.sorted.bam\n│   ├── Geo_Pool_M.sorted.bam.bai\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── Geo_Pool_M_CTTGTA_L006_R1_001.fastp-trim.20220908.fq.gz\n├── Geo_Pool_M_CTTGTA_L006_R2_001.fastp-trim.20220908.fq.gz\n├── gonad\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── gonad-checksums.md5\n│   ├── gonad.cov_refs.gtf\n│   ├── gonad.gtf\n│   ├── gonad_hisat2.err\n│   ├── gonad.sorted.bam\n│   ├── gonad.sorted.bam.bai\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── gtf_list.txt\n├── heart\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── heart-checksums.md5\n│   ├── heart.cov_refs.gtf\n│   ├── heart.gtf\n│   ├── heart_hisat2.err\n│   ├── heart.sorted.bam\n│   ├── heart.sorted.bam.bai\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── hisat2_build.err\n├── juvenile_ambient\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   ├── juvenile_ambient-checksums.md5\n│   ├── juvenile_ambient.cov_refs.gtf\n│   ├── juvenile_ambient.gtf\n│   ├── juvenile_ambient_hisat2.err\n│   ├── juvenile_ambient.sorted.bam\n│   ├── juvenile_ambient.sorted.bam.bai\n│   └── t_data.ctab\n├── juvenile_OA\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   ├── juvenile_OA-checksums.md5\n│   ├── juvenile_OA.cov_refs.gtf\n│   ├── juvenile_OA.gtf\n│   ├── juvenile_OA_hisat2.err\n│   ├── juvenile_OA.sorted.bam\n│   ├── juvenile_OA.sorted.bam.bai\n│   └── t_data.ctab\n├── larvae\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   ├── larvae-checksums.md5\n│   ├── larvae.cov_refs.gtf\n│   ├── larvae.gtf\n│   ├── larvae_hisat2.err\n│   ├── larvae.sorted.bam\n│   ├── larvae.sorted.bam.bai\n│   └── t_data.ctab\n├── original-fastq-checksums.md5\n├── Panopea-generosa-v1.0.1.ht2\n├── Panopea-generosa-v1.0.2.ht2\n├── Panopea-generosa-v1.0.3.ht2\n├── Panopea-generosa-v1.0.4.ht2\n├── Panopea-generosa-v1.0.5.ht2\n├── Panopea-generosa-v1.0.6.ht2\n├── Panopea-generosa-v1.0.7.ht2\n├── Panopea-generosa-v1.0.8.ht2\n├── Panopea-generosa-v1.0_hisat2_exons.tab\n├── Panopea-generosa-v1.0_hisat2_splice_sites.tab\n├── Panopea-generosa-v1.0.stringtie.gtf\n├── program_options.log\n├── slurm-3898886.out\n├── sorted_bams.list\n└── system_path.log\n```\n","srcMarkdownNoYaml":"\nAs part of [identifying long non-coding RNA (lncRNA) in Pacific geoduck](https://github.com/RobertsLab/resources/issues/1434)(GitHub Issue), one of the first things that I wanted to do was to gather all of our geoduck RNAseq data and align it to our geoduck genome. In addition to the alignments, some of the examples I've been following have also utilized expression levels as one aspect of the lncRNA selection criteria, so I figured I'd get this info as well.\n\n[Trimmed RNAseq data from 20220908](https://robertslab.github.io/sams-notebook/posts/2022/2022-09-08-FastQ-Trimming---Geoduck-RNAseq-Data-Using-fastp-on-Mox/) was aligned to our [_Panopea generosa_ (Pacific geoduck)](http://en.wikipedia.org/wiki/Geoduck) genome assembly, [Panopea-generosa-v1.0.fa](https://gannet.fish.washington.edu/Atumefaciens/20191105_swoose_pgen_v074_renaming/Panopea-generosa-v1.0.fa) (FastA; 914MB), using [`HISAT2`](https://daehwankimlab.github.io/hisat2/). Alternative transcripts and expression values were determined using [`StringTie`](https://ccb.jhu.edu/software/stringtie/). These were run on Mox.\n\nHere's a summary of the process:\n\n1. Generate necessary [`HISAT2`](https://daehwankimlab.github.io/hisat2/) reference files (e.g. splic sites, exons, genome indexes).\n\n2. Concatenate FastQ files based on tissue/age and/or OA treatment.\n\n3. Run [`HISAT2`](https://daehwankimlab.github.io/hisat2/) on concatenated FastQs.\n\n4. Run [`StringTie`](https://ccb.jhu.edu/software/stringtie/) on grouped samples, with output formatted for import into Ballgown.\n\nThe SBATCH script below is very long. Skip to [RESULTS section](#results) if you want.\n\n\nSBATCH script (GitHub):\n\n- [20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=21-00:00:00\n## Memory per node\n#SBATCH --mem=200G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms\n\n## Script for HiSat2 indexing of P.generosa genome assembly Panopea-generosa-v1.0,\n## HiSat2 alignments, running Stringtie to identify splice sites and calculate gene/transcript expression values (FPKM),\n## formatted for import into Ballgown (R/Bioconductor).\n\n## Process part of identification of long non-coding RNAs (lnRNA) in geoduck.\n\n###################################################################################\n# These variables need to be set by user\n\n## Assign Variables\n\n# Set number of CPUs to use\nthreads=40\n\n# Index name for Hisat2 use\n# Needs to match index naem used in previous Hisat2 indexing step\ngenome_index_name=\"Panopea-generosa-v1.0\"\n\n# Location of Hisat2 index files\n# Must keep variable name formatting, as it's used by HiSat2\nHISAT2_INDEXES=$(pwd)\nexport HISAT2_INDEXES\n\n# Paths to programs\nhisat2_dir=\"/gscratch/srlab/programs/hisat2-2.1.0\"\nhisat2=\"${hisat2_dir}/hisat2\"\nhisat2_build=\"${hisat2_dir}/hisat2-build\"\nhisat2_exons=\"${hisat2_dir}/hisat2_extract_exons.py\"\nhisat2_splice_sites=\"${hisat2_dir}/hisat2_extract_splice_sites.py\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\nstringtie=\"/gscratch/srlab/programs/stringtie-1.3.6.Linux_x86_64/stringtie\"\n\n# Input/output files\nexons=\"Panopea-generosa-v1.0_hisat2_exons.tab\"\nfastq_dir=\"/gscratch/scrubbed/samwhite/outputs/20220909-pgen-fastqc-fastp-mutliqc-rnaseq/\"\ngenome_dir=\"/gscratch/srlab/sam/data/P_generosa/genomes\"\ngenome_index_dir=\"/gscratch/srlab/sam/data/P_generosa/genomes\"\ngenome_fasta=\"${genome_dir}/Panopea-generosa-v1.0.fasta\"\ngenome_gff=\"${genome_index_dir}/Panopea-generosa-v1.0.a4_biotype-trna_strand_converted-no_RNAmmer.gff\"\ngtf_list=\"gtf_list.txt\"\nmerged_bam=\"20220914-pgen-stringtie-Panopea-generosa-v1.0-sorted_bams-merged.bam\"\nsplice_sites=\"Panopea-generosa-v1.0_hisat2_splice_sites.tab\"\ntranscripts_gtf=\"${genome_dir}/Panopea-generosa-v1.0.a4_biotype-trna_strand_converted-no_RNAmmer.gtf\"\n\n\n# Set FastQ filename patterns\nfastq_pattern=\"fastp-trim.20220908.fq.gz\"\nR1_fastq_pattern='*R1*.fastp-trim.20220908.fq.gz'\nR2_fastq_pattern='*R2*.fastp-trim.20220908.fq.gz'\nR1_fastq_naming_pattern=\"R1.${fastq_pattern}\"\nR2_fastq_naming_pattern=\"R2.${fastq_pattern}\"\n\n# Declare associative array of sample names and metadata\ndeclare -A samples_associative_array=()\n\n# Set total number of samples/treatments (NOT number of FastQ files)\n# Used for confirming proper array population of samples_associative_array\ntotal_samples=8\n\n# Set total of original FastQ files\n# Used for confirming all FastQs are processed.\ntotal_fastqs=150\n\n# Inititalize arrays\nfastq_array_R1=()\nfastq_array_R2=()\n\n# Programs associative array\ndeclare -A programs_array\n\nprograms_array=(\n[hisat2]=\"${hisat2}\" \\\n[hisat2_build]=\"${hisat2_build}\" \\\n[hisat2_exons]=\"${hisat2_exons}\" \\\n[hisat2_splice_sites]=\"${hisat2_splice_sites}\"\n[samtools_index]=\"${samtools} index\" \\\n[samtools_merge]=\"${samtools} merge\" \\\n[samtools_sort]=\"${samtools} sort\" \\\n[samtools_view]=\"${samtools} view\" \\\n[stringtie]=\"${stringtie}\"\n)\n\n\n###################################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n\n\n# Create Hisat2 exons tab file\necho \"Generating Hisat2 exons file...\"\n\"${programs_array[hisat2_exons]}\" \\\n\"${transcripts_gtf}\" \\\n> \"${exons}\"\necho \"Exons file created: ${exons}.\"\necho \"\"\n\n# Create Hisat2 splice sites tab file\necho \"Generating Hisat2 splice sites file...\"\n\"${programs_array[hisat2_splice_sites]}\" \\\n\"${transcripts_gtf}\" \\\n> \"${splice_sites}\"\necho \"Splice sites file created: ${splice_sites}.\"\necho \"\"\n\n# Build Hisat2 reference index using splice sites and exons\necho \"Beginning HiSat2 genome indexing...\"\n\"${programs_array[hisat2_build]}\" \\\n\"${genome_fasta}\" \\\n\"${genome_index_name}\" \\\n--exon \"${exons}\" \\\n--ss \"${splice_sites}\" \\\n-p \"${threads}\" \\\n2> hisat2_build.err\necho \"HiSat2 genome index files completed.\"\necho \"\"\n\n# Generate checksums for all files\necho \"Generating checksums...\"\nmd5sum ./* | tee --append checksums.md5\necho \"\"\necho \"Finished generating checksums. See file: checksums.md5\"\necho \"\"\n\n# Copy Hisat2 index files to my data directory for later use with StringTie\necho \"Rsyncing HiSat2 genome index files to ${genome_dir}.\"\nrsync -av \"${genome_index_name}\"*.ht2 \"${genome_dir}\"\necho \"Rsync completed.\"\necho \"\"\n\n# Create arrays of fastq R1 files and sample names\n# Do NOT quote R1_fastq_pattern variable\necho \"Creating array of R1 FastQ files...\"\n\nfor fastq in \"${fastq_dir}\"${R1_fastq_pattern}\ndo\n  fastq_array_R1+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R1_names_array+=(\"${fastq%%.*}\")\ndone\n\necho \"\"\n\n# Create array of fastq R2 files\n# Do NOT quote R2_fastq_pattern variable\necho \"Creating array of R2 FastQ files...\"\n\nfor fastq in \"${fastq_dir}\"${R2_fastq_pattern}\ndo\n  fastq_array_R2+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R2_names_array+=(\"${fastq%%.*}\")\ndone\necho \"\"\n\n# Set sample counters for array verification\nR1_fastq_counter=0\nR2_fastq_counter=0\n\n# Concatenate R1 FastQ files\necho \"Beginning concatenation of R1 FastQ files...\"\necho \"\"\nfor fastq in \"${fastq_array_R1[@]}\"\ndo\n\n  # Generate MD5 checksums for original set of FastQs\n  echo \"Generating MD5 checksum for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append original-fastq-checksums.md5\n  echo \"\"\n\n  # Increment counter\n  ((R1_fastq_counter+=1))\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from first \".\"-delimited field\n  sample_type=$(echo \"${sample_name}\" | awk -F \".\" '{print $1}')\n\n  # Parse out tissue/sample types\n  juvenile_treatment=$(echo \"${sample_type}\" | awk -F [-_] '{print $3}')\n  tissue=$(echo \"${sample_type}\" | awk -F \"-\" '{print $2}')\n  trueseq_tissue=$(echo \"${sample_type}\" | awk -F [-_] '{print $7}')\n\n\n  # Concatenate reads from multiple runs\n  if\n    [[ \"${tissue}\" == \"ctenidia\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR012\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-ctenidia-\"${R1_fastq_naming_pattern}\"\n\n    echo \"Concatenated ${fastq} to concatenated-ctenidia-${R1_fastq_naming_pattern}\"\n    echo \"\"\n\n  elif\n    [[ \"${tissue}\" == \"gonad\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR006\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-gonad-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-gonad-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"heart\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-heart-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-heart-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"juvenile\" ]] \\\n    && [[ \"${juvenile_treatment}\" == \"ambient\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_ambient-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_ambient-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${trueseq_tissue}\" == \"NR019\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_ambient-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_ambient-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"juvenile\" ]] \\\n    && [[ \"${juvenile_treatment}\" == \"OA\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_OA-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_OA-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${trueseq_tissue}\" == \"NR005\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_OA-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_OA-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"larvae\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR021\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-larvae-\"${R1_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-larvae-${R1_fastq_naming_pattern}\"\n    echo \"\"\n  # Handles Geo_Pool samples\n  else\n    echo \"Rsyincing ${fastq} to current directory\"\n    echo \"because it does not need concatenation.\"\n    echo \"\"\n    rsync -av \"${fastq}\" .\n    echo \"\"\n  fi\n\ndone\n\necho \"Finshed R1 FastQ concatenation.\"\necho \"\"\necho \"\"\necho \"\"\n\n# Concatenate R2 FastQ files\necho \"Beginning concatenation of R2 FastQ files...\"\necho \"\"\n\nfor fastq in \"${fastq_array_R2[@]}\"\ndo\n\n  # Generate MD5 checksums for original set of FastQs\n  echo \"Generating MD5 checksum for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append original-fastq-checksums.md5\n  echo \"\"\n\n  # Increment counter\n  ((R2_fastq_counter+=1))\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from first \".\"-delimited field\n  sample_type=$(echo \"${sample_name}\" | awk -F \".\" '{print $1}')\n\n  # Parse out tissue/sample types\n  juvenile_treatment=$(echo \"${sample_type}\" | awk -F [-_] '{print $3}')\n  tissue=$(echo \"${sample_type}\" | awk -F \"-\" '{print $2}')\n  trueseq_tissue=$(echo \"${sample_type}\" | awk -F [-_] '{print $7}')\n\n\n  # Concatenate reads from multiple runs\n  if\n    [[ \"${tissue}\" == \"ctenidia\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR012\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-ctenidia-\"${R2_fastq_naming_pattern}\"\n\n    echo \"Concatenated ${fastq} to concatenated-ctenidia-${R2_fastq_naming_pattern}\"\n    echo \"\"\n\n  elif\n    [[ \"${tissue}\" == \"gonad\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR006\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-gonad-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-gonad-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"heart\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-heart-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-heart-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"juvenile\" ]] \\\n    && [[ \"${juvenile_treatment}\" == \"ambient\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_ambient-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_ambient-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${trueseq_tissue}\" == \"NR019\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_ambient-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_ambient-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"juvenile\" ]] \\\n    && [[ \"${juvenile_treatment}\" == \"OA\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_OA-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_OA-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${trueseq_tissue}\" == \"NR005\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-juvenile_OA-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-juvenile_OA-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  elif\n    [[ \"${tissue}\" == \"larvae\" ]] \\\n    || [[ \"${trueseq_tissue}\" == \"NR021\" ]]\n  then\n    cat \"${fastq}\" >> concatenated-larvae-\"${R2_fastq_naming_pattern}\"\n    echo \"Concatenated ${fastq} to concatenated-larvae-${R2_fastq_naming_pattern}\"\n    echo \"\"\n  # Handles Geo_Pool samples\n  else\n    rsync -av \"${fastq}\" .\n  fi\n\ndone\n\n# Check FastQ array sizes to confirm they have all expected samples\n# Exit if mismatch\n\necho \"Confirming expected number of FastQs processed...\"\nsum_fastqs=$((${R1_fastq_counter} + ${R2_fastq_counter}))\nif [[ \"${sum_fastqs}\" != \"${total_fastqs}\" ]]\nthen\n  echo \"Expected ${total_fastqs} FastQs, but only found ${sum_fastqs}!\"\n  echo \"\"\n  echo \"Check original-fastq-checksums.md5 file for list of FastQs processed.\"\n  echo \"\"\n  exit 1\nelse\n  echo \"Great!\"\n  printf \"%-20s %s\\n\" \"Expected:\" \"${total_fastqs}\"\n  printf \"%-20s %s\\n\" \"Processed:\" \"${sum_fastqs}\"\n  echo \"\"\nfi\n\n\n\n###### Load associative array ######\n\nfor fastq in *\"${fastq_pattern}\"\ndo\n  # Generate MD5 checksums for original set of FastQs\n  echo \"Generating MD5 checksums for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append concatenated-fastq-checksums.md5\n  echo \"\"\n\n  echo \"\"\n  echo \"Processing $fastq for associative array...\"\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from second \"-\"-delimited field\n  sample_type=$(echo \"${sample_name}\" | awk -F \"-\" '{print $2}')\n  echo \"Sample type before eval: ${sample_type}\"\n\n  # Get sample name from second \"-\"-delimited field\n  # Redundant command, but used to delineate juvenile OA treatment conditions\n  # in if statements below.\n  juvenile_treatment=\"${sample_type}\"\n  echo \"Juvenile treatment before eval: ${juvenile_treatment}\"\n\n  # Get sample name from the deoduck pool samples\n  gonad_pool=$(echo \"${sample_name}\" | awk 'BEGIN {OFS=\"_\"; FS=\"_\"} {print $1, $2, $3}')\n  echo \"Gonad pool before eval: ${gonad_pool}.\"\n\n\n  # Set treatment condition for each sample\n  # Primarily used for setting read group (RG) during BAM creation\n  if\n    [[ \"${sample_type}\" == \"gonad\" ]] \\\n    || [[ \"${gonad_pool}\" == \"Geo_Pool_F\" ]] \\\n    || [[ \"${gonad_pool}\" == \"Geo_Pool_M\" ]]\n  then\n    echo \"Sample type is: $sample_type\"\n    treatment=\"gonad\"\n    echo \"Treatment is: $treatment\"\n    echo \"\"\n    if\n      [[ \"${sample_type}\" == \"gonad\" ]]\n    then\n        if [[ ! -n ${samples_associative_array[${sample_type}]} ]]\n        then\n            # Append to associative array\n            samples_associative_array+=([\"${sample_type}\"]=\"${treatment}\")\n            echo \"Checking array:\"\n            echo ${samples_associative_array[@]}\n        fi\n    elif\n        [[ \"${gonad_pool}\" == \"Geo_Pool_F\" ]] \\\n        || [[ \"${gonad_pool}\" == \"Geo_Pool_M\" ]]\n    then\n        if [[ ! -n ${samples_associative_array[${gonad_pool}]} ]]\n        then\n            # Append to associative array\n            samples_associative_array+=([\"${gonad_pool}\"]=\"${treatment}\")\n            echo \"Checking array:\"\n            echo ${samples_associative_array[@]}\n        fi\n    fi\n  elif\n    [[ \"${sample_type}\" == \"juvenile_ambient\" ]] \\\n    || [[ \"${sample_type}\" == \"juvenile_OA\" ]]\n  then\n    echo \"Sample type is: $sample_type\"\n    treatment=\"juvenile\"\n    echo \"Treatment is: $treatment\"\n    echo \"\"\n        if [[ ! -n ${samples_associative_array[${sample_type}]} ]]\n        then\n            # Append to associative array\n            samples_associative_array+=([\"${sample_type}\"]=\"${treatment}\")\n            echo \"Checking array:\"\n            echo ${samples_associative_array[@]}\n        fi\n  elif\n    [[ \"${sample_type}\" == \"ctenidia\" ]] \\\n    || [[ \"${sample_type}\" == \"heart\" ]] \\\n    || [[ \"${sample_type}\" == \"larvae\" ]]\n  then\n    echo \"Sample type is: $sample_type\"\n    treatment=\"${sample_type}\"\n    echo \"Treatment is: $treatment\"\n    echo \"\"\n        if [[ ! -n ${samples_associative_array[${sample_type}]} ]]\n        then\n            # Append to associative array\n            samples_associative_array+=([\"${sample_type}\"]=\"${treatment}\")\n            echo \"Checking array:\"\n            echo ${samples_associative_array[@]}\n        fi\n  fi\ndone\n\n# Check array size to confirm it has all expected samples\n# Exit if mismatch\necho \"\"\necho \"Checking samples_associative_array to confirm expected number of samples...\"\necho \"\"\nif [[ \"${#samples_associative_array[@]}\" != \"${total_samples}\" ]]\n  then\n    echo \"samples_associative_array doesn't have all ${total_samples} samples.\"\n    echo \"Array has ${#samples_associative_array[@]} samples.\"\n    echo \"Please review array contents to begin troubleshooting.\"\n    echo \"\"\n    echo \"samples_associative_array contents:\"\n    echo \"\"\n    for item in \"${!samples_associative_array[@]}\"\n    do\n      printf \"%s\\t%s\\n\" \"${item}\" \"${samples_associative_array[${item}]}\"\n    done\n    echo \"\"\n\n    exit 1\n  else\n    echo \"\"\n    echo \"Associative array has expected number of samples: ${#samples_associative_array[@]}/${total_samples}.\"\n    echo \"\"\n\nfi\n\n\n############# BEGIN HISAT2 ALIGNMENTS ###############\n\n# Run Hisat2 on each FastQ file\necho \"\"\necho \"Beginning Hisat2 alignments...\"\necho \"\"\n\nfor sample in \"${!samples_associative_array[@]}\"\ndo\n\n  ## Inititalize arrays\n  fastq_array_R1=()\n  fastq_array_R2=()\n\n  # Create and switch to dedicated sample directory\n  echo \"Creating and moving into ${sample} directory.\"\n  mkdir \"${sample}\" && cd \"$_\"\n  echo \"\"\n\n  # Create array of fastq R1 files\n  # and generate MD5 checksums file.\n\n  # Identify corresponding FastQ file\n  # Pipe to sed replace leading \"./\" with \"../\" to manage relative FastQ path\n  fastq=$(find .. -name \"*${sample}*R1*.gz\")\n\n  fastq_array_R1+=(\"${fastq}\")\n  echo \"Generating checksum for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append input_fastqs_checksums.md5\n  echo \"Checksum for ${fastq} completed.\"\n  echo \"\"\n\n\n  # Create array of fastq R2 files\n  # and generate MD5 checksums\n\n  # Identify corresponding FastQ file\n  # Pipe to sed replace leading \"./\" with \"../\" to manage relative FastQ path\n  fastq=$(find .. -name \"*${sample}*R2*.gz\")\n\n  fastq_array_R2+=(\"${fastq}\")\n  echo \"Generating checksum for ${fastq}...\"\n  md5sum \"${fastq}\" | tee --append input_fastqs_checksums.md5\n  echo \"Checksum for ${fastq} completed.\"\n  echo \"\"\n\n\n  # Create comma-separated lists of FastQs for Hisat2\n  printf -v joined_R1 '%s,' \"${fastq_array_R1[@]}\"\n  fastq_list_R1=$(echo \"${joined_R1%,}\")\n\n  printf -v joined_R2 '%s,' \"${fastq_array_R2[@]}\"\n  fastq_list_R2=$(echo \"${joined_R2%,}\")\n\n\n  # Hisat2 alignments\n  # Sets read group info (RG) using samples array\n\n  echo \"Beginning Hisat2 alignment of ${sample}.\"\n  \"${programs_array[hisat2]}\" \\\n  -x \"${genome_index_name}\" \\\n  -1 \"${fastq_list_R1}\" \\\n  -2 \"${fastq_list_R2}\" \\\n  -S \"${sample}\".sam \\\n  --rg-id \"${sample}\" \\\n  --rg \"SM:\"\"${samples_associative_array[$sample]}\" \\\n  2> \"${sample}\"_hisat2.err\n  echo \"\"\n  echo \"Hisat2 alignment of ${sample} completed.\"\n  echo \"\"\n\n  # Sort SAM files, convert to BAM, and index\n  echo \"Sorting ${sample}.sam and converting to ${sample}.sorted.bam...\"\n  ${programs_array[samtools_view]} \\\n  -@ \"${threads}\" \\\n  -Su \"${sample}\".sam \\\n  | ${programs_array[samtools_sort]} - \\\n  -@ \"${threads}\" \\\n  -o \"${sample}\".sorted.bam\n  echo \"Sorting and conversion completed.\"\n  echo \"\"\n\n  # Index BAM\n  echo \"Creating index of ${sample}.sorted.bam...\"\n  ${programs_array[samtools_index]} \"${sample}\".sorted.bam\n  echo \"Indexing completed.\"\n  echo \"\"\n\n\n  # Run stringtie on alignments\n  # Uses \"-B\" option to output tables intended for use in Ballgown\n  # Uses \"-e\" option; recommended when using \"-B\" option.\n  # Limits analysis to only reads alignments matching reference.\n  echo \"Beginning StingTie on ${sample}.sorted.bam...\"\n  \"${programs_array[stringtie]}\" \"${sample}\".sorted.bam \\\n  -p \"${threads}\" \\\n  -o \"${sample}\".gtf \\\n  -G \"${genome_gff}\" \\\n  -C \"${sample}.cov_refs.gtf\" \\\n  -B \\\n  -e\n  echo \"StingTie completed for ${sample}.sorted.bam.\"\n  echo \"\"\n\n# Add GTFs to list file, only if non-empty\n# Identifies GTF files that only have header\n  gtf_lines=$(wc -l < \"${sample}\".gtf )\n  if [ \"${gtf_lines}\" -gt 2 ]; then\n    echo \"Adding ${sample}.gtf to ${gtf_list}.\"\n    echo \"$(pwd)/${sample}.gtf\" >> ../\"${gtf_list}\"\n    echo \"Added ${sample}.gtf to ${gtf_list}.\"\n    echo \"\"\n  fi\n\n  # Delete unneeded SAM files\n  echo \"Removing unneeded SAM files...\"\n  rm ./*.sam\n  echo \"\"\n\n  # Generate checksums\n  for file in *\n  do\n    echo \"Generating MD5 checksums...\"\n    md5sum \"${file}\" | tee --append \"${sample}\"-checksums.md5\n    echo \"\"\n  done\n  echo \"Finished generating checksums.\"\n  echo \"\"\n\n  # Move up to orig. working directory\n  echo \"Returning to previous directory...\"\n  cd ..\n  echo \"Now in $(pwd).\"\n  echo \"\"\n\ndone\n\n# Merge all BAMs to singular BAM for use in transcriptome assembly later\n## Create list of sorted BAMs for merging\necho \"Looking for sorted BAMs...\"\nfind . -name \"*sorted.bam\" > sorted_bams.list\necho \"All BAMs added to sorted_bams.list.\"\necho \"\"\n\n## Merge sorted BAMs\necho \"Merging all BAMs...\"\n${programs_array[samtools_merge]} \\\n-b sorted_bams.list \\\n${merged_bam} \\\n--threads ${threads}\necho \"Finished merging BAMs.\"\necho \"Merged into ${merged_bam}.\"\necho \"\"\n\n## Index merged BAM\necho \"Indexing ${merged_bam}...\"\n${programs_array[samtools_index]} ${merged_bam}\necho \"Indexing completed.\"\necho \"\"\n\n\n\n# Create singular transcript file, using GTF list file\necho \"Merging StringTie GTF files...\"\n\"${programs_array[stringtie]}\" --merge \\\n\"${gtf_list}\" \\\n-p \"${threads}\" \\\n-G \"${genome_gff}\" \\\n-o \"${genome_index_name}\".stringtie.gtf\necho \"Merge completed.\"\necho \"Merged into ${genome_index_name}.stringtie.gtf.\"\n\n\n# Generate checksums\necho \"Generating MD5 checksums.\"\nfind . -type f -maxdepth 1 -exec md5sum {} + >> checksums.md5\necho \"MD5 checksums completed.\"\n\n\n#######################################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\n  echo \"Finished logging programs options.\"\n  echo \"\"\nfi\n\n\n# Document programs in PATH (primarily for program version ID)\necho \"Logging system $PATH...\"\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\necho \"Finished logging system $PATH.\"\n```\n\n\n---\n\n# RESULTS\n\nRuntime was 1 day and 17.5hrs:\n\n![Screencap of Mox job runtime emails, showing successful completion after 1 day and 17.5 hrs](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms-runtime.png?raw=true)\n\nOutput folder:\n\n- [20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms/](https://gannet.fish.washington.edu/Atumefaciens/20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms/)\n\nDue to the large number of files, please just browse the directory linked above. A [directory tree](#output-directory-tree) is posted below for guidance. Sub-directories have been created, and subsequent tables, for direct import into Ballgown, if desired/needed.\n\nSee the various MD5 checksum files to see which files were utilized for each step.\n\n#### OUTPUT DIRECTORY TREE\n\n```shell\n\n├── 20220914-pgen-hisat2-Panopea-generosa-v1.0-index-align-stringtie_isoforms.sh\n├── 20220914-pgen-stringtie-Panopea-generosa-v1.0-sorted_bams-merged.bam\n├── 20220914-pgen-stringtie-Panopea-generosa-v1.0-sorted_bams-merged.bam.bai\n├── checksums.md5\n├── concatenated-ctenidia-R1.fastp-trim.20220908.fq.gz\n├── concatenated-ctenidia-R2.fastp-trim.20220908.fq.gz\n├── concatenated-fastq-checksums.md5\n├── concatenated-gonad-R1.fastp-trim.20220908.fq.gz\n├── concatenated-gonad-R2.fastp-trim.20220908.fq.gz\n├── concatenated-heart-R1.fastp-trim.20220908.fq.gz\n├── concatenated-heart-R2.fastp-trim.20220908.fq.gz\n├── concatenated-juvenile_ambient-R1.fastp-trim.20220908.fq.gz\n├── concatenated-juvenile_ambient-R2.fastp-trim.20220908.fq.gz\n├── concatenated-juvenile_OA-R1.fastp-trim.20220908.fq.gz\n├── concatenated-juvenile_OA-R2.fastp-trim.20220908.fq.gz\n├── concatenated-larvae-R1.fastp-trim.20220908.fq.gz\n├── concatenated-larvae-R2.fastp-trim.20220908.fq.gz\n├── ctenidia\n│   ├── ctenidia-checksums.md5\n│   ├── ctenidia.cov_refs.gtf\n│   ├── ctenidia.gtf\n│   ├── ctenidia_hisat2.err\n│   ├── ctenidia.sorted.bam\n│   ├── ctenidia.sorted.bam.bai\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── Geo_Pool_F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── Geo_Pool_F-checksums.md5\n│   ├── Geo_Pool_F.cov_refs.gtf\n│   ├── Geo_Pool_F.gtf\n│   ├── Geo_Pool_F_hisat2.err\n│   ├── Geo_Pool_F.sorted.bam\n│   ├── Geo_Pool_F.sorted.bam.bai\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── Geo_Pool_F_GGCTAC_L006_R1_001.fastp-trim.20220908.fq.gz\n├── Geo_Pool_F_GGCTAC_L006_R2_001.fastp-trim.20220908.fq.gz\n├── Geo_Pool_M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── Geo_Pool_M-checksums.md5\n│   ├── Geo_Pool_M.cov_refs.gtf\n│   ├── Geo_Pool_M.gtf\n│   ├── Geo_Pool_M_hisat2.err\n│   ├── Geo_Pool_M.sorted.bam\n│   ├── Geo_Pool_M.sorted.bam.bai\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── Geo_Pool_M_CTTGTA_L006_R1_001.fastp-trim.20220908.fq.gz\n├── Geo_Pool_M_CTTGTA_L006_R2_001.fastp-trim.20220908.fq.gz\n├── gonad\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── gonad-checksums.md5\n│   ├── gonad.cov_refs.gtf\n│   ├── gonad.gtf\n│   ├── gonad_hisat2.err\n│   ├── gonad.sorted.bam\n│   ├── gonad.sorted.bam.bai\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── gtf_list.txt\n├── heart\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── heart-checksums.md5\n│   ├── heart.cov_refs.gtf\n│   ├── heart.gtf\n│   ├── heart_hisat2.err\n│   ├── heart.sorted.bam\n│   ├── heart.sorted.bam.bai\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   └── t_data.ctab\n├── hisat2_build.err\n├── juvenile_ambient\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   ├── juvenile_ambient-checksums.md5\n│   ├── juvenile_ambient.cov_refs.gtf\n│   ├── juvenile_ambient.gtf\n│   ├── juvenile_ambient_hisat2.err\n│   ├── juvenile_ambient.sorted.bam\n│   ├── juvenile_ambient.sorted.bam.bai\n│   └── t_data.ctab\n├── juvenile_OA\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   ├── juvenile_OA-checksums.md5\n│   ├── juvenile_OA.cov_refs.gtf\n│   ├── juvenile_OA.gtf\n│   ├── juvenile_OA_hisat2.err\n│   ├── juvenile_OA.sorted.bam\n│   ├── juvenile_OA.sorted.bam.bai\n│   └── t_data.ctab\n├── larvae\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── input_fastqs_checksums.md5\n│   ├── larvae-checksums.md5\n│   ├── larvae.cov_refs.gtf\n│   ├── larvae.gtf\n│   ├── larvae_hisat2.err\n│   ├── larvae.sorted.bam\n│   ├── larvae.sorted.bam.bai\n│   └── t_data.ctab\n├── original-fastq-checksums.md5\n├── Panopea-generosa-v1.0.1.ht2\n├── Panopea-generosa-v1.0.2.ht2\n├── Panopea-generosa-v1.0.3.ht2\n├── Panopea-generosa-v1.0.4.ht2\n├── Panopea-generosa-v1.0.5.ht2\n├── Panopea-generosa-v1.0.6.ht2\n├── Panopea-generosa-v1.0.7.ht2\n├── Panopea-generosa-v1.0.8.ht2\n├── Panopea-generosa-v1.0_hisat2_exons.tab\n├── Panopea-generosa-v1.0_hisat2_splice_sites.tab\n├── Panopea-generosa-v1.0.stringtie.gtf\n├── program_options.log\n├── slurm-3898886.out\n├── sorted_bams.list\n└── system_path.log\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"RNAseq Alignments - P.generosa Alignments and Alternative Transcript Identification Using Hisat2 and StringTie on Mox","date":"2022-09-14 07:14","tags":["Panopea generosa","geoduck","mox","hisat2","StringTie","alignment","RNAseq"],"categories":["2022","Miscellaneous"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}