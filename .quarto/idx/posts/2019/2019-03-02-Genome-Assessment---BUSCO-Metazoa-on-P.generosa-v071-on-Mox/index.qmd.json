{"title":"Genome Assessment - BUSCO Metazoa on P.generosa v071 on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Genome Assessment - BUSCO Metazoa on P.generosa v071 on Mox","date":"2019-03-02 07:46","tags":["busco","metzoa","Panopea generosa","geoduck","mox","augustus"],"categories":["2019","Miscellaneous"]},"headingText":"Script to extract FastA sequences from GFF3 (specifically, those produced by MAKER)","containsRefs":false,"markdown":"\nRan [BUSCO](https://busco.ezlab.org/) on our completed annotation of the [P.generosa v071 genome (GFF)](https://gannet.fish.washington.edu/Atumefaciens/20190213_geoduck_maker_genome_annotation/Pgenerosa_v071_genome_snap02.all.renamed.putative_function.domain_added.gff) (subset of sequences >10kbp). See this [notebook entry for genome annotation info](https://robertslab.github.io/sams-notebook/posts/2019/2019-02-13-Genome-Annotation---Pgenerosa_v71-with-MAKER-on-Mox/). This provides a nice metric on how \"complete\" a genome assembly (or transcriptome) is. Additionally, BUSCO is tied in with [Augustus](http://augustus.gobics.de/) for gene prediction and generates _ab initio_ gene models. With that said, since I just want to evaluate the completeness of this particular genome assembly, I'll be using the annotated genome generated through two rounds of [SNAP](https://github.com/KorfLab/SNAP) gene prediction. Otherwise, I'd use the initial MAKER annotations to generate an Augustus gene model that could be used in conjuction with the SNAP models (I'll likely do this at a later date).\n\nFirstly, I needed a FastA as input for BUSCO, so I extracted the FastA from the GFF with the following script:\n\n<pre><code>\n#!/bin/env bash\n\n\n# User needs to set GFF path and desired output file name\n#-----------------------------------\n# Set path to GFF\ngff=/gscratch/scrubbed/samwhite/outputs/20190213_geoduck_maker_genome_annotation/Pgenerosa_v071_genome_snap02.all.renamed.putative_function.domain_added.gff\n\n# Set path to desired FastA file output\nfasta_out=/gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\n\n#-----------------------------------\n\n# Determine total number of lines (records) in GFF\ntotal_records=$(wc -l < ${gff})\n\n# Determine line number of FastA demarcation\nfasta_id_line=$(grep -n \"##FASTA\" ${gff} cut -d\":\" -f1)\n\n# Add \"1\" to the fasta_id_line to establish starting line of first FastA record\nbegin_fastas_line=$(( ${fasta_id_line + 1 }))\n\n# Print all lines from beginning of FastA records to the end of the file\nawk 'BEGIN{min=${begin_fastas_line};max=total_records} \\\n{if (NR>=min) {if (NR<=max) print}}' ${gff} \\\n> ${fasta_out}\n\n</code></pre>\n\nThen, I ran BUSCO using two different species with the same BUSCO database (```metazoa_odb9```):\n\n- Human\n- fly (BUSCO default)\n\nI simply did this to get an idea of what impact species selection might have on BUSCO analysis.\n\nHere are the two SBATCH scripts submitted to Mox for each of the two species.\n\n---\n\nHuman SBATCH script:\n\n- [20190228_pgen_busco_metazoa_augustus.sh](http://gannet.fish.washington.edu/Atumefaciens/20190228_pgen_busco_metazoa_augustus/20190228_pgen_busco_metazoa_augustus.sh)\n\n<pre><code>\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=busco\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=15-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --workdir=/gscratch/scrubbed/samwhite/outputs/20190228_pgen_busco_metazoa_augustus\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n# Load Open MPI module for parallel, multi-node processing\nmodule load icc_19-ompi_3.1.2\n\n# SegFault fix?\nexport THREADS_DAEMON_MODEL=1\n\n# Document programs in PATH (primarily for program version ID)\ndate >> system_path.log\necho \"\" >> system_path.log\necho \"System PATH for $SLURM_JOB_ID\" >> system_path.log\necho \"\" >> system_path.log\nprintf \"%0.s-\" {1..10} >> system_path.log\necho ${PATH} | tr : \\\\n >> system_path.log\n\n\n# Establish variables for more readable code\n\n## Input files and settings\nbase_name=Pgenerosa_v071_genome_snap02.all.maker\nbusco_db=/gscratch/srlab/sam/data/databases/BUSCO/metazoa_odb9\ngenome_fasta=/gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\ngenome_index=${genome_fasta}.fai\naugustus_species=human\n\n## Save working directory\nwd=$(pwd)\n\n## Set program paths\naugustus_bin=/gscratch/srlab/programs/Augustus-3.3.2/bin\naugustus_scripts=/gscratch/srlab/programs/Augustus-3.3.2/scripts\nbedtools=/gscratch/srlab/programs/bedtools-2.27.1/bin/bedtools\nblast_dir=/gscratch/srlab/programs/ncbi-blast-2.8.1+/bin\nbusco=/gscratch/srlab/programs/busco-v3/scripts/run_BUSCO.py\nhmm_dir=/gscratch/srlab/programs/hmmer-3.2.1/src\nsamtools=/gscratch/srlab/programs/samtools-1.9/samtools\n\n## Augustus configs\naugustus_dir=${wd}/augustus\naugustus_config_dir=${augustus_dir}/config\naugustus_orig_config_dir=/gscratch/srlab/programs/Augustus-3.3.2/config\n\n## BUSCO configs\nbusco_config_default=/gscratch/srlab/programs/busco-v3/config/config.ini.default\nbusco_config_ini=${wd}/config.ini\n\n# Export BUSCO config file location\nexport BUSCO_CONFIG_FILE=\"${busco_config_ini}\"\n\n# Export Augustus variable\nexport PATH=\"${augustus_bin}:$PATH\"\nexport PATH=\"${augustus_scripts}:$PATH\"\nexport AUGUSTUS_CONFIG_PATH=\"${augustus_config_dir}\"\n\n\n# Copy BUSCO config file\ncp ${busco_config_default} ${busco_config_ini}\n\n# Make Augustus directory if it doesn't exist\nif [ ! -d ${augustus_dir} ]; then\n  mkdir --parents ${augustus_dir}\nfi\n\n# Copy Augustus config directory\ncp --preserve -r ${augustus_orig_config_dir} ${augustus_dir}\n\n# Edit BUSCO config file\n## Set paths to various programs\n### The use of the % symbol sets the delimiter sed uses for arguments.\n### Normally, the delimiter that most examples use is a slash \"/\".\n### But, we need to expand the variables into a full path with slashes, which screws up sed.\n### Thus, the use of % symbol instead (it could be any character that is NOT present in the expanded variable; doesn't have to be \"%\").\nsed -i \"/^;cpu/ s/1/28/\" \"${busco_config_ini}\"\nsed -i \"/^tblastn_path/ s%tblastn_path = /usr/bin/%path = ${blast_dir}%\" \"${busco_config_ini}\"\nsed -i \"/^makeblastdb_path/ s%makeblastdb_path = /usr/bin/%path = ${blast_dir}%\" \"${busco_config_ini}\"\nsed -i \"/^augustus_path/ s%augustus_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/bin/%path = ${augustus_bin}%\" \"${busco_config_ini}\"\nsed -i \"/^etraining_path/ s%etraining_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/bin/%path = ${augustus_bin}%\" \"${busco_config_ini}\"\nsed -i \"/^gff2gbSmallDNA_path/ s%gff2gbSmallDNA_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^new_species_path/ s%new_species_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^optimize_augustus_path/ s%optimize_augustus_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^hmmsearch_path/ s%hmmsearch_path = /home/osboxes/BUSCOVM/hmmer/hmmer-3.1b2-linux-intel-ia32/binaries/%path = ${hmm_dir}%\" \"${busco_config_ini}\"\n\n\n# Run BUSCO/Augustus training\n${busco} \\\n--in ${genome_fasta} \\\n--out ${base_name} \\\n--lineage_path ${busco_db} \\\n--mode genome \\\n--cpu 28 \\\n--long \\\n--species ${augustus_species} \\\n--tarzip \\\n--augustus_parameters='--progress=true'\n\n</code></pre>\n\n---\n\nFly SBATCH script:\n\n- [20190301_pgen_busco_metazoa_fly_augustus.sh](http://gannet.fish.washington.edu/Atumefaciens/20190301_pgen_busco_metazoa_fly_augustus/20190301_pgen_busco_metazoa_fly_augustus.sh)\n\n<pre><code>\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=busco\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=15-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --workdir=/gscratch/scrubbed/samwhite/outputs/20190301_pgen_busco_metazoa_fly_augustus\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n# Load Open MPI module for parallel, multi-node processing\nmodule load icc_19-ompi_3.1.2\n\n# SegFault fix?\nexport THREADS_DAEMON_MODEL=1\n\n# Document programs in PATH (primarily for program version ID)\ndate >> system_path.log\necho \"\" >> system_path.log\necho \"System PATH for $SLURM_JOB_ID\" >> system_path.log\necho \"\" >> system_path.log\nprintf \"%0.s-\" {1..10} >> system_path.log\necho ${PATH} | tr : \\\\n >> system_path.log\n\n\n# Establish variables for more readable code\n\n## Input files and settings\nbase_name=Pgenerosa_v071_genome_snap02.all.maker\nbusco_db=/gscratch/srlab/sam/data/databases/BUSCO/metazoa_odb9\ngenome_fasta=/gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\ngenome_index=${genome_fasta}.fai\naugustus_species=fly\n\n## Save working directory\nwd=$(pwd)\n\n## Set program paths\naugustus_bin=/gscratch/srlab/programs/Augustus-3.3.2/bin\naugustus_scripts=/gscratch/srlab/programs/Augustus-3.3.2/scripts\nbedtools=/gscratch/srlab/programs/bedtools-2.27.1/bin/bedtools\nblast_dir=/gscratch/srlab/programs/ncbi-blast-2.8.1+/bin\nbusco=/gscratch/srlab/programs/busco-v3/scripts/run_BUSCO.py\nhmm_dir=/gscratch/srlab/programs/hmmer-3.2.1/src\nsamtools=/gscratch/srlab/programs/samtools-1.9/samtools\n\n## Augustus configs\naugustus_dir=${wd}/augustus\naugustus_config_dir=${augustus_dir}/config\naugustus_orig_config_dir=/gscratch/srlab/programs/Augustus-3.3.2/config\n\n## BUSCO configs\nbusco_config_default=/gscratch/srlab/programs/busco-v3/config/config.ini.default\nbusco_config_ini=${wd}/config.ini\n\n# Export BUSCO config file location\nexport BUSCO_CONFIG_FILE=\"${busco_config_ini}\"\n\n# Export Augustus variable\nexport PATH=\"${augustus_bin}:$PATH\"\nexport PATH=\"${augustus_scripts}:$PATH\"\nexport AUGUSTUS_CONFIG_PATH=\"${augustus_config_dir}\"\n\n\n# Copy BUSCO config file\ncp ${busco_config_default} ${busco_config_ini}\n\n# Make Augustus directory if it doesn't exist\nif [ ! -d ${augustus_dir} ]; then\n  mkdir --parents ${augustus_dir}\nfi\n\n# Copy Augustus config directory\ncp --preserve -r ${augustus_orig_config_dir} ${augustus_dir}\n\n# Edit BUSCO config file\n## Set paths to various programs\n### The use of the % symbol sets the delimiter sed uses for arguments.\n### Normally, the delimiter that most examples use is a slash \"/\".\n### But, we need to expand the variables into a full path with slashes, which screws up sed.\n### Thus, the use of % symbol instead (it could be any character that is NOT present in the expanded variable; doesn't have to be \"%\").\nsed -i \"/^;cpu/ s/1/28/\" \"${busco_config_ini}\"\nsed -i \"/^tblastn_path/ s%tblastn_path = /usr/bin/%path = ${blast_dir}%\" \"${busco_config_ini}\"\nsed -i \"/^makeblastdb_path/ s%makeblastdb_path = /usr/bin/%path = ${blast_dir}%\" \"${busco_config_ini}\"\nsed -i \"/^augustus_path/ s%augustus_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/bin/%path = ${augustus_bin}%\" \"${busco_config_ini}\"\nsed -i \"/^etraining_path/ s%etraining_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/bin/%path = ${augustus_bin}%\" \"${busco_config_ini}\"\nsed -i \"/^gff2gbSmallDNA_path/ s%gff2gbSmallDNA_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^new_species_path/ s%new_species_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^optimize_augustus_path/ s%optimize_augustus_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^hmmsearch_path/ s%hmmsearch_path = /home/osboxes/BUSCOVM/hmmer/hmmer-3.1b2-linux-intel-ia32/binaries/%path = ${hmm_dir}%\" \"${busco_config_ini}\"\n\n\n# Run BUSCO/Augustus training\n${busco} \\\n--in ${genome_fasta} \\\n--out ${base_name} \\\n--lineage_path ${busco_db} \\\n--mode genome \\\n--cpu 28 \\\n--long \\\n--species ${augustus_species} \\\n--tarzip \\\n--augustus_parameters='--progress=true'\n\n</code></pre>\n\n---\n\n# RESULTS\n\nBoth runs took ~16hrs each to complete.\n\nHuman output folder:\n\n- [20190228_pgen_busco_metazoa_augustus/](http://gannet.fish.washington.edu/Atumefaciens/20190228_pgen_busco_metazoa_augustus/)\n\nFly output folder:\n\n- [20190301_pgen_busco_metazoa_fly_augustus/](http://gannet.fish.washington.edu/Atumefaciens/20190301_pgen_busco_metazoa_fly_augustus/)\n\n---\n\nHuman short summary:\n\n- [20190228_pgen_busco_metazoa_augustus/run_Pgenerosa_v071_genome_snap02.all.maker/short_summary_Pgenerosa_v071_genome_snap02.all.maker.txt](http://gannet.fish.washington.edu/Atumefaciens/20190228_pgen_busco_metazoa_augustus/run_Pgenerosa_v071_genome_snap02.all.maker/short_summary_Pgenerosa_v071_genome_snap02.all.maker.txt)\n\n<pre><code>\n# BUSCO version is: 3.0.2\n# The lineage dataset is: metazoa_odb9 (Creation date: 2016-02-13, number of species: 65, number of BUSCOs: 978)\n# To reproduce this run: python /gscratch/srlab/programs/busco-v3/scripts/run_BUSCO.py -i /gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta -o Pgenerosa_v071_genome_snap02.all.maker -l /gscratch/srlab/sam/data/databases/BUSCO/metazoa_odb9/ -m genome -c 28 --long -z -sp human --augustus_parameters '--progress=true'\n#\n# Summarized benchmarking in BUSCO notation for file /gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\n# BUSCO was run in mode: genome\n\n\tC:76.3%[S:73.3%,D:3.0%],F:5.2%,M:18.5%,n:978\n\n\t746\tComplete BUSCOs (C)\n\t717\tComplete and single-copy BUSCOs (S)\n\t29\tComplete and duplicated BUSCOs (D)\n\t51\tFragmented BUSCOs (F)\n\t181\tMissing BUSCOs (M)\n\t978\tTotal BUSCO groups searched\n</code></pre>\n\n---\n\nFly short summary:\n\n- [20190301_pgen_busco_metazoa_fly_augustus/run_Pgenerosa_v071_genome_snap02.all.maker/short_summary_Pgenerosa_v071_genome_snap02.all.maker.txt](http://gannet.fish.washington.edu/Atumefaciens/20190301_pgen_busco_metazoa_fly_augustus/run_Pgenerosa_v071_genome_snap02.all.maker/short_summary_Pgenerosa_v071_genome_snap02.all.maker.txt)\n\n<pre><code>\n# BUSCO version is: 3.0.2\n# The lineage dataset is: metazoa_odb9 (Creation date: 2016-02-13, number of species: 65, number of BUSCOs: 978)\n# To reproduce this run: python /gscratch/srlab/programs/busco-v3/scripts/run_BUSCO.py -i /gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta -o Pgenerosa_v071_genome_snap02.all.maker -l /gscratch/srlab/sam/data/databases/BUSCO/metazoa_odb9/ -m genome -c 28 --long -z -sp fly --augustus_parameters '--progress=true'\n#\n# Summarized benchmarking in BUSCO notation for file /gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\n# BUSCO was run in mode: genome\n\n\tC:76.6%[S:73.3%,D:3.3%],F:5.2%,M:18.2%,n:978\n\n\t749\tComplete BUSCOs (C)\n\t717\tComplete and single-copy BUSCOs (S)\n\t32\tComplete and duplicated BUSCOs (D)\n\t51\tFragmented BUSCOs (F)\n\t178\tMissing BUSCOs (M)\n\t978\tTotal BUSCO groups searched\n</code></pre>\n\nOverall, the species selection seems to have minimal impact on the analysis. Both sets of analyses yield nearly identical results, however, fly yields three additional complete BUSCOs, but they're duplicated.\n\nThis version of the genome suggests it is ~76% complete. I'm curious how the original genome assembly (v070) will compare.\n","srcMarkdownNoYaml":"\nRan [BUSCO](https://busco.ezlab.org/) on our completed annotation of the [P.generosa v071 genome (GFF)](https://gannet.fish.washington.edu/Atumefaciens/20190213_geoduck_maker_genome_annotation/Pgenerosa_v071_genome_snap02.all.renamed.putative_function.domain_added.gff) (subset of sequences >10kbp). See this [notebook entry for genome annotation info](https://robertslab.github.io/sams-notebook/posts/2019/2019-02-13-Genome-Annotation---Pgenerosa_v71-with-MAKER-on-Mox/). This provides a nice metric on how \"complete\" a genome assembly (or transcriptome) is. Additionally, BUSCO is tied in with [Augustus](http://augustus.gobics.de/) for gene prediction and generates _ab initio_ gene models. With that said, since I just want to evaluate the completeness of this particular genome assembly, I'll be using the annotated genome generated through two rounds of [SNAP](https://github.com/KorfLab/SNAP) gene prediction. Otherwise, I'd use the initial MAKER annotations to generate an Augustus gene model that could be used in conjuction with the SNAP models (I'll likely do this at a later date).\n\nFirstly, I needed a FastA as input for BUSCO, so I extracted the FastA from the GFF with the following script:\n\n<pre><code>\n#!/bin/env bash\n\n# Script to extract FastA sequences from GFF3 (specifically, those produced by MAKER)\n\n# User needs to set GFF path and desired output file name\n#-----------------------------------\n# Set path to GFF\ngff=/gscratch/scrubbed/samwhite/outputs/20190213_geoduck_maker_genome_annotation/Pgenerosa_v071_genome_snap02.all.renamed.putative_function.domain_added.gff\n\n# Set path to desired FastA file output\nfasta_out=/gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\n\n#-----------------------------------\n\n# Determine total number of lines (records) in GFF\ntotal_records=$(wc -l < ${gff})\n\n# Determine line number of FastA demarcation\nfasta_id_line=$(grep -n \"##FASTA\" ${gff} cut -d\":\" -f1)\n\n# Add \"1\" to the fasta_id_line to establish starting line of first FastA record\nbegin_fastas_line=$(( ${fasta_id_line + 1 }))\n\n# Print all lines from beginning of FastA records to the end of the file\nawk 'BEGIN{min=${begin_fastas_line};max=total_records} \\\n{if (NR>=min) {if (NR<=max) print}}' ${gff} \\\n> ${fasta_out}\n\n</code></pre>\n\nThen, I ran BUSCO using two different species with the same BUSCO database (```metazoa_odb9```):\n\n- Human\n- fly (BUSCO default)\n\nI simply did this to get an idea of what impact species selection might have on BUSCO analysis.\n\nHere are the two SBATCH scripts submitted to Mox for each of the two species.\n\n---\n\nHuman SBATCH script:\n\n- [20190228_pgen_busco_metazoa_augustus.sh](http://gannet.fish.washington.edu/Atumefaciens/20190228_pgen_busco_metazoa_augustus/20190228_pgen_busco_metazoa_augustus.sh)\n\n<pre><code>\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=busco\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=15-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --workdir=/gscratch/scrubbed/samwhite/outputs/20190228_pgen_busco_metazoa_augustus\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n# Load Open MPI module for parallel, multi-node processing\nmodule load icc_19-ompi_3.1.2\n\n# SegFault fix?\nexport THREADS_DAEMON_MODEL=1\n\n# Document programs in PATH (primarily for program version ID)\ndate >> system_path.log\necho \"\" >> system_path.log\necho \"System PATH for $SLURM_JOB_ID\" >> system_path.log\necho \"\" >> system_path.log\nprintf \"%0.s-\" {1..10} >> system_path.log\necho ${PATH} | tr : \\\\n >> system_path.log\n\n\n# Establish variables for more readable code\n\n## Input files and settings\nbase_name=Pgenerosa_v071_genome_snap02.all.maker\nbusco_db=/gscratch/srlab/sam/data/databases/BUSCO/metazoa_odb9\ngenome_fasta=/gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\ngenome_index=${genome_fasta}.fai\naugustus_species=human\n\n## Save working directory\nwd=$(pwd)\n\n## Set program paths\naugustus_bin=/gscratch/srlab/programs/Augustus-3.3.2/bin\naugustus_scripts=/gscratch/srlab/programs/Augustus-3.3.2/scripts\nbedtools=/gscratch/srlab/programs/bedtools-2.27.1/bin/bedtools\nblast_dir=/gscratch/srlab/programs/ncbi-blast-2.8.1+/bin\nbusco=/gscratch/srlab/programs/busco-v3/scripts/run_BUSCO.py\nhmm_dir=/gscratch/srlab/programs/hmmer-3.2.1/src\nsamtools=/gscratch/srlab/programs/samtools-1.9/samtools\n\n## Augustus configs\naugustus_dir=${wd}/augustus\naugustus_config_dir=${augustus_dir}/config\naugustus_orig_config_dir=/gscratch/srlab/programs/Augustus-3.3.2/config\n\n## BUSCO configs\nbusco_config_default=/gscratch/srlab/programs/busco-v3/config/config.ini.default\nbusco_config_ini=${wd}/config.ini\n\n# Export BUSCO config file location\nexport BUSCO_CONFIG_FILE=\"${busco_config_ini}\"\n\n# Export Augustus variable\nexport PATH=\"${augustus_bin}:$PATH\"\nexport PATH=\"${augustus_scripts}:$PATH\"\nexport AUGUSTUS_CONFIG_PATH=\"${augustus_config_dir}\"\n\n\n# Copy BUSCO config file\ncp ${busco_config_default} ${busco_config_ini}\n\n# Make Augustus directory if it doesn't exist\nif [ ! -d ${augustus_dir} ]; then\n  mkdir --parents ${augustus_dir}\nfi\n\n# Copy Augustus config directory\ncp --preserve -r ${augustus_orig_config_dir} ${augustus_dir}\n\n# Edit BUSCO config file\n## Set paths to various programs\n### The use of the % symbol sets the delimiter sed uses for arguments.\n### Normally, the delimiter that most examples use is a slash \"/\".\n### But, we need to expand the variables into a full path with slashes, which screws up sed.\n### Thus, the use of % symbol instead (it could be any character that is NOT present in the expanded variable; doesn't have to be \"%\").\nsed -i \"/^;cpu/ s/1/28/\" \"${busco_config_ini}\"\nsed -i \"/^tblastn_path/ s%tblastn_path = /usr/bin/%path = ${blast_dir}%\" \"${busco_config_ini}\"\nsed -i \"/^makeblastdb_path/ s%makeblastdb_path = /usr/bin/%path = ${blast_dir}%\" \"${busco_config_ini}\"\nsed -i \"/^augustus_path/ s%augustus_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/bin/%path = ${augustus_bin}%\" \"${busco_config_ini}\"\nsed -i \"/^etraining_path/ s%etraining_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/bin/%path = ${augustus_bin}%\" \"${busco_config_ini}\"\nsed -i \"/^gff2gbSmallDNA_path/ s%gff2gbSmallDNA_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^new_species_path/ s%new_species_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^optimize_augustus_path/ s%optimize_augustus_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^hmmsearch_path/ s%hmmsearch_path = /home/osboxes/BUSCOVM/hmmer/hmmer-3.1b2-linux-intel-ia32/binaries/%path = ${hmm_dir}%\" \"${busco_config_ini}\"\n\n\n# Run BUSCO/Augustus training\n${busco} \\\n--in ${genome_fasta} \\\n--out ${base_name} \\\n--lineage_path ${busco_db} \\\n--mode genome \\\n--cpu 28 \\\n--long \\\n--species ${augustus_species} \\\n--tarzip \\\n--augustus_parameters='--progress=true'\n\n</code></pre>\n\n---\n\nFly SBATCH script:\n\n- [20190301_pgen_busco_metazoa_fly_augustus.sh](http://gannet.fish.washington.edu/Atumefaciens/20190301_pgen_busco_metazoa_fly_augustus/20190301_pgen_busco_metazoa_fly_augustus.sh)\n\n<pre><code>\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=busco\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=15-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --workdir=/gscratch/scrubbed/samwhite/outputs/20190301_pgen_busco_metazoa_fly_augustus\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n# Load Open MPI module for parallel, multi-node processing\nmodule load icc_19-ompi_3.1.2\n\n# SegFault fix?\nexport THREADS_DAEMON_MODEL=1\n\n# Document programs in PATH (primarily for program version ID)\ndate >> system_path.log\necho \"\" >> system_path.log\necho \"System PATH for $SLURM_JOB_ID\" >> system_path.log\necho \"\" >> system_path.log\nprintf \"%0.s-\" {1..10} >> system_path.log\necho ${PATH} | tr : \\\\n >> system_path.log\n\n\n# Establish variables for more readable code\n\n## Input files and settings\nbase_name=Pgenerosa_v071_genome_snap02.all.maker\nbusco_db=/gscratch/srlab/sam/data/databases/BUSCO/metazoa_odb9\ngenome_fasta=/gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\ngenome_index=${genome_fasta}.fai\naugustus_species=fly\n\n## Save working directory\nwd=$(pwd)\n\n## Set program paths\naugustus_bin=/gscratch/srlab/programs/Augustus-3.3.2/bin\naugustus_scripts=/gscratch/srlab/programs/Augustus-3.3.2/scripts\nbedtools=/gscratch/srlab/programs/bedtools-2.27.1/bin/bedtools\nblast_dir=/gscratch/srlab/programs/ncbi-blast-2.8.1+/bin\nbusco=/gscratch/srlab/programs/busco-v3/scripts/run_BUSCO.py\nhmm_dir=/gscratch/srlab/programs/hmmer-3.2.1/src\nsamtools=/gscratch/srlab/programs/samtools-1.9/samtools\n\n## Augustus configs\naugustus_dir=${wd}/augustus\naugustus_config_dir=${augustus_dir}/config\naugustus_orig_config_dir=/gscratch/srlab/programs/Augustus-3.3.2/config\n\n## BUSCO configs\nbusco_config_default=/gscratch/srlab/programs/busco-v3/config/config.ini.default\nbusco_config_ini=${wd}/config.ini\n\n# Export BUSCO config file location\nexport BUSCO_CONFIG_FILE=\"${busco_config_ini}\"\n\n# Export Augustus variable\nexport PATH=\"${augustus_bin}:$PATH\"\nexport PATH=\"${augustus_scripts}:$PATH\"\nexport AUGUSTUS_CONFIG_PATH=\"${augustus_config_dir}\"\n\n\n# Copy BUSCO config file\ncp ${busco_config_default} ${busco_config_ini}\n\n# Make Augustus directory if it doesn't exist\nif [ ! -d ${augustus_dir} ]; then\n  mkdir --parents ${augustus_dir}\nfi\n\n# Copy Augustus config directory\ncp --preserve -r ${augustus_orig_config_dir} ${augustus_dir}\n\n# Edit BUSCO config file\n## Set paths to various programs\n### The use of the % symbol sets the delimiter sed uses for arguments.\n### Normally, the delimiter that most examples use is a slash \"/\".\n### But, we need to expand the variables into a full path with slashes, which screws up sed.\n### Thus, the use of % symbol instead (it could be any character that is NOT present in the expanded variable; doesn't have to be \"%\").\nsed -i \"/^;cpu/ s/1/28/\" \"${busco_config_ini}\"\nsed -i \"/^tblastn_path/ s%tblastn_path = /usr/bin/%path = ${blast_dir}%\" \"${busco_config_ini}\"\nsed -i \"/^makeblastdb_path/ s%makeblastdb_path = /usr/bin/%path = ${blast_dir}%\" \"${busco_config_ini}\"\nsed -i \"/^augustus_path/ s%augustus_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/bin/%path = ${augustus_bin}%\" \"${busco_config_ini}\"\nsed -i \"/^etraining_path/ s%etraining_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/bin/%path = ${augustus_bin}%\" \"${busco_config_ini}\"\nsed -i \"/^gff2gbSmallDNA_path/ s%gff2gbSmallDNA_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^new_species_path/ s%new_species_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^optimize_augustus_path/ s%optimize_augustus_path = /home/osboxes/BUSCOVM/augustus/augustus-3.2.2/scripts/%path = ${augustus_scripts}%\" \"${busco_config_ini}\"\nsed -i \"/^hmmsearch_path/ s%hmmsearch_path = /home/osboxes/BUSCOVM/hmmer/hmmer-3.1b2-linux-intel-ia32/binaries/%path = ${hmm_dir}%\" \"${busco_config_ini}\"\n\n\n# Run BUSCO/Augustus training\n${busco} \\\n--in ${genome_fasta} \\\n--out ${base_name} \\\n--lineage_path ${busco_db} \\\n--mode genome \\\n--cpu 28 \\\n--long \\\n--species ${augustus_species} \\\n--tarzip \\\n--augustus_parameters='--progress=true'\n\n</code></pre>\n\n---\n\n# RESULTS\n\nBoth runs took ~16hrs each to complete.\n\nHuman output folder:\n\n- [20190228_pgen_busco_metazoa_augustus/](http://gannet.fish.washington.edu/Atumefaciens/20190228_pgen_busco_metazoa_augustus/)\n\nFly output folder:\n\n- [20190301_pgen_busco_metazoa_fly_augustus/](http://gannet.fish.washington.edu/Atumefaciens/20190301_pgen_busco_metazoa_fly_augustus/)\n\n---\n\nHuman short summary:\n\n- [20190228_pgen_busco_metazoa_augustus/run_Pgenerosa_v071_genome_snap02.all.maker/short_summary_Pgenerosa_v071_genome_snap02.all.maker.txt](http://gannet.fish.washington.edu/Atumefaciens/20190228_pgen_busco_metazoa_augustus/run_Pgenerosa_v071_genome_snap02.all.maker/short_summary_Pgenerosa_v071_genome_snap02.all.maker.txt)\n\n<pre><code>\n# BUSCO version is: 3.0.2\n# The lineage dataset is: metazoa_odb9 (Creation date: 2016-02-13, number of species: 65, number of BUSCOs: 978)\n# To reproduce this run: python /gscratch/srlab/programs/busco-v3/scripts/run_BUSCO.py -i /gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta -o Pgenerosa_v071_genome_snap02.all.maker -l /gscratch/srlab/sam/data/databases/BUSCO/metazoa_odb9/ -m genome -c 28 --long -z -sp human --augustus_parameters '--progress=true'\n#\n# Summarized benchmarking in BUSCO notation for file /gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\n# BUSCO was run in mode: genome\n\n\tC:76.3%[S:73.3%,D:3.0%],F:5.2%,M:18.5%,n:978\n\n\t746\tComplete BUSCOs (C)\n\t717\tComplete and single-copy BUSCOs (S)\n\t29\tComplete and duplicated BUSCOs (D)\n\t51\tFragmented BUSCOs (F)\n\t181\tMissing BUSCOs (M)\n\t978\tTotal BUSCO groups searched\n</code></pre>\n\n---\n\nFly short summary:\n\n- [20190301_pgen_busco_metazoa_fly_augustus/run_Pgenerosa_v071_genome_snap02.all.maker/short_summary_Pgenerosa_v071_genome_snap02.all.maker.txt](http://gannet.fish.washington.edu/Atumefaciens/20190301_pgen_busco_metazoa_fly_augustus/run_Pgenerosa_v071_genome_snap02.all.maker/short_summary_Pgenerosa_v071_genome_snap02.all.maker.txt)\n\n<pre><code>\n# BUSCO version is: 3.0.2\n# The lineage dataset is: metazoa_odb9 (Creation date: 2016-02-13, number of species: 65, number of BUSCOs: 978)\n# To reproduce this run: python /gscratch/srlab/programs/busco-v3/scripts/run_BUSCO.py -i /gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta -o Pgenerosa_v071_genome_snap02.all.maker -l /gscratch/srlab/sam/data/databases/BUSCO/metazoa_odb9/ -m genome -c 28 --long -z -sp fly --augustus_parameters '--progress=true'\n#\n# Summarized benchmarking in BUSCO notation for file /gscratch/srlab/sam/data/P_generosa/genomes/Pgenerosa_v071_genome_snap02.all.renamed.fasta\n# BUSCO was run in mode: genome\n\n\tC:76.6%[S:73.3%,D:3.3%],F:5.2%,M:18.2%,n:978\n\n\t749\tComplete BUSCOs (C)\n\t717\tComplete and single-copy BUSCOs (S)\n\t32\tComplete and duplicated BUSCOs (D)\n\t51\tFragmented BUSCOs (F)\n\t178\tMissing BUSCOs (M)\n\t978\tTotal BUSCO groups searched\n</code></pre>\n\nOverall, the species selection seems to have minimal impact on the analysis. Both sets of analyses yield nearly identical results, however, fly yields three additional complete BUSCOs, but they're duplicated.\n\nThis version of the genome suggests it is ~76% complete. I'm curious how the original genome assembly (v070) will compare.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Genome Assessment - BUSCO Metazoa on P.generosa v071 on Mox","date":"2019-03-02 07:46","tags":["busco","metzoa","Panopea generosa","geoduck","mox","augustus"],"categories":["2019","Miscellaneous"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}