{"title":"Annotation - Olurida_v081 MAKER Proteins InterProScan5 on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Annotation - Olurida_v081 MAKER Proteins InterProScan5 on Mox","date":"2019-01-08 08:48","tags":["InterProScan","Ostrea lurida","Olympia oyster","Olurida_v081","mox"],"categories":["2019","Olympia Oyster Genome Sequencing"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nContinuation of genome annotation of the Olympia oyster genome. [Determined initial gene models using MAKER with two rounds of SNAP](https://robertslab.github.io/sams-notebook/posts/2018/2018-11-27-Annotation-Olurida_v081-MAKER-on-Mox.html), [relabeled with more user-friendly names](https://robertslab.github.io/sams-notebook/2019/01/08/Annotation-Olurida_v081-MAKER-ID-Mapping/), and then performed [protein-level annotations using BLASTp](https://robertslab.github.io/sams-notebook/2019/01/08/Annotation-Olurida_v081-MAKER-Proteins-BLASTp/). Next, I'm going to run [InterProScan5 (IPS5)](https://github.com/ebi-pf-team/interproscan/wiki) to help functionally characterize the _O.lurida_ proteins ID'd by MAKER. Once this is complete, I'll use MAKER to incorporate the IPS5 and BLASTp results into a much more neatly (i.e. human-readable) annotated genome!\n\nTHE IPS5 analysis was performed on Mox with the following SBATCH script:\n\n- [20190108_oly_maker_interproscan.sh (text)](https://gannet.fish.washington.edu/Atumefaciens/20190108_oly_maker_interproscan/20190108_oly_maker_interproscan.sh)\n\n<pre><code>\n#!/bin/bash\n#SBATCH --job-name=interproscan\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=15-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --workdir=/gscratch/scrubbed/samwhite/outputs/20190108_oly_maker_interproscan\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n# Load Open MPI module for parallel, multi-node processing\n\nmodule load icc_19-ompi_3.1.2\n\n# SegFault fix?\nexport THREADS_DAEMON_MODEL=1\n\n# Document programs in PATH (primarily for program version ID)\n\ndate >> system_path.log\necho \"\" >> system_path.log\necho \"System PATH for $SLURM_JOB_ID\" >> system_path.log\necho \"\" >> system_path.log\nprintf \"%0.s-\" {1..10} >> system_path.log\necho ${PATH} | tr : \\\\n >> system_path.log\n\n# Variables\ninterproscan=/gscratch/srlab/programs/interproscan-5.31-70.0/interproscan.sh\nmaker_prot_fasta=/gscratch/scrubbed/samwhite/outputs/20190108_oly_maker_id_mapping/20181127_oly_genome_snap02.all.maker.proteins.renamed.fasta\n\n# Run InterProScan 5\n## disable-precalc since this requires external database access (which Mox does not allow)\n${interproscan} \\\n--input ${maker_prot_fasta} \\\n--goterms \\\n--output-file-base 20190108_oly_maker_proteins_ips \\\n--disable-precalc\n</code></pre>\n\n---\n\n# RESULTS\n\nTook a decent amount of time to run (~6.5hrs). Requesting both nodes didn't make a difference because the program was unable to see two nodes, so only utilized a single node for processing. However, I did modify the config file to request much more than the default number of threads (cores) and set the maximum memory to 120GB.\n\nOutput folder:\n\n- [20190108_oly_maker_interproscan](https://gannet.fish.washington.edu/Atumefaciens/20190108_oly_maker_interproscan)\n\nTab-separated file (24MB):\n\n- [20190108_oly_maker_interproscan/20180108_oly_maker_proteins_ips.tsv](https://gannet.fish.washington.edu/Atumefaciens/20190108_oly_maker_interproscan/20180108_oly_maker_proteins_ips.tsv)\n\nGFF file (60MB):\n\n- [20190108_oly_maker_interproscan/20180108_oly_maker_proteins_ips.gff3](https://gannet.fish.washington.edu/Atumefaciens/20190108_oly_maker_interproscan/20180108_oly_maker_proteins_ips.gff3)\n\nXML file (150MB):\n\n- [20190108_oly_maker_interproscan/Olurida_v081.all.maker.proteins.fasta.xml](https://gannet.fish.washington.edu/Atumefaciens/20190107_oly_maker_interproscan/20180108_oly_maker_proteins_ips.xml)\n\nInterProScan Properties file (i.e. config file):\n\n- [20190108_oly_maker_interproscan/interproscan.properties](https://gannet.fish.washington.edu/Atumefaciens/20190107_oly_maker_interproscan/interproscan.properties)\n\nOK, so I should be able to use the TSV file, along with the previous BLASTp annotations to make a nice, _functionally annotated_ genome! Will get this next step running on Mox!\n","srcMarkdownNoYaml":"\nContinuation of genome annotation of the Olympia oyster genome. [Determined initial gene models using MAKER with two rounds of SNAP](https://robertslab.github.io/sams-notebook/posts/2018/2018-11-27-Annotation-Olurida_v081-MAKER-on-Mox.html), [relabeled with more user-friendly names](https://robertslab.github.io/sams-notebook/2019/01/08/Annotation-Olurida_v081-MAKER-ID-Mapping/), and then performed [protein-level annotations using BLASTp](https://robertslab.github.io/sams-notebook/2019/01/08/Annotation-Olurida_v081-MAKER-Proteins-BLASTp/). Next, I'm going to run [InterProScan5 (IPS5)](https://github.com/ebi-pf-team/interproscan/wiki) to help functionally characterize the _O.lurida_ proteins ID'd by MAKER. Once this is complete, I'll use MAKER to incorporate the IPS5 and BLASTp results into a much more neatly (i.e. human-readable) annotated genome!\n\nTHE IPS5 analysis was performed on Mox with the following SBATCH script:\n\n- [20190108_oly_maker_interproscan.sh (text)](https://gannet.fish.washington.edu/Atumefaciens/20190108_oly_maker_interproscan/20190108_oly_maker_interproscan.sh)\n\n<pre><code>\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=interproscan\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=15-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --workdir=/gscratch/scrubbed/samwhite/outputs/20190108_oly_maker_interproscan\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n# Load Open MPI module for parallel, multi-node processing\n\nmodule load icc_19-ompi_3.1.2\n\n# SegFault fix?\nexport THREADS_DAEMON_MODEL=1\n\n# Document programs in PATH (primarily for program version ID)\n\ndate >> system_path.log\necho \"\" >> system_path.log\necho \"System PATH for $SLURM_JOB_ID\" >> system_path.log\necho \"\" >> system_path.log\nprintf \"%0.s-\" {1..10} >> system_path.log\necho ${PATH} | tr : \\\\n >> system_path.log\n\n# Variables\ninterproscan=/gscratch/srlab/programs/interproscan-5.31-70.0/interproscan.sh\nmaker_prot_fasta=/gscratch/scrubbed/samwhite/outputs/20190108_oly_maker_id_mapping/20181127_oly_genome_snap02.all.maker.proteins.renamed.fasta\n\n# Run InterProScan 5\n## disable-precalc since this requires external database access (which Mox does not allow)\n${interproscan} \\\n--input ${maker_prot_fasta} \\\n--goterms \\\n--output-file-base 20190108_oly_maker_proteins_ips \\\n--disable-precalc\n</code></pre>\n\n---\n\n# RESULTS\n\nTook a decent amount of time to run (~6.5hrs). Requesting both nodes didn't make a difference because the program was unable to see two nodes, so only utilized a single node for processing. However, I did modify the config file to request much more than the default number of threads (cores) and set the maximum memory to 120GB.\n\nOutput folder:\n\n- [20190108_oly_maker_interproscan](https://gannet.fish.washington.edu/Atumefaciens/20190108_oly_maker_interproscan)\n\nTab-separated file (24MB):\n\n- [20190108_oly_maker_interproscan/20180108_oly_maker_proteins_ips.tsv](https://gannet.fish.washington.edu/Atumefaciens/20190108_oly_maker_interproscan/20180108_oly_maker_proteins_ips.tsv)\n\nGFF file (60MB):\n\n- [20190108_oly_maker_interproscan/20180108_oly_maker_proteins_ips.gff3](https://gannet.fish.washington.edu/Atumefaciens/20190108_oly_maker_interproscan/20180108_oly_maker_proteins_ips.gff3)\n\nXML file (150MB):\n\n- [20190108_oly_maker_interproscan/Olurida_v081.all.maker.proteins.fasta.xml](https://gannet.fish.washington.edu/Atumefaciens/20190107_oly_maker_interproscan/20180108_oly_maker_proteins_ips.xml)\n\nInterProScan Properties file (i.e. config file):\n\n- [20190108_oly_maker_interproscan/interproscan.properties](https://gannet.fish.washington.edu/Atumefaciens/20190107_oly_maker_interproscan/interproscan.properties)\n\nOK, so I should be able to use the TSV file, along with the previous BLASTp annotations to make a nice, _functionally annotated_ genome! Will get this next step running on Mox!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Annotation - Olurida_v081 MAKER Proteins InterProScan5 on Mox","date":"2019-01-08 08:48","tags":["InterProScan","Ostrea lurida","Olympia oyster","Olurida_v081","mox"],"categories":["2019","Olympia Oyster Genome Sequencing"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}