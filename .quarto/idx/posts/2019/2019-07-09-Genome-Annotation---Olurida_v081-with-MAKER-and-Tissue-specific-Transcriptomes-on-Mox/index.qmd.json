{"title":"Genome Annotation - Olurida_v081 with MAKER and Tissue-specific Transcriptomes on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Genome Annotation - Olurida_v081 with MAKER and Tissue-specific Transcriptomes on Mox","date":"2019-07-09 07:56","tags":["Olurida v081","v081","Ostrea lurida","Olympia oyster","mox","MAKER","annotation"],"categories":["2019","Olympia Oyster Genome Sequencing"]},"headingText":"Transcriptome FastA files (provided by Katherine Silliman; no creation info provided):","containsRefs":false,"markdown":"\nI [previously annotated our Olurida_v081 genome with MAKER](https://robertslab.github.io/sams-notebook/posts/2018/2018-11-27-Annotation-Olurida_v081-MAKER-on-Mox/) using our \"canonical\" transcriptome, [Olurida_transcriptome_v3.fasta](http://eagle.fish.washington.edu/cnidarian/Olurida_transcriptome_v3.fasta) as the EST evidence utilized by MAKER. A [discussion on one of our Slack channels related to the lack of isoform annotation](https://genefish.slack.com/archives/GHB1LCNRW/p1560978863004100) (I think it's a private channel, sorry) prompted Katherine Silliman to suggest re-running the annotation using tissue-specific transcriptome assemblies that she has generated as EST evidence, instead of a singular transcriptome. Since I already had previous versions of the MAKER script that I've used for annotations, re-running was rather straightforward. While this was running, I used [Stringtie on 20190625to produce a GTF that maps out potential isoforms](https://robertslab.github.io/sams-notebook/2019/06/25/Genome-Annotation-O.lurida-(v081)-Transcript-Isoform-ID-with-Stringtie-on-Mox/), as I don't believe MAKER will actually predict isoforms, since it didn't do so the first time, nor has it with other annotations we've run on geoduck assemblies.\n\nRunning MAKER will perform the following:\n\n- one round of MAKER gene model predictions\n- two rounds of SNAP gene model training/predictions\n- renaming of gene models to NCBI-standardized convention (e.g. OLUR_)\n- functional characterization of protein models (via BLASTp)\n- functional characterization of protein domains (via InterProScan5)\n\nHere are a list of the input files used for the various components of the MAKER annotation:\n\n\n\n- [CA adductor](https://owl.fish.washington.edu/wetgenes/201808_RNASeq_Hier/Olurida_CA_adductor_Trinity.fasta.gz)\n\n- [CA ctenidia](https://owl.fish.washington.edu/wetgenes/201808_RNASeq_Hier/Olurida_CA_ctenidia_Trinity.fasta.gz)\n\n- [CA mantle](https://owl.fish.washington.edu/wetgenes/201808_RNASeq_Hier/Olurida_CA_mantle_Trinity.fasta.gz)\n\n- [gonad](https://owl.fish.washington.edu/wetgenes/201808_RNASeq_Hier/Olurida_gonad_Trinity.fasta.gz)\n\n#### NCBI Protein FastA files\n\n- NCBI _Crassostrea gigas_ proteome (downloaded 20181119): `GCA_000297895.1_oyster_v9_protein.faa`\n\n- NCBI _Crassostrea virginica_ proteome (downloaded 20181119): `GCF_002022765.2_C_virginica-3.0_protein.faa`\n\n- SwissProt BLASTp database(downloaded 20190109): uniprot_sprot.fasta\n\n#### Repeats Files (links to notebook entries)\n\n- [RepeatModeler library](https://robertslab.github.io/sams-notebook/posts/2018/2018-10-22-Repeat-Library-Construction---O.lurida-RepeatModeler-v1.0.11/)\n\n- [RepeatMasker GFF](https://robertslab.github.io/sams-notebook/posts/2018/2018-07-03-transposable-element-mapping-olympia-oyster-genome-assembly-olurida_v081-using-repeatmasker-4-07/)\n\n\nSBATCH script (GitHub):\n\n- [20190709_maker_olur_v081_annotation.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20190709_maker_olur_v081_annotation.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=maker_olur-v081\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=2\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=40-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --workdir=/gscratch/scrubbed/samwhite/outputs/20190709_maker_olur_v081_annotation\n\n# Exit if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n# Load Open MPI module for parallel, multi-node processing\n\nmodule load icc_19-ompi_3.1.2\n\n# SegFault fix?\nexport THREADS_DAEMON_MODEL=1\n\n# Add BLAST to system PATH\nexport PATH=$PATH:/gscratch/srlab/programs/ncbi-blast-2.6.0+/bin\nexport BLASTDB=/gscratch/srlab/blastdbs/UniProtKB_20181008\n\n# Document programs in PATH (primarily for program version ID)\n\ndate >> system_path.log\necho \"\" >> system_path.log\necho \"System PATH for $SLURM_JOB_ID\" >> system_path.log\necho \"\" >> system_path.log\nprintf \"%0.s-\" {1..10} >> system_path.log\necho \"${PATH}\" | tr : \\\\n >> system_path.log\n\n## Establish variables for more readable code\n\nwd=$(pwd)\nmaker_dir=/gscratch/srlab/programs/maker-2.31.10/bin\nsnap_dir=/gscratch/srlab/programs/maker-2.31.10/exe/snap\n\n### Paths to Maker binaries\n\nmaker=${maker_dir}/maker\ngff3_merge=${maker_dir}/gff3_merge\nmaker2zff=${maker_dir}/maker2zff\nfathom=${snap_dir}/fathom\nforge=${snap_dir}/forge\nhmmassembler=${snap_dir}/hmm-assembler.pl\nfasta_merge=${maker_dir}/fasta_merge\nmap_ids=${maker_dir}/maker_map_ids\nmap_gff_ids=${maker_dir}/map_gff_ids\nmap_fasta_ids=${maker_dir}/map_fasta_ids\nfunctional_fasta=${maker_dir}/maker_functional_fasta\nfunctional_gff=${maker_dir}/maker_functional_gff\nipr_update_gff=${maker_dir}/ipr_update_gff\niprscan2gff3=${maker_dir}/iprscan2gff3\n\nblastp_dir=${wd}/blastp_annotation\nmaker_blastp=${wd}/blastp_annotation/blastp.outfmt6\nmaker_prot_fasta=${wd}/snap02/Olurida_v081_snap02.all.maker.proteins.fasta\nmaker_prot_fasta_renamed=${wd}/snap02/Olurida_v081_snap02.all.maker.proteins.renamed.fasta\nmaker_transcripts_fasta=${wd}/snap02/Olurida_v081_snap02.all.maker.transcripts.fasta\nmaker_transcripts_fasta_renamed=${wd}/snap02/Olurida_v081_snap02.all.maker.transcripts.renamed.fasta\nsnap02_gff=${wd}/snap02/Olurida_v081_snap02.all.gff\nsnap02_gff_renamed=${wd}/snap02/Olurida_v081_snap02.all.renamed.gff\nput_func_gff=Olurida_v081_genome_snap02.all.renamed.putative_function.gff\nput_func_prot=Olurida_v081_genome_snap02.all.maker.proteins.renamed.putative_function.fasta\nput_func_trans=Olurida_v081_genome_snap02.all.maker.transcripts.renamed.putative_function.fasta\nput_domain_gff=Olurida_v081_genome_snap02.all.renamed.putative_function.domain_added.gff\nips_dir=${wd}/interproscan_annotation\nips_base=Olurida_v081_maker_proteins_ips\nips_name=Olurida_v081_maker_proteins_ips.tsv\nid_map=${wd}/snap02/Olurida_v081_genome.map\nips_domains=Olurida_v081_genome_snap02.all.renamed.visible_ips_domains.gff\n\n## Path to blastp\nblastp=/gscratch/srlab/programs/ncbi-blast-2.6.0+/bin/blastp\n\n## Path to InterProScan5\ninterproscan=/gscratch/srlab/programs/interproscan-5.31-70.0/interproscan.sh\n\n## Store path to options control file\nmaker_opts_file=./maker_opts.ctl\n\n### Path to genome FastA file\ngenome=/gscratch/srlab/sam/data/O_lurida/genomes/Olurida_v081/Olurida_v081.fa\n\n### Paths to transcriptome FastA files\nadductor_transcriptome=/gscratch/srlab/sam/data/O_lurida/transcriptomes/Olurida_CA_adductor_Trinity.fasta\nctendia_transcriptome=/gscratch/srlab/sam/data/O_lurida/transcriptomes/Olurida_CA_ctenidia_Trinity.fasta\ngonad_transcriptome=/gscratch/srlab/sam/data/O_lurida/transcriptomes/Olurida_gonad_Trinity.fasta\nmantle_transcriptome=/gscratch/srlab/sam/data/O_lurida/transcriptomes/Olurida_CA_mantle_Trinity.fasta\n\n\n### Path to Crassotrea gigas NCBI protein FastA\ngigas_proteome=/gscratch/srlab/sam/data/C_gigas/gigas_ncbi_protein/GCA_000297895.1_oyster_v9_protein.faa\n\n### Path to Crassostrea virginica NCBI protein FastA\nvirginica_proteome=/gscratch/srlab/sam/data/C_virginica/virginica_ncbi_protein/GCF_002022765.2_C_virginica-3.0_protein.faa\n\n\n### Path to O.lurida-specific RepeatModeler library\nrepeat_library=/gscratch/srlab/sam/data/O_lurida/repeats/Ostrea_lurida_v081-families.fa\n\n### Path to O.lurida-specific RepeatMasker GFF\nrm_gff=/gscratch/srlab/sam/data/O_lurida/repeats/Olurida_v081.fa.out.gff\n\n### Path to SwissProt database for BLASTp\nsp_db_blastp=/gscratch/srlab/blastdbs/UniProtKB_20190109/uniprot_sprot.fasta\n\n\n## Make directories\nmkdir blastp_annotation\nmkdir interproscan_annotation\nmkdir snap01\nmkdir snap02\n\n\n## Create Maker control files needed for running Maker, only if it doesn't already exist and then edit it.\n### Edit options file\n### Set paths to O.lurida genome and transcriptome.\n### Set paths to C. gigas and C.virginica proteomes.\n### The use of the % symbol sets the delimiter sed uses for arguments.\n### Normally, the delimiter that most examples use is a slash \"/\".\n### But, we need to expand the variables into a full path with slashes, which screws up sed.\n### Thus, the use of % symbol instead (it could be any character that is NOT present in the expanded variable; doesn't have to be \"%\").\nif [ ! -e maker_opts.ctl ]; then\n  $maker -CTL\n  sed -i \"/^genome=/ s% %$genome %\" \"$maker_opts_file\"\n\n  # Set transcriptomes to use\n  sed -i \"/^est=/ s% %\\\n  ${adductor_transcriptome},\\\n  ${ctendia_transcriptome},\\\n  ${gonad_transcriptome},\\\n  ${mantle_transcriptome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set proteomes to use\n  sed -i \"/^protein=/ s% %\\\n  ${gigas_proteome},\\\n  ${virginica_proteome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set RepeatModeler library to use\n  sed -i \"/^rmlib=/ s% %$repeat_library %\" \"$maker_opts_file\"\n\n  # Set RepeatMasker GFF to use\n  sed -i \"/^rm_gff=/ s% %${rm_gff} %\" \"$maker_opts_file\"\n\n  # Set est2ggenome to 1 - tells MAKER to use transcriptome FastAs\n  sed -i \"/^est2genome=0/ s/est2genome=0/est2genome=1/\" \"$maker_opts_file\"\n\n  # Set protein2genome to 1 - tells MAKER to use protein FastAs\n  sed -i \"/^protein2genome=0/ s/protein2genome=0/protein2genome=1/\" \"$maker_opts_file\"\nfi\n\n\n## Run Maker\n### Specify number of nodes to use.\nmpiexec -n 56 $maker\n\n## Merge gffs\n${gff3_merge} -d Olurida_v081.maker.output/Olurida_v081_master_datastore_index.log\n\n## GFF with no FastA in footer\n${gff3_merge} -n -s -d Olurida_v081.maker.output/Olurida_v081_master_datastore_index.log > Olurida_v081.maker.all.noseqs.gff\n\n## Merge all FastAs\n${fasta_merge} -d Olurida_v081.maker.output/Olurida_v081_master_datastore_index.log\n\n## Extract GFF alignments for use in subsequent MAKER rounds\n### Transcript alignments\nawk '{ if ($2 == \"est2genome\") print $0 }' Olurida_v081.maker.all.noseqs.gff > Olurida_v081.maker.all.noseqs.est2genome.gff\n### Protein alignments\nawk '{ if ($2 == \"protein2genome\") print $0 }' Olurida_v081.maker.all.noseqs.gff > Olurida_v081.maker.all.noseqs.protein2genome.gff\n### Repeat alignments\nawk '{ if ($2 ~ \"repeat\") print $0 }' Olurida_v081.maker.all.noseqs.gff > Olurida_v081.maker.all.noseqs.repeats.gff\n\n## Run SNAP training, round 1\ncd \"${wd}\"\ncd snap01\n${maker2zff} ../Olurida_v081.all.gff\n${fathom} -categorize 1000 genome.ann genome.dna\n${fathom} -export 1000 -plus uni.ann uni.dna\n${forge} export.ann export.dna\n${hmmassembler} genome . > Olurida_v081_snap01.hmm\n\n## Initiate second Maker run.\n### Copy initial maker control files and\n### Default gene prediction settings are 0 (i.e. don't generate Maker gene predictions)\n### - use GFF subsets generated in first round of MAKER\n### - set location of snaphmm file to use for gene prediction\n### Percent symbols used below are the sed delimiters, instead of the default \"/\",\n### due to the need to use file paths.\nif [ ! -e maker_opts.ctl ]; then\n  $maker -CTL\n  sed -i \"/^genome=/ s% %$genome %\" maker_opts.ctl\n\n  # Set transcriptomes to use\n  sed -i \"/^est=/ s% %\\\n  ${adductor_transcriptome},\\\n  ${ctendia_transcriptome},\\\n  ${gonad_transcriptome},\\\n  ${mantle_transcriptome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set proteomes to use\n  sed -i \"/^protein=/ s% %\\\n  ${gigas_proteome},\\\n  ${virginica_proteome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set RepeatModeler library to use\n  sed -i \"/^rmlib=/ s% %$repeat_library %\" \"$maker_opts_file\"\n\n  sed -i \"/^est_gff=/ s% %../Olurida_v081.maker.all.noseqs.est2genome.gff %\" maker_opts.ctl\n  sed -i \"/^protein_gff=/ s% %../Olurida_v081.maker.all.noseqs.protein2genome.gff %\" maker_opts.ctl\n  sed -i \"/^rm_gff=/ s% %../Olurida_v081.maker.all.noseqs.repeats.gff %\" maker_opts.ctl\n  sed -i \"/^snaphmm=/ s% %Olurida_v081_snap01.hmm %\" maker_opts.ctl\nfi\n\n## Run Maker\n### Set basename of files and specify number of CPUs to use\nmpiexec -n 56 $maker \\\n-base Olurida_v081_snap01\n\n## Merge gffs\n${gff3_merge} -d Olurida_v081_snap01.maker.output/Olurida_v081_snap01_master_datastore_index.log\n\n## GFF with no FastA in footer\n${gff3_merge} -n -s -d Olurida_v081_snap01.maker.output/Olurida_v081_snap01_master_datastore_index.log > Olurida_v081_snap01.maker.all.noseqs.gff\n\n## Run SNAP training, round 2\ncd \"${wd}\"\ncd snap02\n${maker2zff} ../snap01/Olurida_v081_snap01.all.gff\n${fathom} -categorize 1000 genome.ann genome.dna\n${fathom} -export 1000 -plus uni.ann uni.dna\n${forge} export.ann export.dna\n${hmmassembler} genome . > Olurida_v081_snap02.hmm\n\n## Initiate third and final Maker run.\n\nif [ ! -e maker_opts.ctl ]; then\n  $maker -CTL\n  sed -i \"/^genome=/ s% %$genome %\" maker_opts.ctl\n\n  # Set transcriptomes to use\n  sed -i \"/^est=/ s% %\\\n  ${adductor_transcriptome},\\\n  ${ctendia_transcriptome},\\\n  ${gonad_transcriptome},\\\n  ${mantle_transcriptome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set proteomes to use\n  sed -i \"/^protein=/ s% %\\\n  ${gigas_proteome},\\\n  ${virginica_proteome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set RepeatModeler library to use\n  sed -i \"/^rmlib=/ s% %$repeat_library %\" \"$maker_opts_file\"\n\n  sed -i \"/^est_gff=/ s% %../Olurida_v081.maker.all.noseqs.est2genome.gff %\" maker_opts.ctl\n  sed -i \"/^protein_gff=/ s% %../Olurida_v081.maker.all.noseqs.protein2genome.gff %\" maker_opts.ctl\n  sed -i \"/^rm_gff=/ s% %../Olurida_v081.maker.all.noseqs.repeats.gff %\" maker_opts.ctl\n  sed -i \"/^snaphmm=/ s% %Olurida_v081_snap02.hmm %\" maker_opts.ctl\nfi\n\n## Run Maker\n### Set basename of files and specify number of CPUs to use\nmpiexec -n 56 $maker \\\n-base Olurida_v081_snap02\n\n## Merge gffs\n${gff3_merge} \\\n-d Olurida_v081_snap02.maker.output/Olurida_v081_snap02_master_datastore_index.log\n\n## GFF with no FastA in footer\n${gff3_merge} -n -s -d Olurida_v081_snap02.maker.output/Olurida_v081_snap02_master_datastore_index.log > Olurida_v081_snap02.maker.all.noseqs.gff\n\n## Merge FastAs\n${fasta_merge} \\\n-d Olurida_v081_snap02.maker.output/Olurida_v081_snap02_master_datastore_index.log\n\n# Create copies of files for mapping\ncp \"${maker_prot_fasta}\" \"${maker_prot_fasta_renamed}\"\ncp \"${maker_transcripts_fasta}\" \"${maker_transcripts_fasta_renamed}\"\ncp \"${snap02_gff}\" \"${snap02_gff_renamed}\"\n\n# Map IDs\n## Change gene names\n${map_ids} \\\n--prefix OLUR_ \\\n--justify 8 \\\n\"${snap02_gff}\" \\\n> \"${id_map}\"\n\n## Map GFF IDs\n${map_gff_ids} \\\n\"${id_map}\" \\\n\"${snap02_gff_renamed}\"\n\n## Map FastAs\n### Proteins\n${map_fasta_ids} \\\n\"${id_map}\" \\\n\"${maker_prot_fasta_renamed}\"\n\n### Transcripts\n${map_fasta_ids} \\\n\"${id_map}\" \\\n\"${maker_transcripts_fasta_renamed}\"\n\n# Run InterProScan 5\n## disable-precalc since this requires external database access (which Mox does not allow)\ncd \"${ips_dir}\"\n\n${interproscan} \\\n--input \"${maker_prot_fasta_renamed}\" \\\n--goterms \\\n--output-file-base ${ips_base} \\\n--disable-precalc\n\n# Run BLASTp\ncd \"${blastp_dir}\"\n\n${blastp} \\\n-query \"${maker_prot_fasta_renamed}\" \\\n-db ${sp_db_blastp} \\\n-out \"${maker_blastp}\" \\\n-max_target_seqs 1 \\\n-evalue 1e-6 \\\n-outfmt 6 \\\n-num_threads 28\n\n\n# Functional annotations\n\ncd \"${wd}\"\n\n## Add putative gene functions\n### GFF\n${functional_gff} \\\n${sp_db_blastp} \\\n\"${maker_blastp}\" \\\n\"${snap02_gff_renamed}\" \\\n> ${put_func_gff}\n\n### Proteins\n${functional_fasta} \\\n${sp_db_blastp} \\\n\"${maker_blastp}\" \\\n\"${maker_prot_fasta_renamed}\" \\\n> ${put_func_prot}\n\n### Transcripts\n${functional_fasta} \\\n${sp_db_blastp} \\\n\"${maker_blastp}\" \\\n\"${maker_transcripts_fasta_renamed}\" \\\n> ${put_func_trans}\n\n## Add InterProScan domain info\n### Add searchable tags\n${ipr_update_gff} \\\n${put_func_gff} \\\n\"${ips_dir}\"/${ips_name} \\\n> ${put_domain_gff}\n\n### Add viewable features for genome browsers (JBrowse, Gbrowse, Web Apollo)\n${iprscan2gff3} \\\n\"${ips_dir}\"/${ips_name} \\\n\"${snap02_gff_renamed}\" \\\n> ${ips_domains}\n\n# Create individual GFFs\n\nawk 'BEGIN { print \"##gff-version 3\" ; } $3 == \"CDS\" {print}' \\\n${put_domain_gff} \\\n> Olurida_v081-20190709.CDS.gff\n\nawk 'BEGIN { print \"##gff-version 3\" ; } $3 == \"exon\" {print}' \\\n${put_domain_gff} \\\n> Olurida_v081-20190709.exon.gff\n\nawk 'BEGIN { print \"##gff-version 3\" ; } $3 == \"gene\" {print}' \\\n${put_domain_gff} \\\n> Olurida_v081-20190709.gene.gff\n\nawk 'BEGIN { print \"##gff-version 3\" ; } $3 == \"mRNA\" {print}' \\\n${put_domain_gff} \\\n> Olurida_v081-20190709.mRNA.gff\n```\n\n---\n\n# RESULTS\n\nThis took ~5.75 days to run:\n\n![Screencap of Olurida_v081 annotation runtime](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20190709_maker_olur81_runtime.png?raw=true)\n\nOutput folder:\n\n- [20190709_maker_olur_v081_annotation/](https://gannet.fish.washington.edu/Atumefaciens/20190709_maker_olur_v081_annotation/)\n\nThe important files:\n\n- [Olurida_v081_genome_snap02.all.renamed.putative_function.domain_added.gff](https://gannet.fish.washington.edu/Atumefaciens/20190709_maker_olur_v081_annotation/Olurida_v081_genome_snap02.all.renamed.putative_function.domain_added.gff) (2.9GB)\n  - GFF file with all contigs annotated with putative functions and functional domains.\n  - _INCLUDES SEQUENCE FASTAS AT END OF FILE!_\n  - Generated with one round of MAKER gene prediction, followed by two rounds of SNAP _ab-initio_ gene prediction.\n  - MD5: `f54512bd964f45645c34b1e8e403a2b0`\n\n\n- [Olurida_v081_genome_snap02.all.maker.proteins.renamed.putative_function.fasta](https://gannet.fish.washington.edu/Atumefaciens/20190709_maker_olur_v081_annotation/Olurida_v081.all.maker.proteins.fasta) (1.1MB)\n  - Annotated proteins FastA file.\n  - Generated with one round of MAKER gene prediction, followed by two rounds of SNAP _ab-initio_ gene prediction.\n\n\n- [Olurida_v081_genome_snap02.all.maker.transcripts.renamed.putative_function.fasta](https://gannet.fish.washington.edu/Atumefaciens/20190709_maker_olur_v081_annotation/Olurida_v081.all.maker.transcripts.fasta) (2.9MB)\n  - Annotated transcripts FastA file.\n  - Generated with one round of MAKER gene prediction, followed by two rounds of SNAP _ab-initio_ gene prediction.\n\nAll the GFF files have been added to our [Genomic Resources wiki](https://github.com/RobertsLab/resources/wiki/Genomic-Resources) (GitHub).\n\n- CDS GFF:\n\n  - [Olurida_v081-20190709.CDS.gff](http://owl.fish.washington.edu/halfshell/genomic-databank/Olurida_v081-20190709.CDS.gff) (1.3MB)\n  - MD5: `eaf22c9868577539238a1b4c378e9200`\n\n\n- exon GFF:\n\n  - [Olurida_v081-20190709.exon.gff](http://owl.fish.washington.edu/halfshell/genomic-databank/Olurida_v081-20190709.exon.gff) (1.4MB)\n  - MD5: `748d596b07f1b2b18c567494f7d1c5b3`\n\n- gene GFF:\n\n  - [Olurida_v081-20190709.gene.gff](http://owl.fish.washington.edu/halfshell/genomic-databank/Olurida_v081-20190709.gene.gff)\n  - MD5: `6ec24727d92cc095ece0c371eb3b0c6b`\n\n\n- mRNA GFF:\n\n  - [Olurida_v081-20190709.mRNA.gff](http://owl.fish.washington.edu/halfshell/genomic-databank/Olurida_v081-20190709.mRNA.gff)\n  - MD5: `ba915ec3a59ee6ff3b7d5e37b5d0463d`\n\n  ---\n\nA quick `grep -c \">\" Olurida_v081_genome_snap02.all.maker.transcripts.renamed.putative_function.fasta`reveals:\n\n- 32,210 proteins/transcripts\n\nThe previous annotation (`grep -c \">\" 20181127_oly_genome_snap02.all.maker.transcripts.renamed.putative_function.fasta`) yielded:\n\n- 24,680 proteins/transcripts\n\nThat's ~30% increase in transcripts that have been ID'd/annotated with this particular MAKER set up. However, just as before, MAKER doesn't ID/annotate any potential isoforms. I'll probably run Stringtie with this annotation to get that info.\n\nHere are some example comparisons in Integrated Genome Viewer (IGV) of the two annotations. Blue tracks are the current v081 annotation and the pink tracks are the original v081 annotation:\n\n#### Annotations are the same\n\n![IGV screencap showing same annotations between original v081 and current v081 annotations](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20190709_maker_olur_v081_igv_comparisons-01.png?raw=true)\n\n---\n\n#### Current annotation has additional features\n\n##### Also exhibits slight differences in gene lengths\n\n![IGV screencap showing additional annotations in current v081](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20190709_maker_olur_v081_igv_comparisons-02.png?raw=true)\n\n---\n\n#### Annotations differ in gene/CDS annotation\n\n![IGV screencap showing differences in gene/CDS annotation](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20190709_maker_olur_v081_igv_comparisons-03.png?raw=true)\n\n---\n\nSo, what does this mean? Well, firstly, it's a bit difficult to compare both annotations, as they differed slightly in the way they were run; and not just differences in utilizing a \"canonical\" transcriptome vs. tissue-specific transcriptomes for the EST evidence. The only way to perform a true comparison would be to re-run the original annotation and make the necessary changes so that all the commands match this, but utilize the \"canonical\" transcriptome.\n\nAnother step we could take is attempting to improve the annotations by adding Augustus _ab initio_ gene prediction to the MAKER annotation. Having a third component for gene prediction would likely bolster results and improve our confidence in the annotations.\n\nAdditionally, an aspect that shouldn't be ignored is examing the Annotation Edit Distance (AED). This value ranges from 0 - 1, with 0 being the _highest_ confidence in gene annotation. Each entry in the GFF files has an associated AED score. We could decide on a threshold and filter out low scoring features; how we'd decide on that threshold is not currently clear to me, though. This paper provides a nice overview of how genome annotation works, what the AED is, tools for annotation and gene prediction, etc.:\n\n- [Yandell, M. and Ence. D. A beginner’s guide to eukaryotic genome annotation. Nature Reviews Genetics 13, 329-342 (2012).](http://www.yandell-lab.org/publications/pdf/euk_genome_annotation_review.pdf) (PDF)\n\nFinally, we could also use \"old school\" bench approaches and do some physical cloning/sequencing of regions of the genome and see how the annotations compare to the actual sequencing data we get back, or some RT-qPCRs on genes with two apparent differences in coding sequence features and see if one (or both!) amplifies.\n","srcMarkdownNoYaml":"\nI [previously annotated our Olurida_v081 genome with MAKER](https://robertslab.github.io/sams-notebook/posts/2018/2018-11-27-Annotation-Olurida_v081-MAKER-on-Mox/) using our \"canonical\" transcriptome, [Olurida_transcriptome_v3.fasta](http://eagle.fish.washington.edu/cnidarian/Olurida_transcriptome_v3.fasta) as the EST evidence utilized by MAKER. A [discussion on one of our Slack channels related to the lack of isoform annotation](https://genefish.slack.com/archives/GHB1LCNRW/p1560978863004100) (I think it's a private channel, sorry) prompted Katherine Silliman to suggest re-running the annotation using tissue-specific transcriptome assemblies that she has generated as EST evidence, instead of a singular transcriptome. Since I already had previous versions of the MAKER script that I've used for annotations, re-running was rather straightforward. While this was running, I used [Stringtie on 20190625to produce a GTF that maps out potential isoforms](https://robertslab.github.io/sams-notebook/2019/06/25/Genome-Annotation-O.lurida-(v081)-Transcript-Isoform-ID-with-Stringtie-on-Mox/), as I don't believe MAKER will actually predict isoforms, since it didn't do so the first time, nor has it with other annotations we've run on geoduck assemblies.\n\nRunning MAKER will perform the following:\n\n- one round of MAKER gene model predictions\n- two rounds of SNAP gene model training/predictions\n- renaming of gene models to NCBI-standardized convention (e.g. OLUR_)\n- functional characterization of protein models (via BLASTp)\n- functional characterization of protein domains (via InterProScan5)\n\nHere are a list of the input files used for the various components of the MAKER annotation:\n\n\n#### Transcriptome FastA files (provided by Katherine Silliman; no creation info provided):\n\n- [CA adductor](https://owl.fish.washington.edu/wetgenes/201808_RNASeq_Hier/Olurida_CA_adductor_Trinity.fasta.gz)\n\n- [CA ctenidia](https://owl.fish.washington.edu/wetgenes/201808_RNASeq_Hier/Olurida_CA_ctenidia_Trinity.fasta.gz)\n\n- [CA mantle](https://owl.fish.washington.edu/wetgenes/201808_RNASeq_Hier/Olurida_CA_mantle_Trinity.fasta.gz)\n\n- [gonad](https://owl.fish.washington.edu/wetgenes/201808_RNASeq_Hier/Olurida_gonad_Trinity.fasta.gz)\n\n#### NCBI Protein FastA files\n\n- NCBI _Crassostrea gigas_ proteome (downloaded 20181119): `GCA_000297895.1_oyster_v9_protein.faa`\n\n- NCBI _Crassostrea virginica_ proteome (downloaded 20181119): `GCF_002022765.2_C_virginica-3.0_protein.faa`\n\n- SwissProt BLASTp database(downloaded 20190109): uniprot_sprot.fasta\n\n#### Repeats Files (links to notebook entries)\n\n- [RepeatModeler library](https://robertslab.github.io/sams-notebook/posts/2018/2018-10-22-Repeat-Library-Construction---O.lurida-RepeatModeler-v1.0.11/)\n\n- [RepeatMasker GFF](https://robertslab.github.io/sams-notebook/posts/2018/2018-07-03-transposable-element-mapping-olympia-oyster-genome-assembly-olurida_v081-using-repeatmasker-4-07/)\n\n\nSBATCH script (GitHub):\n\n- [20190709_maker_olur_v081_annotation.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20190709_maker_olur_v081_annotation.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=maker_olur-v081\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=2\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=40-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --workdir=/gscratch/scrubbed/samwhite/outputs/20190709_maker_olur_v081_annotation\n\n# Exit if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n# Load Open MPI module for parallel, multi-node processing\n\nmodule load icc_19-ompi_3.1.2\n\n# SegFault fix?\nexport THREADS_DAEMON_MODEL=1\n\n# Add BLAST to system PATH\nexport PATH=$PATH:/gscratch/srlab/programs/ncbi-blast-2.6.0+/bin\nexport BLASTDB=/gscratch/srlab/blastdbs/UniProtKB_20181008\n\n# Document programs in PATH (primarily for program version ID)\n\ndate >> system_path.log\necho \"\" >> system_path.log\necho \"System PATH for $SLURM_JOB_ID\" >> system_path.log\necho \"\" >> system_path.log\nprintf \"%0.s-\" {1..10} >> system_path.log\necho \"${PATH}\" | tr : \\\\n >> system_path.log\n\n## Establish variables for more readable code\n\nwd=$(pwd)\nmaker_dir=/gscratch/srlab/programs/maker-2.31.10/bin\nsnap_dir=/gscratch/srlab/programs/maker-2.31.10/exe/snap\n\n### Paths to Maker binaries\n\nmaker=${maker_dir}/maker\ngff3_merge=${maker_dir}/gff3_merge\nmaker2zff=${maker_dir}/maker2zff\nfathom=${snap_dir}/fathom\nforge=${snap_dir}/forge\nhmmassembler=${snap_dir}/hmm-assembler.pl\nfasta_merge=${maker_dir}/fasta_merge\nmap_ids=${maker_dir}/maker_map_ids\nmap_gff_ids=${maker_dir}/map_gff_ids\nmap_fasta_ids=${maker_dir}/map_fasta_ids\nfunctional_fasta=${maker_dir}/maker_functional_fasta\nfunctional_gff=${maker_dir}/maker_functional_gff\nipr_update_gff=${maker_dir}/ipr_update_gff\niprscan2gff3=${maker_dir}/iprscan2gff3\n\nblastp_dir=${wd}/blastp_annotation\nmaker_blastp=${wd}/blastp_annotation/blastp.outfmt6\nmaker_prot_fasta=${wd}/snap02/Olurida_v081_snap02.all.maker.proteins.fasta\nmaker_prot_fasta_renamed=${wd}/snap02/Olurida_v081_snap02.all.maker.proteins.renamed.fasta\nmaker_transcripts_fasta=${wd}/snap02/Olurida_v081_snap02.all.maker.transcripts.fasta\nmaker_transcripts_fasta_renamed=${wd}/snap02/Olurida_v081_snap02.all.maker.transcripts.renamed.fasta\nsnap02_gff=${wd}/snap02/Olurida_v081_snap02.all.gff\nsnap02_gff_renamed=${wd}/snap02/Olurida_v081_snap02.all.renamed.gff\nput_func_gff=Olurida_v081_genome_snap02.all.renamed.putative_function.gff\nput_func_prot=Olurida_v081_genome_snap02.all.maker.proteins.renamed.putative_function.fasta\nput_func_trans=Olurida_v081_genome_snap02.all.maker.transcripts.renamed.putative_function.fasta\nput_domain_gff=Olurida_v081_genome_snap02.all.renamed.putative_function.domain_added.gff\nips_dir=${wd}/interproscan_annotation\nips_base=Olurida_v081_maker_proteins_ips\nips_name=Olurida_v081_maker_proteins_ips.tsv\nid_map=${wd}/snap02/Olurida_v081_genome.map\nips_domains=Olurida_v081_genome_snap02.all.renamed.visible_ips_domains.gff\n\n## Path to blastp\nblastp=/gscratch/srlab/programs/ncbi-blast-2.6.0+/bin/blastp\n\n## Path to InterProScan5\ninterproscan=/gscratch/srlab/programs/interproscan-5.31-70.0/interproscan.sh\n\n## Store path to options control file\nmaker_opts_file=./maker_opts.ctl\n\n### Path to genome FastA file\ngenome=/gscratch/srlab/sam/data/O_lurida/genomes/Olurida_v081/Olurida_v081.fa\n\n### Paths to transcriptome FastA files\nadductor_transcriptome=/gscratch/srlab/sam/data/O_lurida/transcriptomes/Olurida_CA_adductor_Trinity.fasta\nctendia_transcriptome=/gscratch/srlab/sam/data/O_lurida/transcriptomes/Olurida_CA_ctenidia_Trinity.fasta\ngonad_transcriptome=/gscratch/srlab/sam/data/O_lurida/transcriptomes/Olurida_gonad_Trinity.fasta\nmantle_transcriptome=/gscratch/srlab/sam/data/O_lurida/transcriptomes/Olurida_CA_mantle_Trinity.fasta\n\n\n### Path to Crassotrea gigas NCBI protein FastA\ngigas_proteome=/gscratch/srlab/sam/data/C_gigas/gigas_ncbi_protein/GCA_000297895.1_oyster_v9_protein.faa\n\n### Path to Crassostrea virginica NCBI protein FastA\nvirginica_proteome=/gscratch/srlab/sam/data/C_virginica/virginica_ncbi_protein/GCF_002022765.2_C_virginica-3.0_protein.faa\n\n\n### Path to O.lurida-specific RepeatModeler library\nrepeat_library=/gscratch/srlab/sam/data/O_lurida/repeats/Ostrea_lurida_v081-families.fa\n\n### Path to O.lurida-specific RepeatMasker GFF\nrm_gff=/gscratch/srlab/sam/data/O_lurida/repeats/Olurida_v081.fa.out.gff\n\n### Path to SwissProt database for BLASTp\nsp_db_blastp=/gscratch/srlab/blastdbs/UniProtKB_20190109/uniprot_sprot.fasta\n\n\n## Make directories\nmkdir blastp_annotation\nmkdir interproscan_annotation\nmkdir snap01\nmkdir snap02\n\n\n## Create Maker control files needed for running Maker, only if it doesn't already exist and then edit it.\n### Edit options file\n### Set paths to O.lurida genome and transcriptome.\n### Set paths to C. gigas and C.virginica proteomes.\n### The use of the % symbol sets the delimiter sed uses for arguments.\n### Normally, the delimiter that most examples use is a slash \"/\".\n### But, we need to expand the variables into a full path with slashes, which screws up sed.\n### Thus, the use of % symbol instead (it could be any character that is NOT present in the expanded variable; doesn't have to be \"%\").\nif [ ! -e maker_opts.ctl ]; then\n  $maker -CTL\n  sed -i \"/^genome=/ s% %$genome %\" \"$maker_opts_file\"\n\n  # Set transcriptomes to use\n  sed -i \"/^est=/ s% %\\\n  ${adductor_transcriptome},\\\n  ${ctendia_transcriptome},\\\n  ${gonad_transcriptome},\\\n  ${mantle_transcriptome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set proteomes to use\n  sed -i \"/^protein=/ s% %\\\n  ${gigas_proteome},\\\n  ${virginica_proteome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set RepeatModeler library to use\n  sed -i \"/^rmlib=/ s% %$repeat_library %\" \"$maker_opts_file\"\n\n  # Set RepeatMasker GFF to use\n  sed -i \"/^rm_gff=/ s% %${rm_gff} %\" \"$maker_opts_file\"\n\n  # Set est2ggenome to 1 - tells MAKER to use transcriptome FastAs\n  sed -i \"/^est2genome=0/ s/est2genome=0/est2genome=1/\" \"$maker_opts_file\"\n\n  # Set protein2genome to 1 - tells MAKER to use protein FastAs\n  sed -i \"/^protein2genome=0/ s/protein2genome=0/protein2genome=1/\" \"$maker_opts_file\"\nfi\n\n\n## Run Maker\n### Specify number of nodes to use.\nmpiexec -n 56 $maker\n\n## Merge gffs\n${gff3_merge} -d Olurida_v081.maker.output/Olurida_v081_master_datastore_index.log\n\n## GFF with no FastA in footer\n${gff3_merge} -n -s -d Olurida_v081.maker.output/Olurida_v081_master_datastore_index.log > Olurida_v081.maker.all.noseqs.gff\n\n## Merge all FastAs\n${fasta_merge} -d Olurida_v081.maker.output/Olurida_v081_master_datastore_index.log\n\n## Extract GFF alignments for use in subsequent MAKER rounds\n### Transcript alignments\nawk '{ if ($2 == \"est2genome\") print $0 }' Olurida_v081.maker.all.noseqs.gff > Olurida_v081.maker.all.noseqs.est2genome.gff\n### Protein alignments\nawk '{ if ($2 == \"protein2genome\") print $0 }' Olurida_v081.maker.all.noseqs.gff > Olurida_v081.maker.all.noseqs.protein2genome.gff\n### Repeat alignments\nawk '{ if ($2 ~ \"repeat\") print $0 }' Olurida_v081.maker.all.noseqs.gff > Olurida_v081.maker.all.noseqs.repeats.gff\n\n## Run SNAP training, round 1\ncd \"${wd}\"\ncd snap01\n${maker2zff} ../Olurida_v081.all.gff\n${fathom} -categorize 1000 genome.ann genome.dna\n${fathom} -export 1000 -plus uni.ann uni.dna\n${forge} export.ann export.dna\n${hmmassembler} genome . > Olurida_v081_snap01.hmm\n\n## Initiate second Maker run.\n### Copy initial maker control files and\n### Default gene prediction settings are 0 (i.e. don't generate Maker gene predictions)\n### - use GFF subsets generated in first round of MAKER\n### - set location of snaphmm file to use for gene prediction\n### Percent symbols used below are the sed delimiters, instead of the default \"/\",\n### due to the need to use file paths.\nif [ ! -e maker_opts.ctl ]; then\n  $maker -CTL\n  sed -i \"/^genome=/ s% %$genome %\" maker_opts.ctl\n\n  # Set transcriptomes to use\n  sed -i \"/^est=/ s% %\\\n  ${adductor_transcriptome},\\\n  ${ctendia_transcriptome},\\\n  ${gonad_transcriptome},\\\n  ${mantle_transcriptome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set proteomes to use\n  sed -i \"/^protein=/ s% %\\\n  ${gigas_proteome},\\\n  ${virginica_proteome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set RepeatModeler library to use\n  sed -i \"/^rmlib=/ s% %$repeat_library %\" \"$maker_opts_file\"\n\n  sed -i \"/^est_gff=/ s% %../Olurida_v081.maker.all.noseqs.est2genome.gff %\" maker_opts.ctl\n  sed -i \"/^protein_gff=/ s% %../Olurida_v081.maker.all.noseqs.protein2genome.gff %\" maker_opts.ctl\n  sed -i \"/^rm_gff=/ s% %../Olurida_v081.maker.all.noseqs.repeats.gff %\" maker_opts.ctl\n  sed -i \"/^snaphmm=/ s% %Olurida_v081_snap01.hmm %\" maker_opts.ctl\nfi\n\n## Run Maker\n### Set basename of files and specify number of CPUs to use\nmpiexec -n 56 $maker \\\n-base Olurida_v081_snap01\n\n## Merge gffs\n${gff3_merge} -d Olurida_v081_snap01.maker.output/Olurida_v081_snap01_master_datastore_index.log\n\n## GFF with no FastA in footer\n${gff3_merge} -n -s -d Olurida_v081_snap01.maker.output/Olurida_v081_snap01_master_datastore_index.log > Olurida_v081_snap01.maker.all.noseqs.gff\n\n## Run SNAP training, round 2\ncd \"${wd}\"\ncd snap02\n${maker2zff} ../snap01/Olurida_v081_snap01.all.gff\n${fathom} -categorize 1000 genome.ann genome.dna\n${fathom} -export 1000 -plus uni.ann uni.dna\n${forge} export.ann export.dna\n${hmmassembler} genome . > Olurida_v081_snap02.hmm\n\n## Initiate third and final Maker run.\n\nif [ ! -e maker_opts.ctl ]; then\n  $maker -CTL\n  sed -i \"/^genome=/ s% %$genome %\" maker_opts.ctl\n\n  # Set transcriptomes to use\n  sed -i \"/^est=/ s% %\\\n  ${adductor_transcriptome},\\\n  ${ctendia_transcriptome},\\\n  ${gonad_transcriptome},\\\n  ${mantle_transcriptome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set proteomes to use\n  sed -i \"/^protein=/ s% %\\\n  ${gigas_proteome},\\\n  ${virginica_proteome} \\\n  %\" \\\n  \"$maker_opts_file\"\n\n  # Set RepeatModeler library to use\n  sed -i \"/^rmlib=/ s% %$repeat_library %\" \"$maker_opts_file\"\n\n  sed -i \"/^est_gff=/ s% %../Olurida_v081.maker.all.noseqs.est2genome.gff %\" maker_opts.ctl\n  sed -i \"/^protein_gff=/ s% %../Olurida_v081.maker.all.noseqs.protein2genome.gff %\" maker_opts.ctl\n  sed -i \"/^rm_gff=/ s% %../Olurida_v081.maker.all.noseqs.repeats.gff %\" maker_opts.ctl\n  sed -i \"/^snaphmm=/ s% %Olurida_v081_snap02.hmm %\" maker_opts.ctl\nfi\n\n## Run Maker\n### Set basename of files and specify number of CPUs to use\nmpiexec -n 56 $maker \\\n-base Olurida_v081_snap02\n\n## Merge gffs\n${gff3_merge} \\\n-d Olurida_v081_snap02.maker.output/Olurida_v081_snap02_master_datastore_index.log\n\n## GFF with no FastA in footer\n${gff3_merge} -n -s -d Olurida_v081_snap02.maker.output/Olurida_v081_snap02_master_datastore_index.log > Olurida_v081_snap02.maker.all.noseqs.gff\n\n## Merge FastAs\n${fasta_merge} \\\n-d Olurida_v081_snap02.maker.output/Olurida_v081_snap02_master_datastore_index.log\n\n# Create copies of files for mapping\ncp \"${maker_prot_fasta}\" \"${maker_prot_fasta_renamed}\"\ncp \"${maker_transcripts_fasta}\" \"${maker_transcripts_fasta_renamed}\"\ncp \"${snap02_gff}\" \"${snap02_gff_renamed}\"\n\n# Map IDs\n## Change gene names\n${map_ids} \\\n--prefix OLUR_ \\\n--justify 8 \\\n\"${snap02_gff}\" \\\n> \"${id_map}\"\n\n## Map GFF IDs\n${map_gff_ids} \\\n\"${id_map}\" \\\n\"${snap02_gff_renamed}\"\n\n## Map FastAs\n### Proteins\n${map_fasta_ids} \\\n\"${id_map}\" \\\n\"${maker_prot_fasta_renamed}\"\n\n### Transcripts\n${map_fasta_ids} \\\n\"${id_map}\" \\\n\"${maker_transcripts_fasta_renamed}\"\n\n# Run InterProScan 5\n## disable-precalc since this requires external database access (which Mox does not allow)\ncd \"${ips_dir}\"\n\n${interproscan} \\\n--input \"${maker_prot_fasta_renamed}\" \\\n--goterms \\\n--output-file-base ${ips_base} \\\n--disable-precalc\n\n# Run BLASTp\ncd \"${blastp_dir}\"\n\n${blastp} \\\n-query \"${maker_prot_fasta_renamed}\" \\\n-db ${sp_db_blastp} \\\n-out \"${maker_blastp}\" \\\n-max_target_seqs 1 \\\n-evalue 1e-6 \\\n-outfmt 6 \\\n-num_threads 28\n\n\n# Functional annotations\n\ncd \"${wd}\"\n\n## Add putative gene functions\n### GFF\n${functional_gff} \\\n${sp_db_blastp} \\\n\"${maker_blastp}\" \\\n\"${snap02_gff_renamed}\" \\\n> ${put_func_gff}\n\n### Proteins\n${functional_fasta} \\\n${sp_db_blastp} \\\n\"${maker_blastp}\" \\\n\"${maker_prot_fasta_renamed}\" \\\n> ${put_func_prot}\n\n### Transcripts\n${functional_fasta} \\\n${sp_db_blastp} \\\n\"${maker_blastp}\" \\\n\"${maker_transcripts_fasta_renamed}\" \\\n> ${put_func_trans}\n\n## Add InterProScan domain info\n### Add searchable tags\n${ipr_update_gff} \\\n${put_func_gff} \\\n\"${ips_dir}\"/${ips_name} \\\n> ${put_domain_gff}\n\n### Add viewable features for genome browsers (JBrowse, Gbrowse, Web Apollo)\n${iprscan2gff3} \\\n\"${ips_dir}\"/${ips_name} \\\n\"${snap02_gff_renamed}\" \\\n> ${ips_domains}\n\n# Create individual GFFs\n\nawk 'BEGIN { print \"##gff-version 3\" ; } $3 == \"CDS\" {print}' \\\n${put_domain_gff} \\\n> Olurida_v081-20190709.CDS.gff\n\nawk 'BEGIN { print \"##gff-version 3\" ; } $3 == \"exon\" {print}' \\\n${put_domain_gff} \\\n> Olurida_v081-20190709.exon.gff\n\nawk 'BEGIN { print \"##gff-version 3\" ; } $3 == \"gene\" {print}' \\\n${put_domain_gff} \\\n> Olurida_v081-20190709.gene.gff\n\nawk 'BEGIN { print \"##gff-version 3\" ; } $3 == \"mRNA\" {print}' \\\n${put_domain_gff} \\\n> Olurida_v081-20190709.mRNA.gff\n```\n\n---\n\n# RESULTS\n\nThis took ~5.75 days to run:\n\n![Screencap of Olurida_v081 annotation runtime](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20190709_maker_olur81_runtime.png?raw=true)\n\nOutput folder:\n\n- [20190709_maker_olur_v081_annotation/](https://gannet.fish.washington.edu/Atumefaciens/20190709_maker_olur_v081_annotation/)\n\nThe important files:\n\n- [Olurida_v081_genome_snap02.all.renamed.putative_function.domain_added.gff](https://gannet.fish.washington.edu/Atumefaciens/20190709_maker_olur_v081_annotation/Olurida_v081_genome_snap02.all.renamed.putative_function.domain_added.gff) (2.9GB)\n  - GFF file with all contigs annotated with putative functions and functional domains.\n  - _INCLUDES SEQUENCE FASTAS AT END OF FILE!_\n  - Generated with one round of MAKER gene prediction, followed by two rounds of SNAP _ab-initio_ gene prediction.\n  - MD5: `f54512bd964f45645c34b1e8e403a2b0`\n\n\n- [Olurida_v081_genome_snap02.all.maker.proteins.renamed.putative_function.fasta](https://gannet.fish.washington.edu/Atumefaciens/20190709_maker_olur_v081_annotation/Olurida_v081.all.maker.proteins.fasta) (1.1MB)\n  - Annotated proteins FastA file.\n  - Generated with one round of MAKER gene prediction, followed by two rounds of SNAP _ab-initio_ gene prediction.\n\n\n- [Olurida_v081_genome_snap02.all.maker.transcripts.renamed.putative_function.fasta](https://gannet.fish.washington.edu/Atumefaciens/20190709_maker_olur_v081_annotation/Olurida_v081.all.maker.transcripts.fasta) (2.9MB)\n  - Annotated transcripts FastA file.\n  - Generated with one round of MAKER gene prediction, followed by two rounds of SNAP _ab-initio_ gene prediction.\n\nAll the GFF files have been added to our [Genomic Resources wiki](https://github.com/RobertsLab/resources/wiki/Genomic-Resources) (GitHub).\n\n- CDS GFF:\n\n  - [Olurida_v081-20190709.CDS.gff](http://owl.fish.washington.edu/halfshell/genomic-databank/Olurida_v081-20190709.CDS.gff) (1.3MB)\n  - MD5: `eaf22c9868577539238a1b4c378e9200`\n\n\n- exon GFF:\n\n  - [Olurida_v081-20190709.exon.gff](http://owl.fish.washington.edu/halfshell/genomic-databank/Olurida_v081-20190709.exon.gff) (1.4MB)\n  - MD5: `748d596b07f1b2b18c567494f7d1c5b3`\n\n- gene GFF:\n\n  - [Olurida_v081-20190709.gene.gff](http://owl.fish.washington.edu/halfshell/genomic-databank/Olurida_v081-20190709.gene.gff)\n  - MD5: `6ec24727d92cc095ece0c371eb3b0c6b`\n\n\n- mRNA GFF:\n\n  - [Olurida_v081-20190709.mRNA.gff](http://owl.fish.washington.edu/halfshell/genomic-databank/Olurida_v081-20190709.mRNA.gff)\n  - MD5: `ba915ec3a59ee6ff3b7d5e37b5d0463d`\n\n  ---\n\nA quick `grep -c \">\" Olurida_v081_genome_snap02.all.maker.transcripts.renamed.putative_function.fasta`reveals:\n\n- 32,210 proteins/transcripts\n\nThe previous annotation (`grep -c \">\" 20181127_oly_genome_snap02.all.maker.transcripts.renamed.putative_function.fasta`) yielded:\n\n- 24,680 proteins/transcripts\n\nThat's ~30% increase in transcripts that have been ID'd/annotated with this particular MAKER set up. However, just as before, MAKER doesn't ID/annotate any potential isoforms. I'll probably run Stringtie with this annotation to get that info.\n\nHere are some example comparisons in Integrated Genome Viewer (IGV) of the two annotations. Blue tracks are the current v081 annotation and the pink tracks are the original v081 annotation:\n\n#### Annotations are the same\n\n![IGV screencap showing same annotations between original v081 and current v081 annotations](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20190709_maker_olur_v081_igv_comparisons-01.png?raw=true)\n\n---\n\n#### Current annotation has additional features\n\n##### Also exhibits slight differences in gene lengths\n\n![IGV screencap showing additional annotations in current v081](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20190709_maker_olur_v081_igv_comparisons-02.png?raw=true)\n\n---\n\n#### Annotations differ in gene/CDS annotation\n\n![IGV screencap showing differences in gene/CDS annotation](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20190709_maker_olur_v081_igv_comparisons-03.png?raw=true)\n\n---\n\nSo, what does this mean? Well, firstly, it's a bit difficult to compare both annotations, as they differed slightly in the way they were run; and not just differences in utilizing a \"canonical\" transcriptome vs. tissue-specific transcriptomes for the EST evidence. The only way to perform a true comparison would be to re-run the original annotation and make the necessary changes so that all the commands match this, but utilize the \"canonical\" transcriptome.\n\nAnother step we could take is attempting to improve the annotations by adding Augustus _ab initio_ gene prediction to the MAKER annotation. Having a third component for gene prediction would likely bolster results and improve our confidence in the annotations.\n\nAdditionally, an aspect that shouldn't be ignored is examing the Annotation Edit Distance (AED). This value ranges from 0 - 1, with 0 being the _highest_ confidence in gene annotation. Each entry in the GFF files has an associated AED score. We could decide on a threshold and filter out low scoring features; how we'd decide on that threshold is not currently clear to me, though. This paper provides a nice overview of how genome annotation works, what the AED is, tools for annotation and gene prediction, etc.:\n\n- [Yandell, M. and Ence. D. A beginner’s guide to eukaryotic genome annotation. Nature Reviews Genetics 13, 329-342 (2012).](http://www.yandell-lab.org/publications/pdf/euk_genome_annotation_review.pdf) (PDF)\n\nFinally, we could also use \"old school\" bench approaches and do some physical cloning/sequencing of regions of the genome and see how the annotations compare to the actual sequencing data we get back, or some RT-qPCRs on genes with two apparent differences in coding sequence features and see if one (or both!) amplifies.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Genome Annotation - Olurida_v081 with MAKER and Tissue-specific Transcriptomes on Mox","date":"2019-07-09 07:56","tags":["Olurida v081","v081","Ostrea lurida","Olympia oyster","mox","MAKER","annotation"],"categories":["2019","Olympia Oyster Genome Sequencing"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}