{"title":"Trimming - P.evermanni WGBS Trimming and QC with fastp FastQC and MultiQC for E5 timeseries_molecular Project","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","title":"Trimming - P.evermanni WGBS Trimming and QC with fastp FastQC and MultiQC for E5 timeseries_molecular Project","date":"2025-02-12","draft":false,"engine":"knitr","categories":["2025","Porites evermanni","E5","WGBS","bisulfite sequencing","FastQC","MultiQC","fastp","trimming","timeseries_molecular","coral"]},"headingText":"INTRO","containsRefs":false,"markdown":"\n\nI [previously ran FastQC and MultiQC quality checks (20250210)](../2025-02-10-FastQC-MultiQC---P.evermanni-Raw-WGBS-Renaming-and-FastQC-MultiQC-E5-timeseries_molecular-Project/index.qmd) (Notebook) on the _P.evermanni_ raw whole genome bisulfite sequencing (WGBS) data [received 20241230](../../2024/2024-12-30-Data-Received---Coral-E5-WGBS-Time-Series-from-Azenta-Project-30-1067895835/index.qmd) (Notebook), as part of [urol-e5/timeseries_molecular](https://github.com/urol-e5/timeseries_molecular) (GitHub repo).\n\n::: {.callout-tip}\nThese are _directional_ libraries - important info for downstream analysis.\n:::\n\n::: {.callout-note}\nThe contents below are from markdown knitted from [`01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC.Rmd`](https://github.com/urol-e5/timeseries_molecular/blob/66c07f6344a6a3fc0c56946269d80420fc54c60b/E-Peve/code/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC.Rmd) (commit `66c07f6`).\n:::\n\n\n# 1 Background\n\nThis notebook will download raw WGBS FastQs, concatenate them (there\nwere multiple lanes run), and then trim them using\n[fastp](https://github.com/OpenGene/fastp) (Chen 2023). Samples which\ngenerate an error during trimming will attempt to be repaired using\n[BBTools\n`repairl.sh`](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/)\n(BBMap – Bushnell B. – sourceforge.net/projects/bbmap/). Trimming\nresults will be analyzed with FastQC and summarized by\n[MultiQC](https://github.com/MultiQC/MultiQC) (Ewels et al. 2016).\n\n<div class=\"callout-note\">\n\nIf you need to download the raw sequencing reads, please see\n[00.20-E-Peve-WGBS-reads-FastQC-MultiQC.Rmd](https://github.com/urol-e5/timeseries_molecular/blob/e05febcc9105afaf086c573368e15b7228d2cbaf/E-Peve/code/00.20-E-Peve-WGBS-reads-FastQC-MultiQC.Rmd)\n\n</div>\n\n## 1.1 Inputs\n\nRaw FastQ files with the following pattern:\n\n- `*.fastq.gz`\n\n## 1.2 Outputs\n\nThe expected outputs will be:\n\n- `multiqc_report.html`: A summary report of the alignment results\n  generated by [MultiQC](https://github.com/MultiQC/MultiQC), in HTML\n  format.\n\n- `*fastp-trim*.fq.gz`: Trimmed FastQ files.\n\n  - Due to the large file sizes of FastQs, these cannot be hosted in the\n    [urol-e5/timeseries_molecular GitHub\n    repo](https://github.com/urol-e5/timeseries_molecular). As such\n    these files are available for download here:\n\n    - <https://gannet.fish.washington.edu/gitrepos/urol-e5/timeseries_molecular/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC/>\n\n# 2 Create a Bash variables file\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"# Data directories\"\necho 'export repo_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular'\necho 'export output_dir_top=${repo_dir}/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC'\necho 'export raw_reads_dir=\"${repo_dir}/E-Peve/data/wgbs-raw-fastqs\"'\necho 'export trimmed_fastqs_dir=\"${output_dir_top}\"'\necho \"\"\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export bbmap_repair=\"${programs_dir}/bbmap-39.12/repair.sh\"'\necho 'export bismark_dir=\"${programs_dir}/Bismark-0.24.0\"'\necho 'export bowtie2_dir=\"${programs_dir}/bowtie2-2.4.4-linux-x86_64\"'\necho 'export fastp=\"${programs_dir}/fastp-v0.24.0/fastp\"'\necho 'export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"'\necho 'export multiqc=\"/home/sam/programs/mambaforge/bin/multiqc\"'\necho 'export samtools_dir=\"${programs_dir}/samtools-1.12\"'\necho \"\"\n\n\necho \"# Set FastQ filename patterns\"\necho \"export fastq_pattern='*.fastq.gz'\"\necho \"export R1_fastq_pattern='*_R1_*.fastq.gz'\"\necho \"export R2_fastq_pattern='*_R2_*.fastq.gz'\"\necho \"export trimmed_fastq_pattern='*fastp-trim*.fq.gz'\"\necho \"\"\n\necho \"# Set number of CPUs to use\"\necho 'export threads=40'\necho \"\"\n\n\necho \"## Inititalize arrays\"\necho 'export fastq_array_R1=()'\necho 'export fastq_array_R2=()'\necho 'export trimmed_fastqs_array=()'\necho 'export R1_names_array=()'\necho 'export R2_names_array=()'\necho \"\"\n\necho \"# Print formatting\"\necho 'export line=\"--------------------------------------------------------\"'\necho \"\"\n} > .bashvars\n\ncat .bashvars\n```\n\n    #### Assign Variables ####\n\n    # Data directories\n    export repo_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular\n    export output_dir_top=${repo_dir}/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC\n    export raw_reads_dir=\"${repo_dir}/E-Peve/data/wgbs-raw-fastqs\"\n    export trimmed_fastqs_dir=\"${output_dir_top}\"\n\n    # Paths to programs\n    export programs_dir=\"/home/shared\"\n    export bbmap_repair=\"${programs_dir}/bbmap-39.12/repair.sh\"\n    export bismark_dir=\"${programs_dir}/Bismark-0.24.0\"\n    export bowtie2_dir=\"${programs_dir}/bowtie2-2.4.4-linux-x86_64\"\n    export fastp=\"${programs_dir}/fastp-v0.24.0/fastp\"\n    export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"\n    export multiqc=\"/home/sam/programs/mambaforge/bin/multiqc\"\n    export samtools_dir=\"${programs_dir}/samtools-1.12\"\n\n    # Set FastQ filename patterns\n    export fastq_pattern='*.fastq.gz'\n    export R1_fastq_pattern='*_R1_*.fastq.gz'\n    export R2_fastq_pattern='*_R2_*.fastq.gz'\n    export trimmed_fastq_pattern='*fastp-trim*.fq.gz'\n\n    # Set number of CPUs to use\n    export threads=40\n\n    ## Inititalize arrays\n    export fastq_array_R1=()\n    export fastq_array_R2=()\n    export trimmed_fastqs_array=()\n    export R1_names_array=()\n    export R2_names_array=()\n\n    # Print formatting\n    export line=\"--------------------------------------------------------\"\n\n# 3 Trimming and Error Repair\n\nTrimming will remove any Illumina sequencing adapters, as well as polyG\nand polyX (primarily polyA) sequences. Trimming will also remove the\nfirst 15bp from the 5’ end of each read - this is based on\nFastQC/MultiQC assessment of raw reads.\n\nSamples generating an error during trimming will attempt to be repaired\nwith BBTools’ `repair.sh` script.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make output directory, if it doesn't exist\nmkdir --parents ${output_dir_top}\n\ncd \"${raw_reads_dir}\"\n\n\n# Create arrays of fastq R1 files and sample names\n# Do NOT quote R1_fastq_pattern variable\n\nfor fastq in ${R1_fastq_pattern}\ndo\n  fastq_array_R1+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R1_names_array+=(\"${fastq%%.*}\")\ndone\n\n# Create array of fastq R2 files\n# Do NOT quote R2_fastq_pattern variable\nfor fastq in ${R2_fastq_pattern}\ndo\n  fastq_array_R2+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R2_names_array+=(${fastq%%.*})\ndone\n\n\n\n# Run fastp on files\n# Adds JSON report output for downstream usage by MultiQC\n\necho \"Beginning fastp trimming.\"\necho \"-------------------------------------------------\"\necho \"\"\n\nfor index in \"${!fastq_array_R1[@]}\"\ndo\n  R1_sample_name=\"${R1_names_array[index]}\"\n  R2_sample_name=\"${R2_names_array[index]}\"\n  \n  stderr_PE_name=$(echo ${R1_sample_name} | awk -F\"_\" '{print $1}')\n  \n  ${fastp} \\\n  --in1 ${fastq_array_R1[index]} \\\n  --in2 ${fastq_array_R2[index]} \\\n  --detect_adapter_for_pe \\\n  --trim_poly_g \\\n  --trim_poly_x \\\n  --thread 16 \\\n  --trim_front1 15 \\\n  --trim_front2 15 \\\n  --html ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.report.html \\\n  --json ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.report.json \\\n  --out1 ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.fq.gz \\\n  --out2 ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.fq.gz \\\n  2> ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr\n  \n  # Check for errors in fastp stderr\n  grep --before-context 5 \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr\n  \n  # Check for fastp errors and then repair\n  if grep --quiet \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr; then\n      \n    rm ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.fq.gz\n    rm ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.fq.gz\n    \n    \n    ${bbmap_repair} \\\n    in1=${fastq_array_R1[index]} \\\n    in2=${fastq_array_R2[index]} \\\n    out1=\"${R1_sample_name}\".REPAIRED.fastq.gz \\\n    out2=\"${R2_sample_name}\".REPAIRED.fastq.gz \\\n    outs=/dev/null \\\n    2> \"${R1_sample_name}\".REPAIRED.stderr\n    \n    ${fastp} \\\n    --in1 \"${R1_sample_name}\".REPAIRED.fastq.gz \\\n    --in2 \"${R2_sample_name}\".REPAIRED.fastq.gz \\\n    --detect_adapter_for_pe \\\n    --trim_poly_g \\\n    --trim_poly_x \\\n    --thread 16 \\\n    --trim_front1 10 \\\n    --trim_front2 10 \\\n    --html ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.report.html \\\n    --json ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.report.json \\\n    --out1 ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.fq.gz \\\n    --out2 ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.REPAIRED.fq.gz \\\n    2> ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.REPAIRED.stderr\n \n    \n    if grep --quiet \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.REPAIRED.stderr; then\n      echo \"These ${stderr_PE_name} samples are broken.\"\n      echo \"Just give up.  :(\"\n      echo \"\"\n    fi\n  fi\n\n  echo \"Finished trimming:\"\n  echo \"${fastq_array_R1[index]}\"\n  echo \"${fastq_array_R2[index]}\"\n  echo \"\"\n  \n  # Generate md5 checksums for newly trimmed files\n  cd \"${output_dir_top}\"\n  md5sum \"${R1_sample_name}\".fastp-trim.fq.gz > \"${R1_sample_name}\".fastp-trim.fq.gz.md5\n  md5sum \"${R2_sample_name}\".fastp-trim.fq.gz > \"${R2_sample_name}\".fastp-trim.fq.gz.md5\n  \n  cd \"${raw_reads_dir}\"\ndone\n```\n\n    Beginning fastp trimming.\n    -------------------------------------------------\n\n    Finished trimming:\n    POR-216-TP1_R1_001.fastq.gz\n    POR-216-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-216-TP2_R1_001.fastq.gz\n    POR-216-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-216-TP3_R1_001.fastq.gz\n    POR-216-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-216-TP4_R1_001.fastq.gz\n    POR-216-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-236-TP1_R1_001.fastq.gz\n    POR-236-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-236-TP2_R1_001.fastq.gz\n    POR-236-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-245-TP1_R1_001.fastq.gz\n    POR-245-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-245-TP2_R1_001.fastq.gz\n    POR-245-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-245-TP3_R1_001.fastq.gz\n    POR-245-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-245-TP4_R1_001.fastq.gz\n    POR-245-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-260-TP1_R1_001.fastq.gz\n    POR-260-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-260-TP2_R1_001.fastq.gz\n    POR-260-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-260-TP3_R1_001.fastq.gz\n    POR-260-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-260-TP4_R1_001.fastq.gz\n    POR-260-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-262-TP1_R1_001.fastq.gz\n    POR-262-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-262-TP2_R1_001.fastq.gz\n    POR-262-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-262-TP4_R1_001.fastq.gz\n    POR-262-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-69-TP1_R1_001.fastq.gz\n    POR-69-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-69-TP2_R1_001.fastq.gz\n    POR-69-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-69-TP3_R1_001.fastq.gz\n    POR-69-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-69-TP4_R1_001.fastq.gz\n    POR-69-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-72-TP1_R1_001.fastq.gz\n    POR-72-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-72-TP2_R1_001.fastq.gz\n    POR-72-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-72-TP3_R1_001.fastq.gz\n    POR-72-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-72-TP4_R1_001.fastq.gz\n    POR-72-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-73-TP1_R1_001.fastq.gz\n    POR-73-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-73-TP2_R1_001.fastq.gz\n    POR-73-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-73-TP3_R1_001.fastq.gz\n    POR-73-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-74-TP1_R1_001.fastq.gz\n    POR-74-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-74-TP2_R1_001.fastq.gz\n    POR-74-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-74-TP3_R1_001.fastq.gz\n    POR-74-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-74-TP4_R1_001.fastq.gz\n    POR-74-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-83-TP1_R1_001.fastq.gz\n    POR-83-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-83-TP2_R1_001.fastq.gz\n    POR-83-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-83-TP3_R1_001.fastq.gz\n    POR-83-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-83-TP4_R1_001.fastq.gz\n    POR-83-TP4_R2_001.fastq.gz\n\n# 4 FastQC\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${output_dir_top}\"\n\n############ RUN FASTQC ############\n\n\n# Create array of trimmed FastQs\ntrimmed_fastqs_array=(${trimmed_fastq_pattern})\n\n# Pass array contents to new variable as space-delimited list\ntrimmed_fastqc_list=$(echo \"${trimmed_fastqs_array[*]}\")\n\necho \"Beginning FastQC on trimmed reads...\"\necho \"\"\n\n# Run FastQC\n### NOTE: Do NOT quote raw_fastqc_list\n${fastqc} \\\n--threads ${threads} \\\n--outdir \"${output_dir_top}\" \\\n--quiet \\\n${trimmed_fastqc_list}\n\necho \"FastQC on trimmed reads complete!\"\necho \"\"\n\n############ END FASTQC ############\n```\n\n    Beginning FastQC on trimmed reads...\n\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    FastQC on trimmed reads complete!\n\n# 5 MultiQC\n\nUses `--cl-config \"sp: { fastp: { fn: '*report.json' } }\"` to update the\nMultiQC search pattern for the fastp module.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\ncd \"${output_dir_top}\"\n\n${multiqc} . \\\n--cl-config \"sp: { fastp: { fn: '*report.json' } }\" \\\n--interactive\n```\n\n      /// MultiQC 🔍 | v1.14\n\n    |           multiqc | MultiQC Version v1.27 now available!\n    |           multiqc | Search path : /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC\n    |         searching | ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 396/396  \n    |             fastp | Found 36 reports\n    |            fastqc | Found 72 reports\n    |           multiqc | Compressing plot data\n    |           multiqc | Report      : multiqc_report.html\n    |           multiqc | Data        : multiqc_data\n    |           multiqc | MultiQC complete\n\n# RESULTS\n\nOverall, trimming looks good. However, it's disappointing to see residual polyA contamination, despite specifying `--trim_poly_x` in the [`fastp`](https://github.com/OpenGene/fastp) arguments. The polyA contamination is likely RNA carried over from the DNA isolation prep. It shouldn't cause any issues, as RNA shouldn't end up aligning to the bisulfite-converted genome downstream.\n\n\nMultiQC report:\n\n- [01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC/multiqc_report.html](https://github.com/urol-e5/timeseries_molecular/blob/66c07f6344a6a3fc0c56946269d80420fc54c60b/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC/multiqc_report.html) (GitHub repo)\n\n![MultiQC screencap showing post trimming Sequence Content.](./20250212-peve-multiqc-plot-sequence-content.png){fig-alt=\"Screenshot of trimmed MultiQC per base sequence content plot showing low C content - indicative of directional WGBS libraries\"}\n\n\n![MultiQC screencap showing post trimming Adapter Content with residula polyA contamination.](./20250212-peve-multiqc-plot-adapter-content.png)\n\n# 6 REFERENCES\n\n<div id=\"refs\" class=\"references csl-bib-body hanging-indent\">\n\n<div id=\"ref-chen2023\" class=\"csl-entry\">\n\nChen, Shifu. 2023. “Ultrafast One-Pass FASTQ Data Preprocessing, Quality\nControl, and Deduplication Using Fastp.” *iMeta* 2 (2).\n<https://doi.org/10.1002/imt2.107>.\n\n</div>\n\n<div id=\"ref-ewels2016\" class=\"csl-entry\">\n\nEwels, Philip, Måns Magnusson, Sverker Lundin, and Max Käller. 2016.\n“MultiQC: Summarize Analysis Results for Multiple Tools and Samples in a\nSingle Report.” *Bioinformatics* 32 (19): 3047–48.\n<https://doi.org/10.1093/bioinformatics/btw354>.\n\n</div>\n\n</div>","srcMarkdownNoYaml":"\n# INTRO\n\nI [previously ran FastQC and MultiQC quality checks (20250210)](../2025-02-10-FastQC-MultiQC---P.evermanni-Raw-WGBS-Renaming-and-FastQC-MultiQC-E5-timeseries_molecular-Project/index.qmd) (Notebook) on the _P.evermanni_ raw whole genome bisulfite sequencing (WGBS) data [received 20241230](../../2024/2024-12-30-Data-Received---Coral-E5-WGBS-Time-Series-from-Azenta-Project-30-1067895835/index.qmd) (Notebook), as part of [urol-e5/timeseries_molecular](https://github.com/urol-e5/timeseries_molecular) (GitHub repo).\n\n::: {.callout-tip}\nThese are _directional_ libraries - important info for downstream analysis.\n:::\n\n::: {.callout-note}\nThe contents below are from markdown knitted from [`01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC.Rmd`](https://github.com/urol-e5/timeseries_molecular/blob/66c07f6344a6a3fc0c56946269d80420fc54c60b/E-Peve/code/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC.Rmd) (commit `66c07f6`).\n:::\n\n\n# 1 Background\n\nThis notebook will download raw WGBS FastQs, concatenate them (there\nwere multiple lanes run), and then trim them using\n[fastp](https://github.com/OpenGene/fastp) (Chen 2023). Samples which\ngenerate an error during trimming will attempt to be repaired using\n[BBTools\n`repairl.sh`](https://jgi.doe.gov/data-and-tools/software-tools/bbtools/)\n(BBMap – Bushnell B. – sourceforge.net/projects/bbmap/). Trimming\nresults will be analyzed with FastQC and summarized by\n[MultiQC](https://github.com/MultiQC/MultiQC) (Ewels et al. 2016).\n\n<div class=\"callout-note\">\n\nIf you need to download the raw sequencing reads, please see\n[00.20-E-Peve-WGBS-reads-FastQC-MultiQC.Rmd](https://github.com/urol-e5/timeseries_molecular/blob/e05febcc9105afaf086c573368e15b7228d2cbaf/E-Peve/code/00.20-E-Peve-WGBS-reads-FastQC-MultiQC.Rmd)\n\n</div>\n\n## 1.1 Inputs\n\nRaw FastQ files with the following pattern:\n\n- `*.fastq.gz`\n\n## 1.2 Outputs\n\nThe expected outputs will be:\n\n- `multiqc_report.html`: A summary report of the alignment results\n  generated by [MultiQC](https://github.com/MultiQC/MultiQC), in HTML\n  format.\n\n- `*fastp-trim*.fq.gz`: Trimmed FastQ files.\n\n  - Due to the large file sizes of FastQs, these cannot be hosted in the\n    [urol-e5/timeseries_molecular GitHub\n    repo](https://github.com/urol-e5/timeseries_molecular). As such\n    these files are available for download here:\n\n    - <https://gannet.fish.washington.edu/gitrepos/urol-e5/timeseries_molecular/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC/>\n\n# 2 Create a Bash variables file\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"# Data directories\"\necho 'export repo_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular'\necho 'export output_dir_top=${repo_dir}/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC'\necho 'export raw_reads_dir=\"${repo_dir}/E-Peve/data/wgbs-raw-fastqs\"'\necho 'export trimmed_fastqs_dir=\"${output_dir_top}\"'\necho \"\"\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export bbmap_repair=\"${programs_dir}/bbmap-39.12/repair.sh\"'\necho 'export bismark_dir=\"${programs_dir}/Bismark-0.24.0\"'\necho 'export bowtie2_dir=\"${programs_dir}/bowtie2-2.4.4-linux-x86_64\"'\necho 'export fastp=\"${programs_dir}/fastp-v0.24.0/fastp\"'\necho 'export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"'\necho 'export multiqc=\"/home/sam/programs/mambaforge/bin/multiqc\"'\necho 'export samtools_dir=\"${programs_dir}/samtools-1.12\"'\necho \"\"\n\n\necho \"# Set FastQ filename patterns\"\necho \"export fastq_pattern='*.fastq.gz'\"\necho \"export R1_fastq_pattern='*_R1_*.fastq.gz'\"\necho \"export R2_fastq_pattern='*_R2_*.fastq.gz'\"\necho \"export trimmed_fastq_pattern='*fastp-trim*.fq.gz'\"\necho \"\"\n\necho \"# Set number of CPUs to use\"\necho 'export threads=40'\necho \"\"\n\n\necho \"## Inititalize arrays\"\necho 'export fastq_array_R1=()'\necho 'export fastq_array_R2=()'\necho 'export trimmed_fastqs_array=()'\necho 'export R1_names_array=()'\necho 'export R2_names_array=()'\necho \"\"\n\necho \"# Print formatting\"\necho 'export line=\"--------------------------------------------------------\"'\necho \"\"\n} > .bashvars\n\ncat .bashvars\n```\n\n    #### Assign Variables ####\n\n    # Data directories\n    export repo_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular\n    export output_dir_top=${repo_dir}/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC\n    export raw_reads_dir=\"${repo_dir}/E-Peve/data/wgbs-raw-fastqs\"\n    export trimmed_fastqs_dir=\"${output_dir_top}\"\n\n    # Paths to programs\n    export programs_dir=\"/home/shared\"\n    export bbmap_repair=\"${programs_dir}/bbmap-39.12/repair.sh\"\n    export bismark_dir=\"${programs_dir}/Bismark-0.24.0\"\n    export bowtie2_dir=\"${programs_dir}/bowtie2-2.4.4-linux-x86_64\"\n    export fastp=\"${programs_dir}/fastp-v0.24.0/fastp\"\n    export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"\n    export multiqc=\"/home/sam/programs/mambaforge/bin/multiqc\"\n    export samtools_dir=\"${programs_dir}/samtools-1.12\"\n\n    # Set FastQ filename patterns\n    export fastq_pattern='*.fastq.gz'\n    export R1_fastq_pattern='*_R1_*.fastq.gz'\n    export R2_fastq_pattern='*_R2_*.fastq.gz'\n    export trimmed_fastq_pattern='*fastp-trim*.fq.gz'\n\n    # Set number of CPUs to use\n    export threads=40\n\n    ## Inititalize arrays\n    export fastq_array_R1=()\n    export fastq_array_R2=()\n    export trimmed_fastqs_array=()\n    export R1_names_array=()\n    export R2_names_array=()\n\n    # Print formatting\n    export line=\"--------------------------------------------------------\"\n\n# 3 Trimming and Error Repair\n\nTrimming will remove any Illumina sequencing adapters, as well as polyG\nand polyX (primarily polyA) sequences. Trimming will also remove the\nfirst 15bp from the 5’ end of each read - this is based on\nFastQC/MultiQC assessment of raw reads.\n\nSamples generating an error during trimming will attempt to be repaired\nwith BBTools’ `repair.sh` script.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make output directory, if it doesn't exist\nmkdir --parents ${output_dir_top}\n\ncd \"${raw_reads_dir}\"\n\n\n# Create arrays of fastq R1 files and sample names\n# Do NOT quote R1_fastq_pattern variable\n\nfor fastq in ${R1_fastq_pattern}\ndo\n  fastq_array_R1+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R1_names_array+=(\"${fastq%%.*}\")\ndone\n\n# Create array of fastq R2 files\n# Do NOT quote R2_fastq_pattern variable\nfor fastq in ${R2_fastq_pattern}\ndo\n  fastq_array_R2+=(\"${fastq}\")\n\n  # Use parameter substitution to remove all text up to and including last \".\" from\n  # right side of string.\n  R2_names_array+=(${fastq%%.*})\ndone\n\n\n\n# Run fastp on files\n# Adds JSON report output for downstream usage by MultiQC\n\necho \"Beginning fastp trimming.\"\necho \"-------------------------------------------------\"\necho \"\"\n\nfor index in \"${!fastq_array_R1[@]}\"\ndo\n  R1_sample_name=\"${R1_names_array[index]}\"\n  R2_sample_name=\"${R2_names_array[index]}\"\n  \n  stderr_PE_name=$(echo ${R1_sample_name} | awk -F\"_\" '{print $1}')\n  \n  ${fastp} \\\n  --in1 ${fastq_array_R1[index]} \\\n  --in2 ${fastq_array_R2[index]} \\\n  --detect_adapter_for_pe \\\n  --trim_poly_g \\\n  --trim_poly_x \\\n  --thread 16 \\\n  --trim_front1 15 \\\n  --trim_front2 15 \\\n  --html ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.report.html \\\n  --json ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.report.json \\\n  --out1 ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.fq.gz \\\n  --out2 ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.fq.gz \\\n  2> ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr\n  \n  # Check for errors in fastp stderr\n  grep --before-context 5 \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr\n  \n  # Check for fastp errors and then repair\n  if grep --quiet \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.stderr; then\n      \n    rm ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.fq.gz\n    rm ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.fq.gz\n    \n    \n    ${bbmap_repair} \\\n    in1=${fastq_array_R1[index]} \\\n    in2=${fastq_array_R2[index]} \\\n    out1=\"${R1_sample_name}\".REPAIRED.fastq.gz \\\n    out2=\"${R2_sample_name}\".REPAIRED.fastq.gz \\\n    outs=/dev/null \\\n    2> \"${R1_sample_name}\".REPAIRED.stderr\n    \n    ${fastp} \\\n    --in1 \"${R1_sample_name}\".REPAIRED.fastq.gz \\\n    --in2 \"${R2_sample_name}\".REPAIRED.fastq.gz \\\n    --detect_adapter_for_pe \\\n    --trim_poly_g \\\n    --trim_poly_x \\\n    --thread 16 \\\n    --trim_front1 10 \\\n    --trim_front2 10 \\\n    --html ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.report.html \\\n    --json ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.report.json \\\n    --out1 ${output_dir_top}/\"${R1_sample_name}\".fastp-trim.REPAIRED.fq.gz \\\n    --out2 ${output_dir_top}/\"${R2_sample_name}\".fastp-trim.REPAIRED.fq.gz \\\n    2> ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.REPAIRED.stderr\n \n    \n    if grep --quiet \"ERROR\" ${output_dir_top}/\"${stderr_PE_name}\".fastp-trim.REPAIRED.stderr; then\n      echo \"These ${stderr_PE_name} samples are broken.\"\n      echo \"Just give up.  :(\"\n      echo \"\"\n    fi\n  fi\n\n  echo \"Finished trimming:\"\n  echo \"${fastq_array_R1[index]}\"\n  echo \"${fastq_array_R2[index]}\"\n  echo \"\"\n  \n  # Generate md5 checksums for newly trimmed files\n  cd \"${output_dir_top}\"\n  md5sum \"${R1_sample_name}\".fastp-trim.fq.gz > \"${R1_sample_name}\".fastp-trim.fq.gz.md5\n  md5sum \"${R2_sample_name}\".fastp-trim.fq.gz > \"${R2_sample_name}\".fastp-trim.fq.gz.md5\n  \n  cd \"${raw_reads_dir}\"\ndone\n```\n\n    Beginning fastp trimming.\n    -------------------------------------------------\n\n    Finished trimming:\n    POR-216-TP1_R1_001.fastq.gz\n    POR-216-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-216-TP2_R1_001.fastq.gz\n    POR-216-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-216-TP3_R1_001.fastq.gz\n    POR-216-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-216-TP4_R1_001.fastq.gz\n    POR-216-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-236-TP1_R1_001.fastq.gz\n    POR-236-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-236-TP2_R1_001.fastq.gz\n    POR-236-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-245-TP1_R1_001.fastq.gz\n    POR-245-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-245-TP2_R1_001.fastq.gz\n    POR-245-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-245-TP3_R1_001.fastq.gz\n    POR-245-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-245-TP4_R1_001.fastq.gz\n    POR-245-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-260-TP1_R1_001.fastq.gz\n    POR-260-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-260-TP2_R1_001.fastq.gz\n    POR-260-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-260-TP3_R1_001.fastq.gz\n    POR-260-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-260-TP4_R1_001.fastq.gz\n    POR-260-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-262-TP1_R1_001.fastq.gz\n    POR-262-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-262-TP2_R1_001.fastq.gz\n    POR-262-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-262-TP4_R1_001.fastq.gz\n    POR-262-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-69-TP1_R1_001.fastq.gz\n    POR-69-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-69-TP2_R1_001.fastq.gz\n    POR-69-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-69-TP3_R1_001.fastq.gz\n    POR-69-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-69-TP4_R1_001.fastq.gz\n    POR-69-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-72-TP1_R1_001.fastq.gz\n    POR-72-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-72-TP2_R1_001.fastq.gz\n    POR-72-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-72-TP3_R1_001.fastq.gz\n    POR-72-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-72-TP4_R1_001.fastq.gz\n    POR-72-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-73-TP1_R1_001.fastq.gz\n    POR-73-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-73-TP2_R1_001.fastq.gz\n    POR-73-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-73-TP3_R1_001.fastq.gz\n    POR-73-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-74-TP1_R1_001.fastq.gz\n    POR-74-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-74-TP2_R1_001.fastq.gz\n    POR-74-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-74-TP3_R1_001.fastq.gz\n    POR-74-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-74-TP4_R1_001.fastq.gz\n    POR-74-TP4_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-83-TP1_R1_001.fastq.gz\n    POR-83-TP1_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-83-TP2_R1_001.fastq.gz\n    POR-83-TP2_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-83-TP3_R1_001.fastq.gz\n    POR-83-TP3_R2_001.fastq.gz\n\n    Finished trimming:\n    POR-83-TP4_R1_001.fastq.gz\n    POR-83-TP4_R2_001.fastq.gz\n\n# 4 FastQC\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${output_dir_top}\"\n\n############ RUN FASTQC ############\n\n\n# Create array of trimmed FastQs\ntrimmed_fastqs_array=(${trimmed_fastq_pattern})\n\n# Pass array contents to new variable as space-delimited list\ntrimmed_fastqc_list=$(echo \"${trimmed_fastqs_array[*]}\")\n\necho \"Beginning FastQC on trimmed reads...\"\necho \"\"\n\n# Run FastQC\n### NOTE: Do NOT quote raw_fastqc_list\n${fastqc} \\\n--threads ${threads} \\\n--outdir \"${output_dir_top}\" \\\n--quiet \\\n${trimmed_fastqc_list}\n\necho \"FastQC on trimmed reads complete!\"\necho \"\"\n\n############ END FASTQC ############\n```\n\n    Beginning FastQC on trimmed reads...\n\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    application/gzip\n    FastQC on trimmed reads complete!\n\n# 5 MultiQC\n\nUses `--cl-config \"sp: { fastp: { fn: '*report.json' } }\"` to update the\nMultiQC search pattern for the fastp module.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n\ncd \"${output_dir_top}\"\n\n${multiqc} . \\\n--cl-config \"sp: { fastp: { fn: '*report.json' } }\" \\\n--interactive\n```\n\n      /// MultiQC 🔍 | v1.14\n\n    |           multiqc | MultiQC Version v1.27 now available!\n    |           multiqc | Search path : /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC\n    |         searching | ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 396/396  \n    |             fastp | Found 36 reports\n    |            fastqc | Found 72 reports\n    |           multiqc | Compressing plot data\n    |           multiqc | Report      : multiqc_report.html\n    |           multiqc | Data        : multiqc_data\n    |           multiqc | MultiQC complete\n\n# RESULTS\n\nOverall, trimming looks good. However, it's disappointing to see residual polyA contamination, despite specifying `--trim_poly_x` in the [`fastp`](https://github.com/OpenGene/fastp) arguments. The polyA contamination is likely RNA carried over from the DNA isolation prep. It shouldn't cause any issues, as RNA shouldn't end up aligning to the bisulfite-converted genome downstream.\n\n\nMultiQC report:\n\n- [01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC/multiqc_report.html](https://github.com/urol-e5/timeseries_molecular/blob/66c07f6344a6a3fc0c56946269d80420fc54c60b/E-Peve/output/01.00-E-Peve-WGBS-trimming-fastp-FastQC-MultiQC/multiqc_report.html) (GitHub repo)\n\n![MultiQC screencap showing post trimming Sequence Content.](./20250212-peve-multiqc-plot-sequence-content.png){fig-alt=\"Screenshot of trimmed MultiQC per base sequence content plot showing low C content - indicative of directional WGBS libraries\"}\n\n\n![MultiQC screencap showing post trimming Adapter Content with residula polyA contamination.](./20250212-peve-multiqc-plot-adapter-content.png)\n\n# 6 REFERENCES\n\n<div id=\"refs\" class=\"references csl-bib-body hanging-indent\">\n\n<div id=\"ref-chen2023\" class=\"csl-entry\">\n\nChen, Shifu. 2023. “Ultrafast One-Pass FASTQ Data Preprocessing, Quality\nControl, and Deduplication Using Fastp.” *iMeta* 2 (2).\n<https://doi.org/10.1002/imt2.107>.\n\n</div>\n\n<div id=\"ref-ewels2016\" class=\"csl-entry\">\n\nEwels, Philip, Måns Magnusson, Sverker Lundin, and Max Käller. 2016.\n“MultiQC: Summarize Analysis Results for Multiple Tools and Samples in a\nSingle Report.” *Bioinformatics* 32 (19): 3047–48.\n<https://doi.org/10.1093/bioinformatics/btw354>.\n\n</div>\n\n</div>"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","title":"Trimming - P.evermanni WGBS Trimming and QC with fastp FastQC and MultiQC for E5 timeseries_molecular Project","date":"2025-02-12","draft":false,"categories":["2025","Porites evermanni","E5","WGBS","bisulfite sequencing","FastQC","MultiQC","fastp","trimming","timeseries_molecular","coral"]},"extensions":{"book":{"multiFile":true}}}},"draft":false,"projectFormats":["html"]}