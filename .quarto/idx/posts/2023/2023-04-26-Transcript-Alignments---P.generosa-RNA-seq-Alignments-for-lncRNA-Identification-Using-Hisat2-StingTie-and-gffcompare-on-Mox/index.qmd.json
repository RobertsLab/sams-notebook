{"title":"Transcript Alignments - P.generosa RNA-seq Alignments for lncRNA Identification Using Hisat2 StingTie and gffcompare on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Transcript Alignments - P.generosa RNA-seq Alignments for lncRNA Identification Using Hisat2 StingTie and gffcompare on Mox","date":"2023-04-26 14:20","categories":["gffcompare","mox","Panopea generosa","Pacific geoduck","lncRNA","StringTie","Hisat2","2023","Miscellaneous"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nThis is a continuation of the process for identification of lncRNAs,. I aligned FastQs which were [previously trimmed earlier today](../2023-04-26-FastQ-Trimming-and-QC---P.generosa-RNA-seq-Data-from-20220323-on-Mox/index.qmd) to our Panopea-generosa-v1.0 genome FastA using [`HISAT2`](https://daehwankimlab.github.io/hisat2/). I used the [`HISAT2`](https://daehwankimlab.github.io/hisat2/) genome index [created on 20190723](../../2019/2019-07-23-Genome-Annotation---Pgenerosa_v074-Hisat2-Transcript-Isoform-Index/index.qmd), which was created with options to identify exons and splice sites. The GFF used was [from 20220323](../../2022/2022-03-23-Differential-Gene-Expression---P.generosa-DGE-Between-Tissues-Using-Nextlow-NF-Core-RNAseq-Pipeline-on-Mox/index.qmd). [`StringTie`](https://ccb.jhu.edu/software/stringtie/) was used to identify alternative transcripts, assign expression values, and create expression tables for use with `ballgown`. The job was run on Mox.\n\nSLURM script posted below is very long. Skip to [RESULTS section](#results).\n\nSLURM script (GitHub):\n\n- [20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq.sh)\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=7-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq\n\n\n## Script for HiSat2 alignments to P.generosa genome assembly Panopea-generosa-v1.0, running Stringtie to identify splice sites and calculate gene/transcript\n##expression values (FPKM), formatted for import into Ballgown (R/Bioconductor), and gffcompare for GTF annotation.\n\n## Process is part of identification of long non-coding RNAs (lnRNA) in geoduck.\n\n## HiSat2 index generated on 20220914.\n## https://robertslab.github.io/sams-notebook/posts/2022/2022-09-14-RNAseq-Alignments---P.generosa-Alignments-and-Alternative-Transcript-Identification-Using-Hisat2-and-StringTie-on-Mox/\n\n## Using trimmed FastQs from 20230426.\n\n## Expects FastQ input filenames to match <sample name>_val_[12].fastp-trim.20230426.fq.gz\n## E.g. ctenidia_1_val_1.fastp-trim.20230426.fq.gz\n\n###################################################################################\n# These variables need to be set by user\n\n## Assign Variables\n\n# Set total number of SAMPLES (NOT number of FastQ files)\ntotal_samples=5\n\n# Set number of CPUs to use\nthreads=28\n\n# Index name for Hisat2 use\n# Needs to match index name used in previous Hisat2 indexing step\ngenome_index_name=\"Panopea-generosa-v1.0\"\n\n# Set input FastQ patterns\nR1_fastq_pattern='*_val_1*fq.gz'\nR2_fastq_pattern='*_val_2*fq.gz'\n\n# Location of Hisat2 index files\n# Must keep variable name formatting, as it's used by HiSat2\nHISAT2_INDEXES=$(pwd)\nexport HISAT2_INDEXES\n\n# Paths to programs\ngffcompare=\"/gscratch/srlab/programs/gffcompare-0.12.6.Linux_x86_64/gffcompare\"\nhisat2_dir=\"/gscratch/srlab/programs/hisat2-2.1.0\"\nhisat2=\"${hisat2_dir}/hisat2\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\nstringtie=\"/gscratch/srlab/programs/stringtie-2.2.1.Linux_x86_64/stringtie\"\n\n# Input files/directories\ngenome_index_dir=\"/gscratch/srlab/sam/data/P_generosa/genomes\"\ngenome_gff=\"${genome_index_dir}/Panopea-generosa-v1.0.a4_biotype-trna_strand_converted-no_RNAmmer.gff\"\nfastq_dir=\"/gscratch/scrubbed/samwhite/outputs/20230426-pgen-fastqc-fastp-multiqc-RNAseq/\"\nindex_tarball=\"Panopea-generosa-v1.0-hisat2-indices.tar.gz\"\n\n# Output files/directories\ngtf_list=\"gtf_list.txt\"\nmerged_bam=\"20230216-pver-stringtie-pver_v1.0-sorted-bams-merged.bam\"\n\n# Declare associative array of sample names and metadata\ndeclare -A samples_associative_array=()\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=(\n[gffcompare]=\"${gffcompare}\" \\\n[hisat2]=\"${hisat2}\" \\\n[samtools_index]=\"${samtools} index\" \\\n[samtools_merge]=\"${samtools} merge\" \\\n[samtools_sort]=\"${samtools} sort\" \\\n[samtools_view]=\"${samtools} view\" \\\n[stringtie]=\"${stringtie}\"\n)\n\n\n###################################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n## Load associative array\n## Only need to use one set of reads to capture sample name\n\n# Set sample counter for array verification\nsample_counter=0\n\n# Load array\n# DO NOT QUOTE ${R1_fastq_pattern} - WILL NOT POPULATE ARRAY!\nfor fastq in \"${fastq_dir}\"${R1_fastq_pattern}\ndo\n  # Increment counter\n  ((sample_counter+=1))\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from first _-delimited field\n  sample_name=$(echo \"${sample_name}\" | awk -F \"_\" '{print $1}')\n  \n  # Set treatment condition for each sample\n  # Used for setting read group (@RG) in SAM files\n  if [[ \"${sample_name}\" == \"gonad\" ]]\n  then\n    treatment=\"gonad\"\n  elif [[ \"${sample_name}\" == \"heart\" ]]\n  then\n    treatment=\"heart\"\n  elif [[ \"${sample_name}\" == \"juvenile\" ]]\n  then\n    treatment=\"juvenile\"\n  elif [[ \"${sample_name}\" == \"larvae\" ]]\n  then\n    treatment=\"larvae\"\n  fi\n\n  # Append to associative array\n  samples_associative_array+=([\"${sample_name}\"]=\"${treatment}\")\n\ndone\n\n# Check array size to confirm it has all expected samples\n# Exit if mismatch\nif [[ \"${#samples_associative_array[@]}\" != \"${sample_counter}\" ]] \\\n|| [[ \"${#samples_associative_array[@]}\" != \"${total_samples}\" ]]\n  then\n    echo \"samples_associative_array doesn't have all ${total_samples} samples.\"\n    echo \"\"\n    echo \"samples_associative_array contents:\"\n    echo \"\"\n    for item in \"${!samples_associative_array[@]}\"\n    do\n      printf \"%s\\t%s\\n\" \"${item}\" \"${samples_associative_array[${item}]}\"\n    done\n\n    exit\nfi\n\n# Copy Hisat2 genome index files\necho \"\"\necho \"Transferring HiSat2 index file now.\"\necho \"\"\nrsync -av \"${genome_index_dir}/${index_tarball}\" .\necho \"\"\n\n# Unpack Hisat2 index files\necho \"\"\necho \"Unpacking Hisat2 index tarball: ${index_tarball}...\"\necho \"\"\ntar -xzvf ${index_tarball}\necho \"Finished unpacking ${index_tarball}\"\necho \"\"\n\n#### BEGIN HISAT2 ALIGNMENTS ####\necho \"Beginning HiSat2 alignments and StringTie analysis...\"\necho \"\"\nfor sample in \"${!samples_associative_array[@]}\"\ndo\n\n  ## Inititalize arrays\n  fastq_array_R1=()\n  fastq_array_R2=()\n\n  # Create array of fastq R1 files\n  # and generated MD5 checksums file.\n  \n\n  # DO NOT QUOTE ${fastq_pattern} \n  for fastq in \"${fastq_dir}\"${R1_fastq_pattern}\n  do\n\n    # Remove path\n    sample_name=\"${fastq##*/}\"\n\n    # Get sample name from first _-delimited field\n    sample_name=$(echo \"${sample_name}\" | awk -F \"_\" '{print $1}')\n\n    # Check sample names for match\n    if [[ \"${sample_name}\" == \"${sample}\" ]]\n    then\n      echo \"Now working on ${sample} Read 1 FastQs.\"\n\n      fastq_array_R1+=(\"${fastq}\")\n\n      echo \"Generating checksum for ${fastq}...\"\n\n      md5sum \"${fastq}\" >> input_fastqs_checksums.md5\n\n      echo \"Checksum for ${fastq} completed.\"\n      echo \"\"\n    fi\n\n  done\n\n  # Create array of fastq R2 files\n  # DO NOT QUOTE ${fastq_pattern} \n  for fastq in \"${fastq_dir}\"${R2_fastq_pattern}\n  do\n    # Remove path\n    sample_name=\"${fastq##*/}\"\n\n    # Get sample name from first _-delimited field\n    sample_name=$(echo \"${sample_name}\" | awk -F \"_\" '{print $1}')\n\n    # Check sample names for match\n    if [[ \"${sample_name}\" == \"${sample}\" ]]\n    then\n      echo \"Now working on ${sample} Read 2 FastQs.\"\n\n      fastq_array_R2+=(\"${fastq}\")\n\n      echo \"Generating checksum for ${fastq}...\"\n\n      md5sum \"${fastq}\" >> input_fastqs_checksums.md5\n      \n      echo \"Checksum for ${fastq} completed.\"\n      echo \"\"\n    fi\n  done\n\n  echo \"Checksums for ${sample} Read 1 and 2 completed.\"\n\n  # Create comma-separated lists of FastQs for Hisat2\n  printf -v joined_R1 '%s,' \"${fastq_array_R1[@]}\"\n  fastq_list_R1=$(echo \"${joined_R1%,}\")\n\n  printf -v joined_R2 '%s,' \"${fastq_array_R2[@]}\"\n  fastq_list_R2=$(echo \"${joined_R2%,}\")\n\n  # Create and switch to dedicated sample directory\n  echo \"\"\n  echo \"Creating ${sample} directory.\"\n  mkdir \"${sample}\" && cd \"$_\"\n  echo \"Now in ${sample} directory.\"\n\n  # HiSat2 alignments\n  # Sets read group info (RG) using samples array\n  echo \"\"\n  echo \"Running HiSat2 for sample ${sample}.\"\n  \"${programs_array[hisat2]}\" \\\n  -x \"${genome_index_name}\" \\\n  -1 \"${fastq_list_R1}\" \\\n  -2 \"${fastq_list_R2}\" \\\n  -S \"${sample}\".sam \\\n  --rg-id \"${sample}\" \\\n  --rg \"SM:\"\"${samples_associative_array[$sample]}\" \\\n  --threads \"${threads}\" \\\n  2> \"${sample}-hisat2_stats.txt\"\n  echo \"\"\n  echo \"Hisat2 for  ${fastq_list_R1} and ${fastq_list_R2} complete.\"\n  echo \"\"\n\n  # Sort SAM files and convert to BAM\n  echo \"\"\n  echo \"Sorting ${sample}.sam and creating sorted BAM.\"\n  echo \"\"\n  ${programs_array[samtools_view]} \\\n  -@ \"${threads}\" \\\n  -Su \"${sample}\".sam \\\n  | ${programs_array[samtools_sort]} - \\\n  -@ \"${threads}\" \\\n  -o \"${sample}\".sorted.bam\n  echo \"Created ${sample}.sorted.bam\"\n  echo \"\"\n\n\n  # Index BAM\n  echo \"\"\n  echo \"Indexing ${sample}.sorted.bam...\"\n  ${programs_array[samtools_index]} \"${sample}\".sorted.bam\n  echo \"\"\n  echo \"Indexing complete for ${sample}.sorted.bam.\"\n  echo \"\"\n\n  echo \"\"\n  echo \"HiSat2 completed for sample ${sample}.\"\n  echo \"\"\n\n#### END HISAT2 ALIGNMENTS ####\n\n#### BEGIN STRINGTIE ####\n\n  # Run stringtie on alignments\n  # Uses \"-B\" option to output tables intended for use in Ballgown\n  # Uses \"-e\" option; recommended when using \"-B\" option.\n  # Limits analysis to only reads alignments matching reference.\n  echo \"Beginning StringTie analysis on ${sample}.sorted.bam.\"\n  \"${programs_array[stringtie]}\" \"${sample}\".sorted.bam \\\n  -p \"${threads}\" \\\n  -o \"${sample}\".gtf \\\n  -G \"${genome_gff}\" \\\n  -C \"${sample}.cov_refs.gtf\" \\\n  -B\n  \n  echo \"StringTie analysis finished for ${sample}.sorted.bam.\"\n  echo \"\"\n#### END STRINGTIE ####\n\n# Add GTFs to list file, only if non-empty\n# Identifies GTF files that only have header\n  echo \"\"\n  echo \"Adding ${sample}.gtf to ../${gtf_list}.\"\n\n  gtf_lines=$(wc -l < \"${sample}\".gtf )\n\n  if [ \"${gtf_lines}\" -gt 2 ]; then\n    echo \"$(pwd)/${sample}.gtf\" >> ../\"${gtf_list}\"\n  fi\n\n  echo \"\"\n\n  # Delete unneeded SAM files\n  echo \"Removing SAM files.\"\n  echo \"\"\n  rm ./*.sam\n\n  # Generate checksums\n  for file in *\n  do\n    echo \"\"\n    echo \"Generating MD5 checksum for ${file}.\"\n    echo \"\"\n    md5sum \"${file}\" | tee --append \"${sample}_checksums.md5\"\n    echo \"\"\n    echo \"${file} checksum added to ${sample}_checksums.md5.\"\n    echo \"\"\n  done\n\n  echo \"Finished HiSat2 alignments and StringTie analysis for ${sample} FastQs.\"\n  echo \"\"\n\n  # Move up to orig. working directory\n  echo \"Moving to original working directory.\"\n  echo \"\"\n\n  cd ..\n\n  echo \"Now in $(pwd).\"\n  echo \"\"\n\ndone\n\necho \"Finished all HiSat2 alignments and StringTie analysis.\"\necho \"\"\n\n\n#### BEGIN MERGING BAMs ####\n\n# Merge all BAMs to singular BAM for use in transcriptome assembly later\n## Create list of sorted BAMs for merging\necho \"\"\necho \"Creating list file of sorted BAMs...\"\n\nfind . -name \"*sorted.bam\" > sorted_bams.list\n\necho \"List of BAMs created: sorted_bams.list\"\necho \"\"\n\n## Merge sorted BAMs\necho \"Merging all BAM files...\"\necho \"\"\n\n${programs_array[samtools_merge]} \\\n-b sorted_bams.list \\\n${merged_bam} \\\n--threads ${threads}\n\necho \"\"\necho \"Finished creating ${merged_bam}.\"\n\n#### END MERGING BAMs ####\n\n#### BEGIN INDEXING MERGED BAM ####\n\n## Index merged BAM\necho \"\"\necho \"Indexing ${merged_bam}...\"\necho \"\"\n\n${programs_array[samtools_index]} ${merged_bam}\n\necho \"Finished indexing ${merged_bam}.\"\necho \"\"\n\n#### END INDEXING MERGED BAM ####\n\n#### BEGIN MERGE STRINGTIE GTFs ####\n\n# Create singular transcript file, using GTF list file\necho \"Merging GTFs...\"\necho \"\"\n\n\"${programs_array[stringtie]}\" --merge \\\n\"${gtf_list}\" \\\n-p \"${threads}\" \\\n-G \"${genome_gff}\" \\\n-o \"${genome_index_name}.stringtie.gtf\"\n\necho \"\"\necho \"Finished merging GTFs into ${genome_index_name}.stringtie.gtf\"\necho \"\"\n#### END MERGE STRINGTIE GTFs ####\n\n# Delete unneccessary index files\necho \"\"\necho \"Removing HiSat2 *.ht2 genome index files...\"\necho \"\"\n\nrm \"${genome_index_name}\"*.ht2\n\necho \"All genome index files removed.\"\necho \"\"\n\n#### BEGIN GFFCOMPARE ####\necho \"\"\necho \"Beginning gffcompare...\"\necho \"\"\n\n# Make ggfcompare output directory and\n# change into that directory\nmkdir --parents gffcompare && cd \"$_\"\n\n# Run gffcompare\n\"${programs_array[gffcompare]}\" \\\n-r \"${genome_gff}\" \\\n-o \"${genome_index_name}-gffcmp\" \\\n../\"${genome_index_name}.stringtie.gtf\"\n\necho \"\"\necho \"Finished gffcompare\"\necho \"\"\n\n# Generate checksums\nfor file in *\ndo\n  echo \"\"\n  echo \"Generating checksum for ${file}...\"\n  echo \"\"\n\n  md5sum \"${file}\" | tee --append checksums.md5\n\n  echo \"Checksum generated.\"\ndone\n\n# Move to previous directory\necho \"Moving to previous directory...\"\necho \"\"\n\ncd -\n\necho \"Now in $(pwd).\"\necho \"\"\n\n#### END GFFCOMPARE ####\n\n\n# Generate checksums\necho \"Generating checksums for files in $(pwd).\"\n\nfor file in *\ndo\n  echo \"\"\n  echo \"Generating checksum for ${file}...\"\n  echo \"\"\n\n  md5sum \"${file}\" | tee --append checksums.md5\n\n  echo \"Checksum generated.\"\ndone\n\n# Remove genome index tarball\necho \"\"\necho \"Removing ${index_tarball}.\"\n\nrm \"${index_tarball}\"\n\necho \"${index_tarball} has been deleted.\"\necho \"\"\n\n#######################################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\n  echo \"Finished logging programs options.\"\n  echo \"\"\nfi\n\n\n# Document programs in PATH (primarily for program version ID)\necho \"Logging system $PATH...\"\n\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\necho \"Finished logging system $PATH.\"\necho \"\"\n\necho \"Script complete!\"\n\n```\n\n---\n\n# RESULTS\n\nRun time was ~5.5hrs:\n\n![Screencap showing runtime of 5hrs, 27mins, 19s on Mox](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq-runtime.png?raw=true)\n\nOutput folder:\n\n- [20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq/](https://gannet.fish.washington.edu/Atumefaciens/20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq/)\n\nDue to the number of files and various subdirectories, I won't be providing links to individual files. Instead, there's a tree overview of the directory layouts below.\n\nThe resulting `gffcompare/Panopea-generosa-v1.0-gffcmp.annotated.gtf` will be used for downstream lncRNA identification.\n\nAlso, the resulting `*.ctab` files can be used for gene/isoform expression analysis in `ballgown`.\n\n---\n\n```\n[4.0K]  .\n├── [ 70G]  20230216-pver-stringtie-pver_v1.0-sorted-bams-merged.bam\n├── [6.6M]  20230216-pver-stringtie-pver_v1.0-sorted-bams-merged.bam.bai\n├── [ 14K]  20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq.sh\n├── [ 841]  checksums.md5\n├── [4.0K]  ctenidia\n│   ├── [ 499]  ctenidia_checksums.md5\n│   ├── [4.9M]  ctenidia.cov_refs.gtf\n│   ├── [ 39M]  ctenidia.gtf\n│   ├── [ 643]  ctenidia-hisat2_stats.txt\n│   ├── [6.3G]  ctenidia.sorted.bam\n│   ├── [1.4M]  ctenidia.sorted.bam.bai\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 14M]  e_data.ctab\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.2M]  i_data.ctab\n│   └── [3.7M]  t_data.ctab\n├── [4.0K]  gffcompare\n│   ├── [ 280]  checksums.md5\n│   ├── [1.5K]  Panopea-generosa-v1.0-gffcmp\n│   ├── [ 74M]  Panopea-generosa-v1.0-gffcmp.annotated.gtf\n│   ├── [4.7M]  Panopea-generosa-v1.0-gffcmp.loci\n│   └── [9.4M]  Panopea-generosa-v1.0-gffcmp.tracking\n├── [4.0K]  gonad\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 14M]  e_data.ctab\n│   ├── [ 484]  gonad_checksums.md5\n│   ├── [2.1M]  gonad.cov_refs.gtf\n│   ├── [ 26M]  gonad.gtf\n│   ├── [ 643]  gonad-hisat2_stats.txt\n│   ├── [6.3G]  gonad.sorted.bam\n│   ├── [1.4M]  gonad.sorted.bam.bai\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.2M]  i_data.ctab\n│   └── [3.7M]  t_data.ctab\n├── [ 519]  gtf_list.txt\n├── [4.0K]  heart\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 14M]  e_data.ctab\n│   ├── [ 484]  heart_checksums.md5\n│   ├── [5.4M]  heart.cov_refs.gtf\n│   ├── [ 38M]  heart.gtf\n│   ├── [ 647]  heart-hisat2_stats.txt\n│   ├── [ 12G]  heart.sorted.bam\n│   ├── [2.0M]  heart.sorted.bam.bai\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.3M]  i_data.ctab\n│   └── [3.7M]  t_data.ctab\n├── [1.5K]  input_fastqs_checksums.md5\n├── [4.0K]  juvenile\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 15M]  e_data.ctab\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.5M]  i_data.ctab\n│   ├── [ 499]  juvenile_checksums.md5\n│   ├── [8.9M]  juvenile.cov_refs.gtf\n│   ├── [ 69M]  juvenile.gtf\n│   ├── [ 653]  juvenile-hisat2_stats.txt\n│   ├── [ 38G]  juvenile.sorted.bam\n│   ├── [3.9M]  juvenile.sorted.bam.bai\n│   └── [3.7M]  t_data.ctab\n├── [4.0K]  larvae\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 15M]  e_data.ctab\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.3M]  i_data.ctab\n│   ├── [ 489]  larvae_checksums.md5\n│   ├── [5.4M]  larvae.cov_refs.gtf\n│   ├── [ 45M]  larvae.gtf\n│   ├── [ 645]  larvae-hisat2_stats.txt\n│   ├── [7.9G]  larvae.sorted.bam\n│   ├── [1.5M]  larvae.sorted.bam.bai\n│   └── [3.7M]  t_data.ctab\n├── [2.6M]  Panopea-generosa-v1.0-gffcmp.Panopea-generosa-v1.0.stringtie.gtf.refmap\n├── [8.7M]  Panopea-generosa-v1.0-gffcmp.Panopea-generosa-v1.0.stringtie.gtf.tmap\n├── [ 73M]  Panopea-generosa-v1.0.stringtie.gtf\n├── [ 19K]  program_options.log\n├── [ 42M]  slurm-4571580.out\n├── [ 139]  sorted_bams.list\n└── [1.1K]  system_path.log\n```\n","srcMarkdownNoYaml":"\nThis is a continuation of the process for identification of lncRNAs,. I aligned FastQs which were [previously trimmed earlier today](../2023-04-26-FastQ-Trimming-and-QC---P.generosa-RNA-seq-Data-from-20220323-on-Mox/index.qmd) to our Panopea-generosa-v1.0 genome FastA using [`HISAT2`](https://daehwankimlab.github.io/hisat2/). I used the [`HISAT2`](https://daehwankimlab.github.io/hisat2/) genome index [created on 20190723](../../2019/2019-07-23-Genome-Annotation---Pgenerosa_v074-Hisat2-Transcript-Isoform-Index/index.qmd), which was created with options to identify exons and splice sites. The GFF used was [from 20220323](../../2022/2022-03-23-Differential-Gene-Expression---P.generosa-DGE-Between-Tissues-Using-Nextlow-NF-Core-RNAseq-Pipeline-on-Mox/index.qmd). [`StringTie`](https://ccb.jhu.edu/software/stringtie/) was used to identify alternative transcripts, assign expression values, and create expression tables for use with `ballgown`. The job was run on Mox.\n\nSLURM script posted below is very long. Skip to [RESULTS section](#results).\n\nSLURM script (GitHub):\n\n- [20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq.sh)\n\n```bash\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=7-00:00:00\n## Memory per node\n#SBATCH --mem=120G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq\n\n\n## Script for HiSat2 alignments to P.generosa genome assembly Panopea-generosa-v1.0, running Stringtie to identify splice sites and calculate gene/transcript\n##expression values (FPKM), formatted for import into Ballgown (R/Bioconductor), and gffcompare for GTF annotation.\n\n## Process is part of identification of long non-coding RNAs (lnRNA) in geoduck.\n\n## HiSat2 index generated on 20220914.\n## https://robertslab.github.io/sams-notebook/posts/2022/2022-09-14-RNAseq-Alignments---P.generosa-Alignments-and-Alternative-Transcript-Identification-Using-Hisat2-and-StringTie-on-Mox/\n\n## Using trimmed FastQs from 20230426.\n\n## Expects FastQ input filenames to match <sample name>_val_[12].fastp-trim.20230426.fq.gz\n## E.g. ctenidia_1_val_1.fastp-trim.20230426.fq.gz\n\n###################################################################################\n# These variables need to be set by user\n\n## Assign Variables\n\n# Set total number of SAMPLES (NOT number of FastQ files)\ntotal_samples=5\n\n# Set number of CPUs to use\nthreads=28\n\n# Index name for Hisat2 use\n# Needs to match index name used in previous Hisat2 indexing step\ngenome_index_name=\"Panopea-generosa-v1.0\"\n\n# Set input FastQ patterns\nR1_fastq_pattern='*_val_1*fq.gz'\nR2_fastq_pattern='*_val_2*fq.gz'\n\n# Location of Hisat2 index files\n# Must keep variable name formatting, as it's used by HiSat2\nHISAT2_INDEXES=$(pwd)\nexport HISAT2_INDEXES\n\n# Paths to programs\ngffcompare=\"/gscratch/srlab/programs/gffcompare-0.12.6.Linux_x86_64/gffcompare\"\nhisat2_dir=\"/gscratch/srlab/programs/hisat2-2.1.0\"\nhisat2=\"${hisat2_dir}/hisat2\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\nstringtie=\"/gscratch/srlab/programs/stringtie-2.2.1.Linux_x86_64/stringtie\"\n\n# Input files/directories\ngenome_index_dir=\"/gscratch/srlab/sam/data/P_generosa/genomes\"\ngenome_gff=\"${genome_index_dir}/Panopea-generosa-v1.0.a4_biotype-trna_strand_converted-no_RNAmmer.gff\"\nfastq_dir=\"/gscratch/scrubbed/samwhite/outputs/20230426-pgen-fastqc-fastp-multiqc-RNAseq/\"\nindex_tarball=\"Panopea-generosa-v1.0-hisat2-indices.tar.gz\"\n\n# Output files/directories\ngtf_list=\"gtf_list.txt\"\nmerged_bam=\"20230216-pver-stringtie-pver_v1.0-sorted-bams-merged.bam\"\n\n# Declare associative array of sample names and metadata\ndeclare -A samples_associative_array=()\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=(\n[gffcompare]=\"${gffcompare}\" \\\n[hisat2]=\"${hisat2}\" \\\n[samtools_index]=\"${samtools} index\" \\\n[samtools_merge]=\"${samtools} merge\" \\\n[samtools_sort]=\"${samtools} sort\" \\\n[samtools_view]=\"${samtools} view\" \\\n[stringtie]=\"${stringtie}\"\n)\n\n\n###################################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n## Load associative array\n## Only need to use one set of reads to capture sample name\n\n# Set sample counter for array verification\nsample_counter=0\n\n# Load array\n# DO NOT QUOTE ${R1_fastq_pattern} - WILL NOT POPULATE ARRAY!\nfor fastq in \"${fastq_dir}\"${R1_fastq_pattern}\ndo\n  # Increment counter\n  ((sample_counter+=1))\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from first _-delimited field\n  sample_name=$(echo \"${sample_name}\" | awk -F \"_\" '{print $1}')\n  \n  # Set treatment condition for each sample\n  # Used for setting read group (@RG) in SAM files\n  if [[ \"${sample_name}\" == \"gonad\" ]]\n  then\n    treatment=\"gonad\"\n  elif [[ \"${sample_name}\" == \"heart\" ]]\n  then\n    treatment=\"heart\"\n  elif [[ \"${sample_name}\" == \"juvenile\" ]]\n  then\n    treatment=\"juvenile\"\n  elif [[ \"${sample_name}\" == \"larvae\" ]]\n  then\n    treatment=\"larvae\"\n  fi\n\n  # Append to associative array\n  samples_associative_array+=([\"${sample_name}\"]=\"${treatment}\")\n\ndone\n\n# Check array size to confirm it has all expected samples\n# Exit if mismatch\nif [[ \"${#samples_associative_array[@]}\" != \"${sample_counter}\" ]] \\\n|| [[ \"${#samples_associative_array[@]}\" != \"${total_samples}\" ]]\n  then\n    echo \"samples_associative_array doesn't have all ${total_samples} samples.\"\n    echo \"\"\n    echo \"samples_associative_array contents:\"\n    echo \"\"\n    for item in \"${!samples_associative_array[@]}\"\n    do\n      printf \"%s\\t%s\\n\" \"${item}\" \"${samples_associative_array[${item}]}\"\n    done\n\n    exit\nfi\n\n# Copy Hisat2 genome index files\necho \"\"\necho \"Transferring HiSat2 index file now.\"\necho \"\"\nrsync -av \"${genome_index_dir}/${index_tarball}\" .\necho \"\"\n\n# Unpack Hisat2 index files\necho \"\"\necho \"Unpacking Hisat2 index tarball: ${index_tarball}...\"\necho \"\"\ntar -xzvf ${index_tarball}\necho \"Finished unpacking ${index_tarball}\"\necho \"\"\n\n#### BEGIN HISAT2 ALIGNMENTS ####\necho \"Beginning HiSat2 alignments and StringTie analysis...\"\necho \"\"\nfor sample in \"${!samples_associative_array[@]}\"\ndo\n\n  ## Inititalize arrays\n  fastq_array_R1=()\n  fastq_array_R2=()\n\n  # Create array of fastq R1 files\n  # and generated MD5 checksums file.\n  \n\n  # DO NOT QUOTE ${fastq_pattern} \n  for fastq in \"${fastq_dir}\"${R1_fastq_pattern}\n  do\n\n    # Remove path\n    sample_name=\"${fastq##*/}\"\n\n    # Get sample name from first _-delimited field\n    sample_name=$(echo \"${sample_name}\" | awk -F \"_\" '{print $1}')\n\n    # Check sample names for match\n    if [[ \"${sample_name}\" == \"${sample}\" ]]\n    then\n      echo \"Now working on ${sample} Read 1 FastQs.\"\n\n      fastq_array_R1+=(\"${fastq}\")\n\n      echo \"Generating checksum for ${fastq}...\"\n\n      md5sum \"${fastq}\" >> input_fastqs_checksums.md5\n\n      echo \"Checksum for ${fastq} completed.\"\n      echo \"\"\n    fi\n\n  done\n\n  # Create array of fastq R2 files\n  # DO NOT QUOTE ${fastq_pattern} \n  for fastq in \"${fastq_dir}\"${R2_fastq_pattern}\n  do\n    # Remove path\n    sample_name=\"${fastq##*/}\"\n\n    # Get sample name from first _-delimited field\n    sample_name=$(echo \"${sample_name}\" | awk -F \"_\" '{print $1}')\n\n    # Check sample names for match\n    if [[ \"${sample_name}\" == \"${sample}\" ]]\n    then\n      echo \"Now working on ${sample} Read 2 FastQs.\"\n\n      fastq_array_R2+=(\"${fastq}\")\n\n      echo \"Generating checksum for ${fastq}...\"\n\n      md5sum \"${fastq}\" >> input_fastqs_checksums.md5\n      \n      echo \"Checksum for ${fastq} completed.\"\n      echo \"\"\n    fi\n  done\n\n  echo \"Checksums for ${sample} Read 1 and 2 completed.\"\n\n  # Create comma-separated lists of FastQs for Hisat2\n  printf -v joined_R1 '%s,' \"${fastq_array_R1[@]}\"\n  fastq_list_R1=$(echo \"${joined_R1%,}\")\n\n  printf -v joined_R2 '%s,' \"${fastq_array_R2[@]}\"\n  fastq_list_R2=$(echo \"${joined_R2%,}\")\n\n  # Create and switch to dedicated sample directory\n  echo \"\"\n  echo \"Creating ${sample} directory.\"\n  mkdir \"${sample}\" && cd \"$_\"\n  echo \"Now in ${sample} directory.\"\n\n  # HiSat2 alignments\n  # Sets read group info (RG) using samples array\n  echo \"\"\n  echo \"Running HiSat2 for sample ${sample}.\"\n  \"${programs_array[hisat2]}\" \\\n  -x \"${genome_index_name}\" \\\n  -1 \"${fastq_list_R1}\" \\\n  -2 \"${fastq_list_R2}\" \\\n  -S \"${sample}\".sam \\\n  --rg-id \"${sample}\" \\\n  --rg \"SM:\"\"${samples_associative_array[$sample]}\" \\\n  --threads \"${threads}\" \\\n  2> \"${sample}-hisat2_stats.txt\"\n  echo \"\"\n  echo \"Hisat2 for  ${fastq_list_R1} and ${fastq_list_R2} complete.\"\n  echo \"\"\n\n  # Sort SAM files and convert to BAM\n  echo \"\"\n  echo \"Sorting ${sample}.sam and creating sorted BAM.\"\n  echo \"\"\n  ${programs_array[samtools_view]} \\\n  -@ \"${threads}\" \\\n  -Su \"${sample}\".sam \\\n  | ${programs_array[samtools_sort]} - \\\n  -@ \"${threads}\" \\\n  -o \"${sample}\".sorted.bam\n  echo \"Created ${sample}.sorted.bam\"\n  echo \"\"\n\n\n  # Index BAM\n  echo \"\"\n  echo \"Indexing ${sample}.sorted.bam...\"\n  ${programs_array[samtools_index]} \"${sample}\".sorted.bam\n  echo \"\"\n  echo \"Indexing complete for ${sample}.sorted.bam.\"\n  echo \"\"\n\n  echo \"\"\n  echo \"HiSat2 completed for sample ${sample}.\"\n  echo \"\"\n\n#### END HISAT2 ALIGNMENTS ####\n\n#### BEGIN STRINGTIE ####\n\n  # Run stringtie on alignments\n  # Uses \"-B\" option to output tables intended for use in Ballgown\n  # Uses \"-e\" option; recommended when using \"-B\" option.\n  # Limits analysis to only reads alignments matching reference.\n  echo \"Beginning StringTie analysis on ${sample}.sorted.bam.\"\n  \"${programs_array[stringtie]}\" \"${sample}\".sorted.bam \\\n  -p \"${threads}\" \\\n  -o \"${sample}\".gtf \\\n  -G \"${genome_gff}\" \\\n  -C \"${sample}.cov_refs.gtf\" \\\n  -B\n  \n  echo \"StringTie analysis finished for ${sample}.sorted.bam.\"\n  echo \"\"\n#### END STRINGTIE ####\n\n# Add GTFs to list file, only if non-empty\n# Identifies GTF files that only have header\n  echo \"\"\n  echo \"Adding ${sample}.gtf to ../${gtf_list}.\"\n\n  gtf_lines=$(wc -l < \"${sample}\".gtf )\n\n  if [ \"${gtf_lines}\" -gt 2 ]; then\n    echo \"$(pwd)/${sample}.gtf\" >> ../\"${gtf_list}\"\n  fi\n\n  echo \"\"\n\n  # Delete unneeded SAM files\n  echo \"Removing SAM files.\"\n  echo \"\"\n  rm ./*.sam\n\n  # Generate checksums\n  for file in *\n  do\n    echo \"\"\n    echo \"Generating MD5 checksum for ${file}.\"\n    echo \"\"\n    md5sum \"${file}\" | tee --append \"${sample}_checksums.md5\"\n    echo \"\"\n    echo \"${file} checksum added to ${sample}_checksums.md5.\"\n    echo \"\"\n  done\n\n  echo \"Finished HiSat2 alignments and StringTie analysis for ${sample} FastQs.\"\n  echo \"\"\n\n  # Move up to orig. working directory\n  echo \"Moving to original working directory.\"\n  echo \"\"\n\n  cd ..\n\n  echo \"Now in $(pwd).\"\n  echo \"\"\n\ndone\n\necho \"Finished all HiSat2 alignments and StringTie analysis.\"\necho \"\"\n\n\n#### BEGIN MERGING BAMs ####\n\n# Merge all BAMs to singular BAM for use in transcriptome assembly later\n## Create list of sorted BAMs for merging\necho \"\"\necho \"Creating list file of sorted BAMs...\"\n\nfind . -name \"*sorted.bam\" > sorted_bams.list\n\necho \"List of BAMs created: sorted_bams.list\"\necho \"\"\n\n## Merge sorted BAMs\necho \"Merging all BAM files...\"\necho \"\"\n\n${programs_array[samtools_merge]} \\\n-b sorted_bams.list \\\n${merged_bam} \\\n--threads ${threads}\n\necho \"\"\necho \"Finished creating ${merged_bam}.\"\n\n#### END MERGING BAMs ####\n\n#### BEGIN INDEXING MERGED BAM ####\n\n## Index merged BAM\necho \"\"\necho \"Indexing ${merged_bam}...\"\necho \"\"\n\n${programs_array[samtools_index]} ${merged_bam}\n\necho \"Finished indexing ${merged_bam}.\"\necho \"\"\n\n#### END INDEXING MERGED BAM ####\n\n#### BEGIN MERGE STRINGTIE GTFs ####\n\n# Create singular transcript file, using GTF list file\necho \"Merging GTFs...\"\necho \"\"\n\n\"${programs_array[stringtie]}\" --merge \\\n\"${gtf_list}\" \\\n-p \"${threads}\" \\\n-G \"${genome_gff}\" \\\n-o \"${genome_index_name}.stringtie.gtf\"\n\necho \"\"\necho \"Finished merging GTFs into ${genome_index_name}.stringtie.gtf\"\necho \"\"\n#### END MERGE STRINGTIE GTFs ####\n\n# Delete unneccessary index files\necho \"\"\necho \"Removing HiSat2 *.ht2 genome index files...\"\necho \"\"\n\nrm \"${genome_index_name}\"*.ht2\n\necho \"All genome index files removed.\"\necho \"\"\n\n#### BEGIN GFFCOMPARE ####\necho \"\"\necho \"Beginning gffcompare...\"\necho \"\"\n\n# Make ggfcompare output directory and\n# change into that directory\nmkdir --parents gffcompare && cd \"$_\"\n\n# Run gffcompare\n\"${programs_array[gffcompare]}\" \\\n-r \"${genome_gff}\" \\\n-o \"${genome_index_name}-gffcmp\" \\\n../\"${genome_index_name}.stringtie.gtf\"\n\necho \"\"\necho \"Finished gffcompare\"\necho \"\"\n\n# Generate checksums\nfor file in *\ndo\n  echo \"\"\n  echo \"Generating checksum for ${file}...\"\n  echo \"\"\n\n  md5sum \"${file}\" | tee --append checksums.md5\n\n  echo \"Checksum generated.\"\ndone\n\n# Move to previous directory\necho \"Moving to previous directory...\"\necho \"\"\n\ncd -\n\necho \"Now in $(pwd).\"\necho \"\"\n\n#### END GFFCOMPARE ####\n\n\n# Generate checksums\necho \"Generating checksums for files in $(pwd).\"\n\nfor file in *\ndo\n  echo \"\"\n  echo \"Generating checksum for ${file}...\"\n  echo \"\"\n\n  md5sum \"${file}\" | tee --append checksums.md5\n\n  echo \"Checksum generated.\"\ndone\n\n# Remove genome index tarball\necho \"\"\necho \"Removing ${index_tarball}.\"\n\nrm \"${index_tarball}\"\n\necho \"${index_tarball} has been deleted.\"\necho \"\"\n\n#######################################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\n  echo \"Finished logging programs options.\"\n  echo \"\"\nfi\n\n\n# Document programs in PATH (primarily for program version ID)\necho \"Logging system $PATH...\"\n\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\necho \"Finished logging system $PATH.\"\necho \"\"\n\necho \"Script complete!\"\n\n```\n\n---\n\n# RESULTS\n\nRun time was ~5.5hrs:\n\n![Screencap showing runtime of 5hrs, 27mins, 19s on Mox](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq-runtime.png?raw=true)\n\nOutput folder:\n\n- [20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq/](https://gannet.fish.washington.edu/Atumefaciens/20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq/)\n\nDue to the number of files and various subdirectories, I won't be providing links to individual files. Instead, there's a tree overview of the directory layouts below.\n\nThe resulting `gffcompare/Panopea-generosa-v1.0-gffcmp.annotated.gtf` will be used for downstream lncRNA identification.\n\nAlso, the resulting `*.ctab` files can be used for gene/isoform expression analysis in `ballgown`.\n\n---\n\n```\n[4.0K]  .\n├── [ 70G]  20230216-pver-stringtie-pver_v1.0-sorted-bams-merged.bam\n├── [6.6M]  20230216-pver-stringtie-pver_v1.0-sorted-bams-merged.bam.bai\n├── [ 14K]  20230426-pgen-HISAT2-stringtie-gffcompare-RNAseq.sh\n├── [ 841]  checksums.md5\n├── [4.0K]  ctenidia\n│   ├── [ 499]  ctenidia_checksums.md5\n│   ├── [4.9M]  ctenidia.cov_refs.gtf\n│   ├── [ 39M]  ctenidia.gtf\n│   ├── [ 643]  ctenidia-hisat2_stats.txt\n│   ├── [6.3G]  ctenidia.sorted.bam\n│   ├── [1.4M]  ctenidia.sorted.bam.bai\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 14M]  e_data.ctab\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.2M]  i_data.ctab\n│   └── [3.7M]  t_data.ctab\n├── [4.0K]  gffcompare\n│   ├── [ 280]  checksums.md5\n│   ├── [1.5K]  Panopea-generosa-v1.0-gffcmp\n│   ├── [ 74M]  Panopea-generosa-v1.0-gffcmp.annotated.gtf\n│   ├── [4.7M]  Panopea-generosa-v1.0-gffcmp.loci\n│   └── [9.4M]  Panopea-generosa-v1.0-gffcmp.tracking\n├── [4.0K]  gonad\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 14M]  e_data.ctab\n│   ├── [ 484]  gonad_checksums.md5\n│   ├── [2.1M]  gonad.cov_refs.gtf\n│   ├── [ 26M]  gonad.gtf\n│   ├── [ 643]  gonad-hisat2_stats.txt\n│   ├── [6.3G]  gonad.sorted.bam\n│   ├── [1.4M]  gonad.sorted.bam.bai\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.2M]  i_data.ctab\n│   └── [3.7M]  t_data.ctab\n├── [ 519]  gtf_list.txt\n├── [4.0K]  heart\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 14M]  e_data.ctab\n│   ├── [ 484]  heart_checksums.md5\n│   ├── [5.4M]  heart.cov_refs.gtf\n│   ├── [ 38M]  heart.gtf\n│   ├── [ 647]  heart-hisat2_stats.txt\n│   ├── [ 12G]  heart.sorted.bam\n│   ├── [2.0M]  heart.sorted.bam.bai\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.3M]  i_data.ctab\n│   └── [3.7M]  t_data.ctab\n├── [1.5K]  input_fastqs_checksums.md5\n├── [4.0K]  juvenile\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 15M]  e_data.ctab\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.5M]  i_data.ctab\n│   ├── [ 499]  juvenile_checksums.md5\n│   ├── [8.9M]  juvenile.cov_refs.gtf\n│   ├── [ 69M]  juvenile.gtf\n│   ├── [ 653]  juvenile-hisat2_stats.txt\n│   ├── [ 38G]  juvenile.sorted.bam\n│   ├── [3.9M]  juvenile.sorted.bam.bai\n│   └── [3.7M]  t_data.ctab\n├── [4.0K]  larvae\n│   ├── [2.7M]  e2t.ctab\n│   ├── [ 15M]  e_data.ctab\n│   ├── [2.3M]  i2t.ctab\n│   ├── [7.3M]  i_data.ctab\n│   ├── [ 489]  larvae_checksums.md5\n│   ├── [5.4M]  larvae.cov_refs.gtf\n│   ├── [ 45M]  larvae.gtf\n│   ├── [ 645]  larvae-hisat2_stats.txt\n│   ├── [7.9G]  larvae.sorted.bam\n│   ├── [1.5M]  larvae.sorted.bam.bai\n│   └── [3.7M]  t_data.ctab\n├── [2.6M]  Panopea-generosa-v1.0-gffcmp.Panopea-generosa-v1.0.stringtie.gtf.refmap\n├── [8.7M]  Panopea-generosa-v1.0-gffcmp.Panopea-generosa-v1.0.stringtie.gtf.tmap\n├── [ 73M]  Panopea-generosa-v1.0.stringtie.gtf\n├── [ 19K]  program_options.log\n├── [ 42M]  slurm-4571580.out\n├── [ 139]  sorted_bams.list\n└── [1.1K]  system_path.log\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Transcript Alignments - P.generosa RNA-seq Alignments for lncRNA Identification Using Hisat2 StingTie and gffcompare on Mox","date":"2023-04-26 14:20","categories":["gffcompare","mox","Panopea generosa","Pacific geoduck","lncRNA","StringTie","Hisat2","2023","Miscellaneous"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}