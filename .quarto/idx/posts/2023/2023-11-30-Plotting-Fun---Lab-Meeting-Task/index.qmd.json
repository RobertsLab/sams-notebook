{"title":"Plotting Fun - Lab Meeting Task","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","title":"Plotting Fun - Lab Meeting Task","date":"2023-11-30","draft":false,"engine":"knitr","categories":["plotting","R"]},"headingText":"Initial setup","containsRefs":false,"markdown":"\nFor today's lab meeting, Steven tasked us with the following on Wednesday:\n\n> For lab meeting Thursday the topic is \"Plots\". Before the meeting make sure to create a notebook post where you show-off a plot of something you did in November, including showing the code used to generate the plot. :bar_chart: - Drop the url to the notebook post below.\n\nSo, drawing a blank on what to plot, I opted to visualize commit history for the [Coral E5 deep dive repo](https://github.com/urol-e5/deep-dive) (GitHub repo).\n\nLet's start with just trying to plot commits per day.\n\n\n## Load libraries\n```{r load-libraries}\n#| code-fold: false\n#| echo: false\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n\n```{r check-deep-dive-existence}\n# Check if the '/home/sam/gitrepos/deep-dive' directory exists\nif (!file.exists(\"/home/sam/gitrepos/deep-dive\")) {\n  # If not, clone the repository\n  system(\"cd /home/sam/gitrepos && git clone git@github.com:urol-e5/deep-dive.git\")\n}\n```\n\n## Set Git Repo Path\n```{r set-git-repo-path}\n#| code-fold: false\nrepo_path <- \"/home/sam/gitrepos/deep-dive/\"\n```\n\n## Set date range\n```{r set-date-range}\n#| code-fold: false\n\n# Set date range\nstart_date <- as.Date(\"2023-11-01\")\nend_date <- as.Date(\"2023-11-30\")\n\n# Catpures all days in range\nall_days <- data.frame(Date = seq(start_date, end_date, by = \"day\"))\n\nhead(all_days)\n```\n\n## Define the Git command to get commit dates using `system()`\n```{r set-git-command}\n#| code-fold: false\ngit_command <- paste(\"git --git-dir=\",\n                     repo_path, \".git log --pretty=format:%ad --date=short --after=\",\n                     start_date,\n                     \" --before=\",\n                     end_date,\n                     \" --all\",\n                     sep=\"\")\n\nprint(git_command)\n```\n\n# Data manipulation\n\n## Excecute git command\n```{r run-git-command}\n#| code-fold: false\ncommit_info <- system(git_command, intern = TRUE)\n\nstr(commit_info)\n```\n\n## Convert to Dates structure\n```{r convert-commit-dates}\n#| code-fold: false\ncommit_dates <- as.Date(gsub(\"'\", \"\", commit_info))\n\nstr(commit_dates)\n```\n\n## Count number of commits\n\nThis will create a two-column dataframe (Date, Commits)\nand replace dates with 0 commits (NAs) with `0`.\n\n```{r count-commits}\n#| code-fold: false\n\n# This counts number of commits on each date.\ncommit_table <- table(commit_dates)\nstr(commit_table)\n\nall_days <- merge(\n  all_days,\n  data.frame(\n    Date = as.Date(\n      names(commit_table)\n      ),\n    Commits = as.numeric(\n      commit_table)\n    ),\n  all.x = TRUE,\n  by = \"Date\")\n\n# Assigns value of `0` to all NAs\nall_days$Commits[is.na(all_days$Commits)] <- 0\n\nhead(all_days)\n```\n\n\n\n# Plot all commits per day\n```{r plot-all-commits-per-day}\n#| code-fold: false\n#| label: bar-plot-all-commits\n#| fig-cap: \"Bar plot of all November 2023 commits\"\nggplot(all_days, aes(x = Date, y = Commits)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Commits per Day in Nov 2023\", x = \"Date\", y = \"Number of Commits\") +\n  theme_minimal()\n```\n\nNow, let's try to look at commits per day by author...\n\n# Commits per day per author\n\n## Create a data frame with all days in November\n```{r df-all-days-november}\n#| code-fold: false\n\nall_days <- data.frame(Date = seq(start_date, end_date, by = \"day\"))\n```\n\n## New git command\nThis adds author to format output\n```{r update-git-command}\n#| code-fold: false\n\ngit_command <- paste(\"git --git-dir=\",repo_path, \".git log --date=short --all --format='%ad %an'\", sep=\"\")\n\ncommit_info <- system(git_command, intern = TRUE)\n```\n\n## Split the commit information into date and author\n```{r split-commit-info}\n#| code-fold: false\n\ncommit_info_split <- strsplit(commit_info, \" \")\ncommit_dates <- as.Date(sapply(commit_info_split, \"[[\", 1))\ncommit_authors <- sapply(commit_info_split, \"[[\", 2)\n\nstr(commit_dates)\nstr(commit_authors)\n```\n\n## Create data frame with commits and authors\n```{r df-with-authors-dates}\n#| code-fold: false\n\n# Create a data frame with commit information\ncommit_data <- data.frame(Date = commit_dates, Author = commit_authors)\nhead(commit_data)\nstr(commit_data)\n```\n\n### Update dataframe to include all days in November\n\n```{r df-include-all-days-in-Nov}\n#| code-fold: false\nall_days <- merge(all_days, commit_data, all.x = TRUE, by = \"Date\")\n\nstr(all_days)\n```\n\n\n### Update dataframe with commit counts per author\n```{r count-commits-by-author-per-day}\n#| code-fold: false\nall_days <- all_days %>%\n  group_by(Date, Author) %>%\n  summarise(Commits = n())\n\nstr(all_days)\n```\n\n# Plot commits per day per author\n```{r plot-commits-per-day-per-author}\n#| code-fold: false\n#| label: stacked-bar-plot-commits-by-author\n#| fig-cap: \"Stacked bar plot of November 2023 commits per day per author\"\nggplot(all_days, aes(x = Date, y = Commits, fill = Author)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Commits by Author per Day in Nov 2023\", x = \"Date\", y = \"Number of Commits\") +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set2\")\n```\n","srcMarkdownNoYaml":"\nFor today's lab meeting, Steven tasked us with the following on Wednesday:\n\n> For lab meeting Thursday the topic is \"Plots\". Before the meeting make sure to create a notebook post where you show-off a plot of something you did in November, including showing the code used to generate the plot. :bar_chart: - Drop the url to the notebook post below.\n\nSo, drawing a blank on what to plot, I opted to visualize commit history for the [Coral E5 deep dive repo](https://github.com/urol-e5/deep-dive) (GitHub repo).\n\nLet's start with just trying to plot commits per day.\n\n# Initial setup\n\n## Load libraries\n```{r load-libraries}\n#| code-fold: false\n#| echo: false\nlibrary(ggplot2)\nlibrary(dplyr)\n```\n\n```{r check-deep-dive-existence}\n# Check if the '/home/sam/gitrepos/deep-dive' directory exists\nif (!file.exists(\"/home/sam/gitrepos/deep-dive\")) {\n  # If not, clone the repository\n  system(\"cd /home/sam/gitrepos && git clone git@github.com:urol-e5/deep-dive.git\")\n}\n```\n\n## Set Git Repo Path\n```{r set-git-repo-path}\n#| code-fold: false\nrepo_path <- \"/home/sam/gitrepos/deep-dive/\"\n```\n\n## Set date range\n```{r set-date-range}\n#| code-fold: false\n\n# Set date range\nstart_date <- as.Date(\"2023-11-01\")\nend_date <- as.Date(\"2023-11-30\")\n\n# Catpures all days in range\nall_days <- data.frame(Date = seq(start_date, end_date, by = \"day\"))\n\nhead(all_days)\n```\n\n## Define the Git command to get commit dates using `system()`\n```{r set-git-command}\n#| code-fold: false\ngit_command <- paste(\"git --git-dir=\",\n                     repo_path, \".git log --pretty=format:%ad --date=short --after=\",\n                     start_date,\n                     \" --before=\",\n                     end_date,\n                     \" --all\",\n                     sep=\"\")\n\nprint(git_command)\n```\n\n# Data manipulation\n\n## Excecute git command\n```{r run-git-command}\n#| code-fold: false\ncommit_info <- system(git_command, intern = TRUE)\n\nstr(commit_info)\n```\n\n## Convert to Dates structure\n```{r convert-commit-dates}\n#| code-fold: false\ncommit_dates <- as.Date(gsub(\"'\", \"\", commit_info))\n\nstr(commit_dates)\n```\n\n## Count number of commits\n\nThis will create a two-column dataframe (Date, Commits)\nand replace dates with 0 commits (NAs) with `0`.\n\n```{r count-commits}\n#| code-fold: false\n\n# This counts number of commits on each date.\ncommit_table <- table(commit_dates)\nstr(commit_table)\n\nall_days <- merge(\n  all_days,\n  data.frame(\n    Date = as.Date(\n      names(commit_table)\n      ),\n    Commits = as.numeric(\n      commit_table)\n    ),\n  all.x = TRUE,\n  by = \"Date\")\n\n# Assigns value of `0` to all NAs\nall_days$Commits[is.na(all_days$Commits)] <- 0\n\nhead(all_days)\n```\n\n\n\n# Plot all commits per day\n```{r plot-all-commits-per-day}\n#| code-fold: false\n#| label: bar-plot-all-commits\n#| fig-cap: \"Bar plot of all November 2023 commits\"\nggplot(all_days, aes(x = Date, y = Commits)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Commits per Day in Nov 2023\", x = \"Date\", y = \"Number of Commits\") +\n  theme_minimal()\n```\n\nNow, let's try to look at commits per day by author...\n\n# Commits per day per author\n\n## Create a data frame with all days in November\n```{r df-all-days-november}\n#| code-fold: false\n\nall_days <- data.frame(Date = seq(start_date, end_date, by = \"day\"))\n```\n\n## New git command\nThis adds author to format output\n```{r update-git-command}\n#| code-fold: false\n\ngit_command <- paste(\"git --git-dir=\",repo_path, \".git log --date=short --all --format='%ad %an'\", sep=\"\")\n\ncommit_info <- system(git_command, intern = TRUE)\n```\n\n## Split the commit information into date and author\n```{r split-commit-info}\n#| code-fold: false\n\ncommit_info_split <- strsplit(commit_info, \" \")\ncommit_dates <- as.Date(sapply(commit_info_split, \"[[\", 1))\ncommit_authors <- sapply(commit_info_split, \"[[\", 2)\n\nstr(commit_dates)\nstr(commit_authors)\n```\n\n## Create data frame with commits and authors\n```{r df-with-authors-dates}\n#| code-fold: false\n\n# Create a data frame with commit information\ncommit_data <- data.frame(Date = commit_dates, Author = commit_authors)\nhead(commit_data)\nstr(commit_data)\n```\n\n### Update dataframe to include all days in November\n\n```{r df-include-all-days-in-Nov}\n#| code-fold: false\nall_days <- merge(all_days, commit_data, all.x = TRUE, by = \"Date\")\n\nstr(all_days)\n```\n\n\n### Update dataframe with commit counts per author\n```{r count-commits-by-author-per-day}\n#| code-fold: false\nall_days <- all_days %>%\n  group_by(Date, Author) %>%\n  summarise(Commits = n())\n\nstr(all_days)\n```\n\n# Plot commits per day per author\n```{r plot-commits-per-day-per-author}\n#| code-fold: false\n#| label: stacked-bar-plot-commits-by-author\n#| fig-cap: \"Stacked bar plot of November 2023 commits per day per author\"\nggplot(all_days, aes(x = Date, y = Commits, fill = Author)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Commits by Author per Day in Nov 2023\", x = \"Date\", y = \"Number of Commits\") +\n  theme_minimal() +\n  scale_fill_brewer(palette = \"Set2\")\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","title":"Plotting Fun - Lab Meeting Task","date":"2023-11-30","draft":false,"categories":["plotting","R"]},"extensions":{"book":{"multiFile":true}}}},"draft":false,"projectFormats":["html"]}