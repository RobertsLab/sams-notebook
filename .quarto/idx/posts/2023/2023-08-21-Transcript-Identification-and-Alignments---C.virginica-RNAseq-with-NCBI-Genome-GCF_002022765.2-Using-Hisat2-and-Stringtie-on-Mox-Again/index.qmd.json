{"title":"Transcript Identification and Alignments - C.virginica RNAseq with NCBI Genome GCF_002022765.2 Using Hisat2 and Stringtie on Mox Again","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Transcript Identification and Alignments - C.virginica RNAseq with NCBI Genome GCF_002022765.2 Using Hisat2 and Stringtie on Mox Again","date":"2023-08-21 14:41","categories":["hisat2","mox","Crassostrea virginica","stringtie","RNAseq","Eastern oyster","2023","Miscellaneous"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nIn the process of generating expression matrices for [CEABIGR](https://github.com/sr320/ceabigr/tree/main/data) (GitHub repo), and in turn distance matrices for these samples, I realized a couple of things:\n\n1. [DESeq2](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html) has a function (`assay()`) that will automatically calculate/produce the distance matrices I want.\n\n2. [`StringTie`](https://ccb.jhu.edu/software/stringtie/) comes with a script (`prepDE.py3`) which will spit out expression matrices formatted for import into [DESeq2](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html).\n\nSo, this should be easy, right? Of course not. LOL. When trying to run the [`StringTie`](https://ccb.jhu.edu/software/stringtie/) `prepDE.py3` script on the [original output from Stringtie on 20220225](../../2022/2022-02-25-Transcript-Identification-and-Alignments---C.virginica-RNAseq-with-NCBI-Genome-GCF_002022765.2-Using-Hisat2-and-Stringtie-on-Mox/index.qmd) (notebook), I encountered a parsing error for the very first GTF file it encountered. Considering the GTF file(s) was/are generated by [`StringTie`](https://ccb.jhu.edu/software/stringtie/), it seemed odd that it wouldn't be able to parse the GTF. Doing some investigating, I came across a number of [issues in the Stringtie GitHub repo](https://github.com/gpertea/stringtie/issues) indicating that using a version of Stringtie (e.g. <`v2.2.0`), with a certain combination of arguments (specifically, the `-e` argument seemed potentially problematic) could create various errors if using that output with an updated version of [`StringTie`](https://ccb.jhu.edu/software/stringtie/). Well, I was doing just that! Was it causing the parsing error I was experiencing? Don't know, but I'd also like to avoid the other downstream errors potentially associated with the output(s) from the older version of Stringtie, so I've decided to re-run the analysis using a the most current version of [`StringTie`](https://ccb.jhu.edu/software/stringtie/).\n\n\nI used the [trimmed RNAseq reads from 20220224](../../2022/2022-02-24-Trimming---Additional-20bp-from-C.virginica-Gonad-RNAseq-with-fastp-on-Mox/index.qmd) (notebook). I also needed to identify alternative transcripts in the [_Crassostrea virginica_ (Eastern oyster)](https://en.wikipedia.org/wiki/Eastern_oyster) gonad RNAseq data we have. I previously used [`HISAT2`](https://daehwankimlab.github.io/hisat2/) to index the NCBI [_Crassostrea virginica_ (Eastern oyster)](https://en.wikipedia.org/wiki/Eastern_oyster) genome and identify exon/splice sites [on 20210720](../../2021/2021-07-20-Genome-Annotations---Splice-Site-and-Exon-Extractions-for-C.virginica-GCF_002022765.2-Genome-Using-Hisat2-on-Mox/index.qmd). Then, I used this genome index to run [`StringTie`](https://ccb.jhu.edu/software/stringtie/) on Mox in order to map sequencing reads to the genome/alternative isoforms.\n\nJob was run on Mox.\n\nSkip to [RESULTS section](#results).\n\n\nSLURM Script (GitHub):\n\n- [20230821-cvir-stringtie-GCF_002022765.2-isoforms.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20230821-cvir-stringtie-GCF_002022765.2-isoforms.sh)\n\n\n```bash\n#!/bin/bash\n#SBATCH --job-name=20230821-cvir-stringtie-GCF_002022765.2-isoforms\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=3-12:00:00\n## Memory per node\n#SBATCH --mem=500G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20230821-cvir-stringtie-GCF_002022765.2-isoforms\n\n\n## Script using Stringtie with NCBI C.virginica genome assembly\n## and HiSat2 index generated on 20210714.\n\n## Expects FastQ input filenames to match <sample name>_R[12].fastp-trim.20bp-5prime.20220224.fq.gz\n\n## This is an updated run of 20230821-cvir-stringtie-GCF_002022765.2-isoforms. The previous run used an\n## outdated version of StringTie, which may have led to some downstream issues.\n\n\n###################################################################################\n# These variables need to be set by user\n\n## Assign Variables\n\n# Set number of CPUs to use\nthreads=28\n\n# Index name for Hisat2 use\n# Needs to match index naem used in previous Hisat2 indexing step\ngenome_index_name=\"cvir_GCF_002022765.2\"\n\n# Location of Hisat2 index files\n# Must keep variable name formatting, as it's used by HiSat2\nHISAT2_INDEXES=$(pwd)\nexport HISAT2_INDEXES\n\n# Paths to programs\nhisat2_dir=\"/gscratch/srlab/programs/hisat2-2.1.0\"\nhisat2=\"${hisat2_dir}/hisat2\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\nstringtie=\"/gscratch/srlab/programs/stringtie-2.2.1.Linux_x86_64/stringtie\"\nprepDE=\"/gscratch/srlab/programs/stringtie-2.2.1.Linux_x86_64/prepDE.py3\"\n\n# Input/output files\ngenome_index_dir=\"/gscratch/srlab/sam/data/C_virginica/genomes\"\ngenome_gff=\"${genome_index_dir}/GCF_002022765.2_C_virginica-3.0_genomic.gff\"\nfastq_dir=\"/gscratch/srlab/sam/data/C_virginica/RNAseq/\"\ngtf_list=\"gtf_list.txt\"\nmerged_bam=\"20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam\"\n\n# Declare associative array of sample names and metadata\ndeclare -A samples_associative_array=()\n\n# Set total number of samples (NOT number of FastQ files)\ntotal_samples=26\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=(\n[hisat2]=\"${hisat2}\" \\\n[prepDE]=\"${prepDE}\" \\\n[samtools_index]=\"${samtools} index\" \\\n[samtools_merge]=\"${samtools} merge\" \\\n[samtools_sort]=\"${samtools} sort\" \\\n[samtools_view]=\"${samtools} view\" \\\n[stringtie]=\"${stringtie}\"\n)\n\n\n###################################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n## Load associative array\n## Only need to use one set of reads to capture sample name\n\n# Set sample counter for array verification\nsample_counter=0\n\n# Load array\nfor fastq in \"${fastq_dir}\"*_R1.fastp-trim.20bp-5prime.20220224.fq.gz\ndo\n  # Increment counter\n  ((sample_counter+=1))\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from first _-delimited field\n  sample_name=$(echo \"${sample_name}\" | awk -F \"_\" '{print $1}')\n  \n  # Set treatment condition for each sample\n  if [[ \"${sample_name}\" == \"S12M\" ]] \\\n  || [[ \"${sample_name}\" == \"S22F\" ]] \\\n  || [[ \"${sample_name}\" == \"S23M\" ]] \\\n  || [[ \"${sample_name}\" == \"S29F\" ]] \\\n  || [[ \"${sample_name}\" == \"S31M\" ]] \\\n  || [[ \"${sample_name}\" == \"S35F\" ]] \\\n  || [[ \"${sample_name}\" == \"S36F\" ]] \\\n  || [[ \"${sample_name}\" == \"S3F\" ]] \\\n  || [[ \"${sample_name}\" == \"S41F\" ]] \\\n  || [[ \"${sample_name}\" == \"S48F\" ]] \\\n  || [[ \"${sample_name}\" == \"S50F\" ]] \\\n  || [[ \"${sample_name}\" == \"S59M\" ]] \\\n  || [[ \"${sample_name}\" == \"S77F\" ]] \\\n  || [[ \"${sample_name}\" == \"S9M\" ]]\n  then\n    treatment=\"exposed\"\n  else\n    treatment=\"control\"\n  fi\n\n  # Append to associative array\n  samples_associative_array+=([\"${sample_name}\"]=\"${treatment}\")\n\ndone\n\n# Check array size to confirm it has all expected samples\n# Exit if mismatch\nif [[ \"${#samples_associative_array[@]}\" != \"${sample_counter}\" ]] \\\n|| [[ \"${#samples_associative_array[@]}\" != \"${total_samples}\" ]]\n  then\n    echo \"samples_associative_array doesn't have all 26 samples.\"\n    echo \"\"\n    echo \"samples_associative_array contents:\"\n    echo \"\"\n    for item in \"${!samples_associative_array[@]}\"\n    do\n      printf \"%s\\t%s\\n\" \"${item}\" \"${samples_associative_array[${item}]}\"\n    done\n\n    exit\nfi\n\n# Copy Hisat2 genome index files\nrsync -av \"${genome_index_dir}\"/${genome_index_name}*.ht2 .\n\nfor sample in \"${!samples_associative_array[@]}\"\ndo\n\n  ## Inititalize arrays\n  fastq_array_R1=()\n  fastq_array_R2=()\n\n  # Create array of fastq R1 files\n  # and generated MD5 checksums file.\n  for fastq in \"${fastq_dir}\"\"${sample}\"*_R1.fastp-trim.20bp-5prime.20220224.fq.gz\n  do\n    fastq_array_R1+=(\"${fastq}\")\n    echo \"Generating checksum for ${fastq}...\"\n    md5sum \"${fastq}\" >> input_fastqs_checksums.md5\n    echo \"Checksum for ${fastq} completed.\"\n    echo \"\"\n  done\n\n  # Create array of fastq R2 files\n  for fastq in \"${fastq_dir}\"\"${sample}\"*_R2.fastp-trim.20bp-5prime.20220224.fq.gz\n  do\n    fastq_array_R2+=(\"${fastq}\")\n    echo \"Generating checksum for ${fastq}...\"\n    md5sum \"${fastq}\" >> input_fastqs_checksums.md5\n    echo \"Checksum for ${fastq} completed.\"\n    echo \"\"\n  done\n\n  # Create comma-separated lists of FastQs for Hisat2\n  printf -v joined_R1 '%s,' \"${fastq_array_R1[@]}\"\n  fastq_list_R1=$(echo \"${joined_R1%,}\")\n\n  printf -v joined_R2 '%s,' \"${fastq_array_R2[@]}\"\n  fastq_list_R2=$(echo \"${joined_R2%,}\")\n\n  # Create and switch to dedicated sample directory\n  mkdir \"${sample}\" && cd \"$_\"\n\n  # Hisat2 alignments\n  # Sets read group info (RG) using samples array\n  \"${programs_array[hisat2]}\" \\\n  -x \"${genome_index_name}\" \\\n  -1 \"${fastq_list_R1}\" \\\n  -2 \"${fastq_list_R2}\" \\\n  -S \"${sample}\".sam \\\n  --rg-id \"${sample}\" \\\n  --rg \"SM:\"\"${samples_associative_array[$sample]}\" \\\n  2> \"${sample}\"_hisat2.err\n\n  # Sort SAM files, convert to BAM, and index\n  ${programs_array[samtools_view]} \\\n  -@ \"${threads}\" \\\n  -Su \"${sample}\".sam \\\n  | ${programs_array[samtools_sort]} - \\\n  -@ \"${threads}\" \\\n  -o \"${sample}\".sorted.bam\n  # Index BAM\n  ${programs_array[samtools_index]} \"${sample}\".sorted.bam\n\n\n  # Run stringtie on alignments\n  # Uses \"-B\" option to output tables intended for use in Ballgown\n  # Uses \"-e\" option; recommended when using \"-B\" option.\n  # Limits analysis to only reads alignments matching reference.\n  \"${programs_array[stringtie]}\" \"${sample}\".sorted.bam \\\n  -p \"${threads}\" \\\n  -o \"${sample}\".gtf \\\n  -G \"${genome_gff}\" \\\n  -C \"${sample}.cov_refs.gtf\" \\\n  -B \\\n  -e\n\n# Add GTFs to list file, only if non-empty\n# Identifies GTF files that only have header\n  gtf_lines=$(wc -l < \"${sample}\".gtf )\n  if [ \"${gtf_lines}\" -gt 2 ]; then\n    echo \"$(pwd)/${sample}.gtf\" >> ../\"${gtf_list}\"\n  fi\n\n  # Delete unneeded SAM files\n  rm ./*.sam\n\n  # Generate checksums\n  for file in *\n  do\n    md5sum \"${file}\" >> ${sample}_checksums.md5\n  done\n\n  # Move up to orig. working directory\n  cd ..\n\ndone\n\n# Merge all BAMs to singular BAM for use in transcriptome assembly later\n## Create list of sorted BAMs for merging\nfind . -name \"*sorted.bam\" > sorted_bams.list\n\n## Merge sorted BAMs\n${programs_array[samtools_merge]} \\\n-b sorted_bams.list \\\n${merged_bam} \\\n--threads ${threads}\n\n## Index merged BAM\n${programs_array[samtools_index]} ${merged_bam}\n\n\n\n# Create singular transcript file, using GTF list file\n\"${programs_array[stringtie]}\" --merge \\\n\"${gtf_list}\" \\\n-p \"${threads}\" \\\n-G \"${genome_gff}\" \\\n-o \"${genome_index_name}\".stringtie.gtf\n\n# Create file list for prepDE.py\nwhile read -r line\ndo\n  echo ${line##*/} ${line}\ndone < gtf_list.txt >> prepDE-sample_list.txt\n\n# Create count matrices for genes and transcripts\n# Compatible with import to DESeq2\npython3 \"${programs_array[prepDE]}\" --input=prepDE-sample_list.txt\n\n# Delete unneccessary index files\nrm \"${genome_index_name}\"*.ht2\n\n\n# Generate checksums\n# Uses find command to avoid passing\n# directory names to the md5sum command.\nfind . -maxdepth 1 -type f -exec md5sum {} + \\\n| tee --append checksums.md5\n\n#######################################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n\n    # Handle StringTie prepDE script\n    elif [[ \"${program}\" == \"prepDE\" ]]; then\n      python3 ${programs_array[$program]} -h\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\n  echo \"Finished logging programs options.\"\n  echo \"\"\nfi\n\n\n# Document programs in PATH (primarily for program version ID)\necho \"Logging system $PATH...\"\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\necho \"Finished logging system $PATH.\"\n```\n\n---\n\n# RESULTS\n\nTook about 2.5 days to run.\n\nOutput folder:\n\n- [20230821-cvir-stringtie-GCF_002022765.2-isoforms/](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/)\n\n  - List of input FastQs and checksums (text):\n\n    - [20230821-cvir-stringtie-GCF_002022765.2-isoforms/input_fastqs_checksums.md5](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/input_fastqs_checksums.md5)\n\n  - Full GTF file (GTF; 143MB):\n\n    - [20230821-cvir-stringtie-GCF_002022765.2-isoforms/cvir_GCF_002022765.2.stringtie.gtf](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/cvir_GCF_002022765.2.stringtie.gtf)\n\n  - Merged BAM file (79GB):\n\n    - [20230821-cvir-stringtie-GCF_002022765.2-isoforms/20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam)\n\n      - MD5 checksum:\n\n        - `466815fe9fa3f559b500ea8aff2de5b1`\n\n    - Merged BAM index file (useful for IGV):\n\n      - [20230821-cvir-stringtie-GCF_002022765.2-isoforms/20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam.bai](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam.bai)\n\n  - Gene counts matrix (CSV; 4.5MB)\n\n    - [gene_count_matrix.csv](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/gene_count_matrix.csv)\n\n  - Transcript counts matrix (CSV; 6.3MB)\n\n    - [transcript_count_matrix.csv](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/transcript_count_matrix.csv)\n\nSince there are a large number of folders/files, the resulting directory structure for all of the [`StringTie`](https://ccb.jhu.edu/software/stringtie/) output is [shown at the end of this post](#directory-tree). Here's a description of all the file types found in each directory:\n\n- `*.ctab`: See [`ballgown` documentation](https://github.com/alyssafrazee/ballgown) for description of these.\n\n- `*.checksums.md5`: MD5 checksums for all files in each directory.\n\n- `*.cov_refs.gtf`: Coverage GTF generate by [`StringTie`](https://ccb.jhu.edu/software/stringtie/) and used to generate final GTF for each sample.\n\n- `*.gtf`: Final GTF file produced by [`StringTie`](https://ccb.jhu.edu/software/stringtie/) for each sample.\n\n- `*_hisat2.err`: Standard error output from [`HISAT2`](https://daehwankimlab.github.io/hisat2/). Contains alignment info.\n\n- `*.sorted.bam`: Sorted BAM alignments file produced by [`HISAT2`](https://daehwankimlab.github.io/hisat2/).\n\n- `*.sorted.bam.bai`: BAM index file.\n\n\nThe [initial alignments from 20210726](https://robertslab.github.io/sams-notebook/posts/2021/2021-07-26-Transcript-Identification-and-Quantification---C.virginia-RNAseq-With-NCBI-Genome-GCF_002022765.2-Using-StringTie-on-Mox/) which accidentally used untrimmed sequencing reads had some truly abysmal alignment rates (males were ~30% and females were around 45%). This round is a _marked_ improvement. The females exhibit alignment rates around what one would expect (> 80%), while the males, even though relatively low (around 57%), it is drasticalliy better than the 30% seen when using the untrimmed reads. Still, the alignment rates are consistently low/lower in males, compared to the females. Not sure of what this means, but exploring some additional avenues to investigate (e.g. possible residual rRNA, possible contamination with other organismal RNA)\n\nHere's a table. The letter `M` or `F` in the sample name column indicates sex.\n\n\n| Sample | Alignment Rate |\n|--------|----------------|\n| S12M   | 58.09%         |\n| S13M   | 58.44%         |\n| S16F   | 81.08%         |\n| S19F   | 82.05%         |\n| S22F   | 82.16%         |\n| S23M   | 57.06%         |\n| S29F   | 75.92%         |\n| S31M   | 61.12%         |\n| S35F   | 81.95%         |\n| S36F   | 80.60%         |\n| S39F   | 82.52%         |\n| S3F    | 82.31%         |\n| S41F   | 78.38%         |\n| S44F   | 78.70%         |\n| S48M   | 57.60%         |\n| S50F   | 82.96%         |\n| S52F   | 73.20%         |\n| S53F   | 81.48%         |\n| S54F   | 77.75%         |\n| S59M   | 65.81%         |\n| S64M   | 71.53%         |\n| S6M    | 57.82%         |\n| S76F   | 82.82%         |\n| S77F   | 84.37%         |\n| S7M    | 58.74%         |\n| S9M    | 57.95%         |\n\n\nAs hoped/expected, these alignment rates are identical to [the previous run using an old version of Stringtie from 20220225](https://robertslab.github.io/sams-notebook/posts/2022/2022-02-25-Transcript-Identification-and-Alignments---C.virginica-RNAseq-with-NCBI-Genome-GCF_002022765.2-Using-Hisat2-and-Stringtie-on-Mox/) (notebook).\n\nNow, need to send this data back through Ballgown...\n\n---\n\n### Directory tree\n\n```bash\n├── 20230821-cvir-stringtie-GCF_002022765.2-isoforms.sh\n├── 20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam\n├── 20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam.bai\n├── checksums.md5\n├── cvir_GCF_002022765.2.stringtie.gtf\n├── gene_count_matrix.csv\n├── gtf_list.txt\n├── input_fastqs_checksums.md5\n├── prepDE-sample_list.txt\n├── program_options.log\n├── S12M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S12M_checksums.md5\n│   ├── S12M.cov_refs.gtf\n│   ├── S12M.gtf\n│   ├── S12M_hisat2.err\n│   ├── S12M.sorted.bam\n│   ├── S12M.sorted.bam.bai\n│   └── t_data.ctab\n├── S13M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S13M_checksums.md5\n│   ├── S13M.cov_refs.gtf\n│   ├── S13M.gtf\n│   ├── S13M_hisat2.err\n│   ├── S13M.sorted.bam\n│   ├── S13M.sorted.bam.bai\n│   └── t_data.ctab\n├── S16F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S16F_checksums.md5\n│   ├── S16F.cov_refs.gtf\n│   ├── S16F.gtf\n│   ├── S16F_hisat2.err\n│   ├── S16F.sorted.bam\n│   ├── S16F.sorted.bam.bai\n│   └── t_data.ctab\n├── S19F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S19F_checksums.md5\n│   ├── S19F.cov_refs.gtf\n│   ├── S19F.gtf\n│   ├── S19F_hisat2.err\n│   ├── S19F.sorted.bam\n│   ├── S19F.sorted.bam.bai\n│   └── t_data.ctab\n├── S22F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S22F_checksums.md5\n│   ├── S22F.cov_refs.gtf\n│   ├── S22F.gtf\n│   ├── S22F_hisat2.err\n│   ├── S22F.sorted.bam\n│   ├── S22F.sorted.bam.bai\n│   └── t_data.ctab\n├── S23M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S23M_checksums.md5\n│   ├── S23M.cov_refs.gtf\n│   ├── S23M.gtf\n│   ├── S23M_hisat2.err\n│   ├── S23M.sorted.bam\n│   ├── S23M.sorted.bam.bai\n│   └── t_data.ctab\n├── S29F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S29F_checksums.md5\n│   ├── S29F.cov_refs.gtf\n│   ├── S29F.gtf\n│   ├── S29F_hisat2.err\n│   ├── S29F.sorted.bam\n│   ├── S29F.sorted.bam.bai\n│   └── t_data.ctab\n├── S31M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S31M_checksums.md5\n│   ├── S31M.cov_refs.gtf\n│   ├── S31M.gtf\n│   ├── S31M_hisat2.err\n│   ├── S31M.sorted.bam\n│   ├── S31M.sorted.bam.bai\n│   └── t_data.ctab\n├── S35F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S35F_checksums.md5\n│   ├── S35F.cov_refs.gtf\n│   ├── S35F.gtf\n│   ├── S35F_hisat2.err\n│   ├── S35F.sorted.bam\n│   ├── S35F.sorted.bam.bai\n│   └── t_data.ctab\n├── S36F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S36F_checksums.md5\n│   ├── S36F.cov_refs.gtf\n│   ├── S36F.gtf\n│   ├── S36F_hisat2.err\n│   ├── S36F.sorted.bam\n│   ├── S36F.sorted.bam.bai\n│   └── t_data.ctab\n├── S39F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S39F_checksums.md5\n│   ├── S39F.cov_refs.gtf\n│   ├── S39F.gtf\n│   ├── S39F_hisat2.err\n│   ├── S39F.sorted.bam\n│   ├── S39F.sorted.bam.bai\n│   └── t_data.ctab\n├── S3F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S3F_checksums.md5\n│   ├── S3F.cov_refs.gtf\n│   ├── S3F.gtf\n│   ├── S3F_hisat2.err\n│   ├── S3F.sorted.bam\n│   ├── S3F.sorted.bam.bai\n│   └── t_data.ctab\n├── S41F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S41F_checksums.md5\n│   ├── S41F.cov_refs.gtf\n│   ├── S41F.gtf\n│   ├── S41F_hisat2.err\n│   ├── S41F.sorted.bam\n│   ├── S41F.sorted.bam.bai\n│   └── t_data.ctab\n├── S44F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S44F_checksums.md5\n│   ├── S44F.cov_refs.gtf\n│   ├── S44F.gtf\n│   ├── S44F_hisat2.err\n│   ├── S44F.sorted.bam\n│   ├── S44F.sorted.bam.bai\n│   └── t_data.ctab\n├── S48M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S48M_checksums.md5\n│   ├── S48M.cov_refs.gtf\n│   ├── S48M.gtf\n│   ├── S48M_hisat2.err\n│   ├── S48M.sorted.bam\n│   ├── S48M.sorted.bam.bai\n│   └── t_data.ctab\n├── S50F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S50F_checksums.md5\n│   ├── S50F.cov_refs.gtf\n│   ├── S50F.gtf\n│   ├── S50F_hisat2.err\n│   ├── S50F.sorted.bam\n│   ├── S50F.sorted.bam.bai\n│   └── t_data.ctab\n├── S52F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S52F_checksums.md5\n│   ├── S52F.cov_refs.gtf\n│   ├── S52F.gtf\n│   ├── S52F_hisat2.err\n│   ├── S52F.sorted.bam\n│   ├── S52F.sorted.bam.bai\n│   └── t_data.ctab\n├── S53F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S53F_checksums.md5\n│   ├── S53F.cov_refs.gtf\n│   ├── S53F.gtf\n│   ├── S53F_hisat2.err\n│   ├── S53F.sorted.bam\n│   ├── S53F.sorted.bam.bai\n│   └── t_data.ctab\n├── S54F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S54F_checksums.md5\n│   ├── S54F.cov_refs.gtf\n│   ├── S54F.gtf\n│   ├── S54F_hisat2.err\n│   ├── S54F.sorted.bam\n│   ├── S54F.sorted.bam.bai\n│   └── t_data.ctab\n├── S59M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S59M_checksums.md5\n│   ├── S59M.cov_refs.gtf\n│   ├── S59M.gtf\n│   ├── S59M_hisat2.err\n│   ├── S59M.sorted.bam\n│   ├── S59M.sorted.bam.bai\n│   └── t_data.ctab\n├── S64M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S64M_checksums.md5\n│   ├── S64M.cov_refs.gtf\n│   ├── S64M.gtf\n│   ├── S64M_hisat2.err\n│   ├── S64M.sorted.bam\n│   ├── S64M.sorted.bam.bai\n│   └── t_data.ctab\n├── S6M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S6M_checksums.md5\n│   ├── S6M.cov_refs.gtf\n│   ├── S6M.gtf\n│   ├── S6M_hisat2.err\n│   ├── S6M.sorted.bam\n│   ├── S6M.sorted.bam.bai\n│   └── t_data.ctab\n├── S76F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S76F_checksums.md5\n│   ├── S76F.cov_refs.gtf\n│   ├── S76F.gtf\n│   ├── S76F_hisat2.err\n│   ├── S76F.sorted.bam\n│   ├── S76F.sorted.bam.bai\n│   └── t_data.ctab\n├── S77F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S77F_checksums.md5\n│   ├── S77F.cov_refs.gtf\n│   ├── S77F.gtf\n│   ├── S77F_hisat2.err\n│   ├── S77F.sorted.bam\n│   ├── S77F.sorted.bam.bai\n│   └── t_data.ctab\n├── S7M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S7M_checksums.md5\n│   ├── S7M.cov_refs.gtf\n│   ├── S7M.gtf\n│   ├── S7M_hisat2.err\n│   ├── S7M.sorted.bam\n│   ├── S7M.sorted.bam.bai\n│   └── t_data.ctab\n├── S9M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S9M_checksums.md5\n│   ├── S9M.cov_refs.gtf\n│   ├── S9M.gtf\n│   ├── S9M_hisat2.err\n│   ├── S9M.sorted.bam\n│   ├── S9M.sorted.bam.bai\n│   └── t_data.ctab\n├── slurm-4778731.out\n├── slurm-4800642.out\n├── slurm-4800644.out\n├── sorted_bams.list\n├── system_path.log\n└── transcript_count_matrix.csv\n\n27 directories, 302 files\n```\n","srcMarkdownNoYaml":"\nIn the process of generating expression matrices for [CEABIGR](https://github.com/sr320/ceabigr/tree/main/data) (GitHub repo), and in turn distance matrices for these samples, I realized a couple of things:\n\n1. [DESeq2](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html) has a function (`assay()`) that will automatically calculate/produce the distance matrices I want.\n\n2. [`StringTie`](https://ccb.jhu.edu/software/stringtie/) comes with a script (`prepDE.py3`) which will spit out expression matrices formatted for import into [DESeq2](https://bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html).\n\nSo, this should be easy, right? Of course not. LOL. When trying to run the [`StringTie`](https://ccb.jhu.edu/software/stringtie/) `prepDE.py3` script on the [original output from Stringtie on 20220225](../../2022/2022-02-25-Transcript-Identification-and-Alignments---C.virginica-RNAseq-with-NCBI-Genome-GCF_002022765.2-Using-Hisat2-and-Stringtie-on-Mox/index.qmd) (notebook), I encountered a parsing error for the very first GTF file it encountered. Considering the GTF file(s) was/are generated by [`StringTie`](https://ccb.jhu.edu/software/stringtie/), it seemed odd that it wouldn't be able to parse the GTF. Doing some investigating, I came across a number of [issues in the Stringtie GitHub repo](https://github.com/gpertea/stringtie/issues) indicating that using a version of Stringtie (e.g. <`v2.2.0`), with a certain combination of arguments (specifically, the `-e` argument seemed potentially problematic) could create various errors if using that output with an updated version of [`StringTie`](https://ccb.jhu.edu/software/stringtie/). Well, I was doing just that! Was it causing the parsing error I was experiencing? Don't know, but I'd also like to avoid the other downstream errors potentially associated with the output(s) from the older version of Stringtie, so I've decided to re-run the analysis using a the most current version of [`StringTie`](https://ccb.jhu.edu/software/stringtie/).\n\n\nI used the [trimmed RNAseq reads from 20220224](../../2022/2022-02-24-Trimming---Additional-20bp-from-C.virginica-Gonad-RNAseq-with-fastp-on-Mox/index.qmd) (notebook). I also needed to identify alternative transcripts in the [_Crassostrea virginica_ (Eastern oyster)](https://en.wikipedia.org/wiki/Eastern_oyster) gonad RNAseq data we have. I previously used [`HISAT2`](https://daehwankimlab.github.io/hisat2/) to index the NCBI [_Crassostrea virginica_ (Eastern oyster)](https://en.wikipedia.org/wiki/Eastern_oyster) genome and identify exon/splice sites [on 20210720](../../2021/2021-07-20-Genome-Annotations---Splice-Site-and-Exon-Extractions-for-C.virginica-GCF_002022765.2-Genome-Using-Hisat2-on-Mox/index.qmd). Then, I used this genome index to run [`StringTie`](https://ccb.jhu.edu/software/stringtie/) on Mox in order to map sequencing reads to the genome/alternative isoforms.\n\nJob was run on Mox.\n\nSkip to [RESULTS section](#results).\n\n\nSLURM Script (GitHub):\n\n- [20230821-cvir-stringtie-GCF_002022765.2-isoforms.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20230821-cvir-stringtie-GCF_002022765.2-isoforms.sh)\n\n\n```bash\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=20230821-cvir-stringtie-GCF_002022765.2-isoforms\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=3-12:00:00\n## Memory per node\n#SBATCH --mem=500G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20230821-cvir-stringtie-GCF_002022765.2-isoforms\n\n\n## Script using Stringtie with NCBI C.virginica genome assembly\n## and HiSat2 index generated on 20210714.\n\n## Expects FastQ input filenames to match <sample name>_R[12].fastp-trim.20bp-5prime.20220224.fq.gz\n\n## This is an updated run of 20230821-cvir-stringtie-GCF_002022765.2-isoforms. The previous run used an\n## outdated version of StringTie, which may have led to some downstream issues.\n\n\n###################################################################################\n# These variables need to be set by user\n\n## Assign Variables\n\n# Set number of CPUs to use\nthreads=28\n\n# Index name for Hisat2 use\n# Needs to match index naem used in previous Hisat2 indexing step\ngenome_index_name=\"cvir_GCF_002022765.2\"\n\n# Location of Hisat2 index files\n# Must keep variable name formatting, as it's used by HiSat2\nHISAT2_INDEXES=$(pwd)\nexport HISAT2_INDEXES\n\n# Paths to programs\nhisat2_dir=\"/gscratch/srlab/programs/hisat2-2.1.0\"\nhisat2=\"${hisat2_dir}/hisat2\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\nstringtie=\"/gscratch/srlab/programs/stringtie-2.2.1.Linux_x86_64/stringtie\"\nprepDE=\"/gscratch/srlab/programs/stringtie-2.2.1.Linux_x86_64/prepDE.py3\"\n\n# Input/output files\ngenome_index_dir=\"/gscratch/srlab/sam/data/C_virginica/genomes\"\ngenome_gff=\"${genome_index_dir}/GCF_002022765.2_C_virginica-3.0_genomic.gff\"\nfastq_dir=\"/gscratch/srlab/sam/data/C_virginica/RNAseq/\"\ngtf_list=\"gtf_list.txt\"\nmerged_bam=\"20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam\"\n\n# Declare associative array of sample names and metadata\ndeclare -A samples_associative_array=()\n\n# Set total number of samples (NOT number of FastQ files)\ntotal_samples=26\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=(\n[hisat2]=\"${hisat2}\" \\\n[prepDE]=\"${prepDE}\" \\\n[samtools_index]=\"${samtools} index\" \\\n[samtools_merge]=\"${samtools} merge\" \\\n[samtools_sort]=\"${samtools} sort\" \\\n[samtools_view]=\"${samtools} view\" \\\n[stringtie]=\"${stringtie}\"\n)\n\n\n###################################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\n\nmodule load intel-python3_2017\n\n## Load associative array\n## Only need to use one set of reads to capture sample name\n\n# Set sample counter for array verification\nsample_counter=0\n\n# Load array\nfor fastq in \"${fastq_dir}\"*_R1.fastp-trim.20bp-5prime.20220224.fq.gz\ndo\n  # Increment counter\n  ((sample_counter+=1))\n\n  # Remove path\n  sample_name=\"${fastq##*/}\"\n\n  # Get sample name from first _-delimited field\n  sample_name=$(echo \"${sample_name}\" | awk -F \"_\" '{print $1}')\n  \n  # Set treatment condition for each sample\n  if [[ \"${sample_name}\" == \"S12M\" ]] \\\n  || [[ \"${sample_name}\" == \"S22F\" ]] \\\n  || [[ \"${sample_name}\" == \"S23M\" ]] \\\n  || [[ \"${sample_name}\" == \"S29F\" ]] \\\n  || [[ \"${sample_name}\" == \"S31M\" ]] \\\n  || [[ \"${sample_name}\" == \"S35F\" ]] \\\n  || [[ \"${sample_name}\" == \"S36F\" ]] \\\n  || [[ \"${sample_name}\" == \"S3F\" ]] \\\n  || [[ \"${sample_name}\" == \"S41F\" ]] \\\n  || [[ \"${sample_name}\" == \"S48F\" ]] \\\n  || [[ \"${sample_name}\" == \"S50F\" ]] \\\n  || [[ \"${sample_name}\" == \"S59M\" ]] \\\n  || [[ \"${sample_name}\" == \"S77F\" ]] \\\n  || [[ \"${sample_name}\" == \"S9M\" ]]\n  then\n    treatment=\"exposed\"\n  else\n    treatment=\"control\"\n  fi\n\n  # Append to associative array\n  samples_associative_array+=([\"${sample_name}\"]=\"${treatment}\")\n\ndone\n\n# Check array size to confirm it has all expected samples\n# Exit if mismatch\nif [[ \"${#samples_associative_array[@]}\" != \"${sample_counter}\" ]] \\\n|| [[ \"${#samples_associative_array[@]}\" != \"${total_samples}\" ]]\n  then\n    echo \"samples_associative_array doesn't have all 26 samples.\"\n    echo \"\"\n    echo \"samples_associative_array contents:\"\n    echo \"\"\n    for item in \"${!samples_associative_array[@]}\"\n    do\n      printf \"%s\\t%s\\n\" \"${item}\" \"${samples_associative_array[${item}]}\"\n    done\n\n    exit\nfi\n\n# Copy Hisat2 genome index files\nrsync -av \"${genome_index_dir}\"/${genome_index_name}*.ht2 .\n\nfor sample in \"${!samples_associative_array[@]}\"\ndo\n\n  ## Inititalize arrays\n  fastq_array_R1=()\n  fastq_array_R2=()\n\n  # Create array of fastq R1 files\n  # and generated MD5 checksums file.\n  for fastq in \"${fastq_dir}\"\"${sample}\"*_R1.fastp-trim.20bp-5prime.20220224.fq.gz\n  do\n    fastq_array_R1+=(\"${fastq}\")\n    echo \"Generating checksum for ${fastq}...\"\n    md5sum \"${fastq}\" >> input_fastqs_checksums.md5\n    echo \"Checksum for ${fastq} completed.\"\n    echo \"\"\n  done\n\n  # Create array of fastq R2 files\n  for fastq in \"${fastq_dir}\"\"${sample}\"*_R2.fastp-trim.20bp-5prime.20220224.fq.gz\n  do\n    fastq_array_R2+=(\"${fastq}\")\n    echo \"Generating checksum for ${fastq}...\"\n    md5sum \"${fastq}\" >> input_fastqs_checksums.md5\n    echo \"Checksum for ${fastq} completed.\"\n    echo \"\"\n  done\n\n  # Create comma-separated lists of FastQs for Hisat2\n  printf -v joined_R1 '%s,' \"${fastq_array_R1[@]}\"\n  fastq_list_R1=$(echo \"${joined_R1%,}\")\n\n  printf -v joined_R2 '%s,' \"${fastq_array_R2[@]}\"\n  fastq_list_R2=$(echo \"${joined_R2%,}\")\n\n  # Create and switch to dedicated sample directory\n  mkdir \"${sample}\" && cd \"$_\"\n\n  # Hisat2 alignments\n  # Sets read group info (RG) using samples array\n  \"${programs_array[hisat2]}\" \\\n  -x \"${genome_index_name}\" \\\n  -1 \"${fastq_list_R1}\" \\\n  -2 \"${fastq_list_R2}\" \\\n  -S \"${sample}\".sam \\\n  --rg-id \"${sample}\" \\\n  --rg \"SM:\"\"${samples_associative_array[$sample]}\" \\\n  2> \"${sample}\"_hisat2.err\n\n  # Sort SAM files, convert to BAM, and index\n  ${programs_array[samtools_view]} \\\n  -@ \"${threads}\" \\\n  -Su \"${sample}\".sam \\\n  | ${programs_array[samtools_sort]} - \\\n  -@ \"${threads}\" \\\n  -o \"${sample}\".sorted.bam\n  # Index BAM\n  ${programs_array[samtools_index]} \"${sample}\".sorted.bam\n\n\n  # Run stringtie on alignments\n  # Uses \"-B\" option to output tables intended for use in Ballgown\n  # Uses \"-e\" option; recommended when using \"-B\" option.\n  # Limits analysis to only reads alignments matching reference.\n  \"${programs_array[stringtie]}\" \"${sample}\".sorted.bam \\\n  -p \"${threads}\" \\\n  -o \"${sample}\".gtf \\\n  -G \"${genome_gff}\" \\\n  -C \"${sample}.cov_refs.gtf\" \\\n  -B \\\n  -e\n\n# Add GTFs to list file, only if non-empty\n# Identifies GTF files that only have header\n  gtf_lines=$(wc -l < \"${sample}\".gtf )\n  if [ \"${gtf_lines}\" -gt 2 ]; then\n    echo \"$(pwd)/${sample}.gtf\" >> ../\"${gtf_list}\"\n  fi\n\n  # Delete unneeded SAM files\n  rm ./*.sam\n\n  # Generate checksums\n  for file in *\n  do\n    md5sum \"${file}\" >> ${sample}_checksums.md5\n  done\n\n  # Move up to orig. working directory\n  cd ..\n\ndone\n\n# Merge all BAMs to singular BAM for use in transcriptome assembly later\n## Create list of sorted BAMs for merging\nfind . -name \"*sorted.bam\" > sorted_bams.list\n\n## Merge sorted BAMs\n${programs_array[samtools_merge]} \\\n-b sorted_bams.list \\\n${merged_bam} \\\n--threads ${threads}\n\n## Index merged BAM\n${programs_array[samtools_index]} ${merged_bam}\n\n\n\n# Create singular transcript file, using GTF list file\n\"${programs_array[stringtie]}\" --merge \\\n\"${gtf_list}\" \\\n-p \"${threads}\" \\\n-G \"${genome_gff}\" \\\n-o \"${genome_index_name}\".stringtie.gtf\n\n# Create file list for prepDE.py\nwhile read -r line\ndo\n  echo ${line##*/} ${line}\ndone < gtf_list.txt >> prepDE-sample_list.txt\n\n# Create count matrices for genes and transcripts\n# Compatible with import to DESeq2\npython3 \"${programs_array[prepDE]}\" --input=prepDE-sample_list.txt\n\n# Delete unneccessary index files\nrm \"${genome_index_name}\"*.ht2\n\n\n# Generate checksums\n# Uses find command to avoid passing\n# directory names to the md5sum command.\nfind . -maxdepth 1 -type f -exec md5sum {} + \\\n| tee --append checksums.md5\n\n#######################################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n\n    # Handle StringTie prepDE script\n    elif [[ \"${program}\" == \"prepDE\" ]]; then\n      python3 ${programs_array[$program]} -h\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\n  echo \"Finished logging programs options.\"\n  echo \"\"\nfi\n\n\n# Document programs in PATH (primarily for program version ID)\necho \"Logging system $PATH...\"\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\necho \"Finished logging system $PATH.\"\n```\n\n---\n\n# RESULTS\n\nTook about 2.5 days to run.\n\nOutput folder:\n\n- [20230821-cvir-stringtie-GCF_002022765.2-isoforms/](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/)\n\n  - List of input FastQs and checksums (text):\n\n    - [20230821-cvir-stringtie-GCF_002022765.2-isoforms/input_fastqs_checksums.md5](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/input_fastqs_checksums.md5)\n\n  - Full GTF file (GTF; 143MB):\n\n    - [20230821-cvir-stringtie-GCF_002022765.2-isoforms/cvir_GCF_002022765.2.stringtie.gtf](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/cvir_GCF_002022765.2.stringtie.gtf)\n\n  - Merged BAM file (79GB):\n\n    - [20230821-cvir-stringtie-GCF_002022765.2-isoforms/20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam)\n\n      - MD5 checksum:\n\n        - `466815fe9fa3f559b500ea8aff2de5b1`\n\n    - Merged BAM index file (useful for IGV):\n\n      - [20230821-cvir-stringtie-GCF_002022765.2-isoforms/20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam.bai](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam.bai)\n\n  - Gene counts matrix (CSV; 4.5MB)\n\n    - [gene_count_matrix.csv](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/gene_count_matrix.csv)\n\n  - Transcript counts matrix (CSV; 6.3MB)\n\n    - [transcript_count_matrix.csv](https://gannet.fish.washington.edu/Atumefaciens/20230821-cvir-stringtie-GCF_002022765.2-isoforms/transcript_count_matrix.csv)\n\nSince there are a large number of folders/files, the resulting directory structure for all of the [`StringTie`](https://ccb.jhu.edu/software/stringtie/) output is [shown at the end of this post](#directory-tree). Here's a description of all the file types found in each directory:\n\n- `*.ctab`: See [`ballgown` documentation](https://github.com/alyssafrazee/ballgown) for description of these.\n\n- `*.checksums.md5`: MD5 checksums for all files in each directory.\n\n- `*.cov_refs.gtf`: Coverage GTF generate by [`StringTie`](https://ccb.jhu.edu/software/stringtie/) and used to generate final GTF for each sample.\n\n- `*.gtf`: Final GTF file produced by [`StringTie`](https://ccb.jhu.edu/software/stringtie/) for each sample.\n\n- `*_hisat2.err`: Standard error output from [`HISAT2`](https://daehwankimlab.github.io/hisat2/). Contains alignment info.\n\n- `*.sorted.bam`: Sorted BAM alignments file produced by [`HISAT2`](https://daehwankimlab.github.io/hisat2/).\n\n- `*.sorted.bam.bai`: BAM index file.\n\n\nThe [initial alignments from 20210726](https://robertslab.github.io/sams-notebook/posts/2021/2021-07-26-Transcript-Identification-and-Quantification---C.virginia-RNAseq-With-NCBI-Genome-GCF_002022765.2-Using-StringTie-on-Mox/) which accidentally used untrimmed sequencing reads had some truly abysmal alignment rates (males were ~30% and females were around 45%). This round is a _marked_ improvement. The females exhibit alignment rates around what one would expect (> 80%), while the males, even though relatively low (around 57%), it is drasticalliy better than the 30% seen when using the untrimmed reads. Still, the alignment rates are consistently low/lower in males, compared to the females. Not sure of what this means, but exploring some additional avenues to investigate (e.g. possible residual rRNA, possible contamination with other organismal RNA)\n\nHere's a table. The letter `M` or `F` in the sample name column indicates sex.\n\n\n| Sample | Alignment Rate |\n|--------|----------------|\n| S12M   | 58.09%         |\n| S13M   | 58.44%         |\n| S16F   | 81.08%         |\n| S19F   | 82.05%         |\n| S22F   | 82.16%         |\n| S23M   | 57.06%         |\n| S29F   | 75.92%         |\n| S31M   | 61.12%         |\n| S35F   | 81.95%         |\n| S36F   | 80.60%         |\n| S39F   | 82.52%         |\n| S3F    | 82.31%         |\n| S41F   | 78.38%         |\n| S44F   | 78.70%         |\n| S48M   | 57.60%         |\n| S50F   | 82.96%         |\n| S52F   | 73.20%         |\n| S53F   | 81.48%         |\n| S54F   | 77.75%         |\n| S59M   | 65.81%         |\n| S64M   | 71.53%         |\n| S6M    | 57.82%         |\n| S76F   | 82.82%         |\n| S77F   | 84.37%         |\n| S7M    | 58.74%         |\n| S9M    | 57.95%         |\n\n\nAs hoped/expected, these alignment rates are identical to [the previous run using an old version of Stringtie from 20220225](https://robertslab.github.io/sams-notebook/posts/2022/2022-02-25-Transcript-Identification-and-Alignments---C.virginica-RNAseq-with-NCBI-Genome-GCF_002022765.2-Using-Hisat2-and-Stringtie-on-Mox/) (notebook).\n\nNow, need to send this data back through Ballgown...\n\n---\n\n### Directory tree\n\n```bash\n├── 20230821-cvir-stringtie-GCF_002022765.2-isoforms.sh\n├── 20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam\n├── 20230821_cvir_stringtie_GCF_002022765-sorted-bams-merged.bam.bai\n├── checksums.md5\n├── cvir_GCF_002022765.2.stringtie.gtf\n├── gene_count_matrix.csv\n├── gtf_list.txt\n├── input_fastqs_checksums.md5\n├── prepDE-sample_list.txt\n├── program_options.log\n├── S12M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S12M_checksums.md5\n│   ├── S12M.cov_refs.gtf\n│   ├── S12M.gtf\n│   ├── S12M_hisat2.err\n│   ├── S12M.sorted.bam\n│   ├── S12M.sorted.bam.bai\n│   └── t_data.ctab\n├── S13M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S13M_checksums.md5\n│   ├── S13M.cov_refs.gtf\n│   ├── S13M.gtf\n│   ├── S13M_hisat2.err\n│   ├── S13M.sorted.bam\n│   ├── S13M.sorted.bam.bai\n│   └── t_data.ctab\n├── S16F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S16F_checksums.md5\n│   ├── S16F.cov_refs.gtf\n│   ├── S16F.gtf\n│   ├── S16F_hisat2.err\n│   ├── S16F.sorted.bam\n│   ├── S16F.sorted.bam.bai\n│   └── t_data.ctab\n├── S19F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S19F_checksums.md5\n│   ├── S19F.cov_refs.gtf\n│   ├── S19F.gtf\n│   ├── S19F_hisat2.err\n│   ├── S19F.sorted.bam\n│   ├── S19F.sorted.bam.bai\n│   └── t_data.ctab\n├── S22F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S22F_checksums.md5\n│   ├── S22F.cov_refs.gtf\n│   ├── S22F.gtf\n│   ├── S22F_hisat2.err\n│   ├── S22F.sorted.bam\n│   ├── S22F.sorted.bam.bai\n│   └── t_data.ctab\n├── S23M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S23M_checksums.md5\n│   ├── S23M.cov_refs.gtf\n│   ├── S23M.gtf\n│   ├── S23M_hisat2.err\n│   ├── S23M.sorted.bam\n│   ├── S23M.sorted.bam.bai\n│   └── t_data.ctab\n├── S29F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S29F_checksums.md5\n│   ├── S29F.cov_refs.gtf\n│   ├── S29F.gtf\n│   ├── S29F_hisat2.err\n│   ├── S29F.sorted.bam\n│   ├── S29F.sorted.bam.bai\n│   └── t_data.ctab\n├── S31M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S31M_checksums.md5\n│   ├── S31M.cov_refs.gtf\n│   ├── S31M.gtf\n│   ├── S31M_hisat2.err\n│   ├── S31M.sorted.bam\n│   ├── S31M.sorted.bam.bai\n│   └── t_data.ctab\n├── S35F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S35F_checksums.md5\n│   ├── S35F.cov_refs.gtf\n│   ├── S35F.gtf\n│   ├── S35F_hisat2.err\n│   ├── S35F.sorted.bam\n│   ├── S35F.sorted.bam.bai\n│   └── t_data.ctab\n├── S36F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S36F_checksums.md5\n│   ├── S36F.cov_refs.gtf\n│   ├── S36F.gtf\n│   ├── S36F_hisat2.err\n│   ├── S36F.sorted.bam\n│   ├── S36F.sorted.bam.bai\n│   └── t_data.ctab\n├── S39F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S39F_checksums.md5\n│   ├── S39F.cov_refs.gtf\n│   ├── S39F.gtf\n│   ├── S39F_hisat2.err\n│   ├── S39F.sorted.bam\n│   ├── S39F.sorted.bam.bai\n│   └── t_data.ctab\n├── S3F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S3F_checksums.md5\n│   ├── S3F.cov_refs.gtf\n│   ├── S3F.gtf\n│   ├── S3F_hisat2.err\n│   ├── S3F.sorted.bam\n│   ├── S3F.sorted.bam.bai\n│   └── t_data.ctab\n├── S41F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S41F_checksums.md5\n│   ├── S41F.cov_refs.gtf\n│   ├── S41F.gtf\n│   ├── S41F_hisat2.err\n│   ├── S41F.sorted.bam\n│   ├── S41F.sorted.bam.bai\n│   └── t_data.ctab\n├── S44F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S44F_checksums.md5\n│   ├── S44F.cov_refs.gtf\n│   ├── S44F.gtf\n│   ├── S44F_hisat2.err\n│   ├── S44F.sorted.bam\n│   ├── S44F.sorted.bam.bai\n│   └── t_data.ctab\n├── S48M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S48M_checksums.md5\n│   ├── S48M.cov_refs.gtf\n│   ├── S48M.gtf\n│   ├── S48M_hisat2.err\n│   ├── S48M.sorted.bam\n│   ├── S48M.sorted.bam.bai\n│   └── t_data.ctab\n├── S50F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S50F_checksums.md5\n│   ├── S50F.cov_refs.gtf\n│   ├── S50F.gtf\n│   ├── S50F_hisat2.err\n│   ├── S50F.sorted.bam\n│   ├── S50F.sorted.bam.bai\n│   └── t_data.ctab\n├── S52F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S52F_checksums.md5\n│   ├── S52F.cov_refs.gtf\n│   ├── S52F.gtf\n│   ├── S52F_hisat2.err\n│   ├── S52F.sorted.bam\n│   ├── S52F.sorted.bam.bai\n│   └── t_data.ctab\n├── S53F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S53F_checksums.md5\n│   ├── S53F.cov_refs.gtf\n│   ├── S53F.gtf\n│   ├── S53F_hisat2.err\n│   ├── S53F.sorted.bam\n│   ├── S53F.sorted.bam.bai\n│   └── t_data.ctab\n├── S54F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S54F_checksums.md5\n│   ├── S54F.cov_refs.gtf\n│   ├── S54F.gtf\n│   ├── S54F_hisat2.err\n│   ├── S54F.sorted.bam\n│   ├── S54F.sorted.bam.bai\n│   └── t_data.ctab\n├── S59M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S59M_checksums.md5\n│   ├── S59M.cov_refs.gtf\n│   ├── S59M.gtf\n│   ├── S59M_hisat2.err\n│   ├── S59M.sorted.bam\n│   ├── S59M.sorted.bam.bai\n│   └── t_data.ctab\n├── S64M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S64M_checksums.md5\n│   ├── S64M.cov_refs.gtf\n│   ├── S64M.gtf\n│   ├── S64M_hisat2.err\n│   ├── S64M.sorted.bam\n│   ├── S64M.sorted.bam.bai\n│   └── t_data.ctab\n├── S6M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S6M_checksums.md5\n│   ├── S6M.cov_refs.gtf\n│   ├── S6M.gtf\n│   ├── S6M_hisat2.err\n│   ├── S6M.sorted.bam\n│   ├── S6M.sorted.bam.bai\n│   └── t_data.ctab\n├── S76F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S76F_checksums.md5\n│   ├── S76F.cov_refs.gtf\n│   ├── S76F.gtf\n│   ├── S76F_hisat2.err\n│   ├── S76F.sorted.bam\n│   ├── S76F.sorted.bam.bai\n│   └── t_data.ctab\n├── S77F\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S77F_checksums.md5\n│   ├── S77F.cov_refs.gtf\n│   ├── S77F.gtf\n│   ├── S77F_hisat2.err\n│   ├── S77F.sorted.bam\n│   ├── S77F.sorted.bam.bai\n│   └── t_data.ctab\n├── S7M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S7M_checksums.md5\n│   ├── S7M.cov_refs.gtf\n│   ├── S7M.gtf\n│   ├── S7M_hisat2.err\n│   ├── S7M.sorted.bam\n│   ├── S7M.sorted.bam.bai\n│   └── t_data.ctab\n├── S9M\n│   ├── e2t.ctab\n│   ├── e_data.ctab\n│   ├── i2t.ctab\n│   ├── i_data.ctab\n│   ├── S9M_checksums.md5\n│   ├── S9M.cov_refs.gtf\n│   ├── S9M.gtf\n│   ├── S9M_hisat2.err\n│   ├── S9M.sorted.bam\n│   ├── S9M.sorted.bam.bai\n│   └── t_data.ctab\n├── slurm-4778731.out\n├── slurm-4800642.out\n├── slurm-4800644.out\n├── sorted_bams.list\n├── system_path.log\n└── transcript_count_matrix.csv\n\n27 directories, 302 files\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Transcript Identification and Alignments - C.virginica RNAseq with NCBI Genome GCF_002022765.2 Using Hisat2 and Stringtie on Mox Again","date":"2023-08-21 14:41","categories":["hisat2","mox","Crassostrea virginica","stringtie","RNAseq","Eastern oyster","2023","Miscellaneous"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}