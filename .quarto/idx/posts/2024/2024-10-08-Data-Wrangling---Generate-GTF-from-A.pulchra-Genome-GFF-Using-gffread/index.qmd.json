{"title":"Data Wrangling - Generate GTF from A.pulchra Genome GFF Using gffread","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","title":"Data Wrangling - Generate GTF from A.pulchra Genome GFF Using gffread","date":"2024-10-08","draft":false,"engine":"knitr","categories":["2024","coral","Acropora pulchra","genome","GFF","GTF","gffread","E5","timeseries_molecular"],"bibliography":"references.bib"},"headingText":"1 Create a Bash variables file","containsRefs":false,"markdown":"\n\n::: callout-note\nThis notebook entry is knitted from [`urol-e5/timeseries_molecular/D-Apul/code/02.00-D-Apul-RNAseq-gff-to-gtf.Rmd`](https://github.com/urol-e5/timeseries_molecular/blob/cf654b9967c7a5d81e3aeca370b0c8f324badcbd/D-Apul/code/02.00-D-Apul-RNAseq-gff-to-gtf.Rmd) (GitHub), commit `cf654b9`.\n:::\n\nThis notebook will utilize [gffread](https://ccb.jhu.edu/software/stringtie/gff.shtml) [@pertea2020] to create an *A.pulchras* GTF file from the *A.pulchra* genome GFF, which is needed for downstream analysis with [HISAT2](https://github.com/DaehwanKimLab/hisat2); specifically for identification of exons and splice sites.\n\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"# Data directories\"\necho 'export timeseries_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular'\necho 'export genome_dir=\"${timeseries_dir}/D-Apul/data\"'\necho 'export output_dir_top=${timeseries_dir}/D-Apul/output/02.00-D-Apul-RNAseq-gff-to-gtf'\necho \"\"\n\necho \"# Input/output files\"\n\necho 'export genome_gff=\"${genome_dir}/Apulchra-genome.gff\"'\necho 'export transcripts_gtf=\"Apulchra-genome.gtf\"'\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export gffread=\"${programs_dir}/gffread-0.12.7.Linux_x86_64/gffread\"'\n\necho \"# Set number of CPUs to use\"\necho 'export threads=40'\necho \"\"\n\n\necho \"# Programs associative array\"\necho \"declare -A programs_array\"\necho \"programs_array=(\"\necho '[gffread]=\"${gffread}\" \\'\necho \")\"\necho \"\"\n\necho \"# Print formatting\"\necho 'export line=\"--------------------------------------------------------\"'\necho \"\"\n} > .bashvars\n\ncat .bashvars\n```\n\n```         \n#### Assign Variables ####\n\n# Data directories\nexport timeseries_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular\nexport genome_dir=\"${timeseries_dir}/D-Apul/data\"\nexport output_dir_top=${timeseries_dir}/D-Apul/output/02.00-D-Apul-RNAseq-gff-to-gtf\n\n# Input/output files\nexport genome_gff=\"${genome_dir}/Apulchra-genome.gff\"\nexport transcripts_gtf=\"Apulchra-genome.gtf\"\n# Paths to programs\nexport programs_dir=\"/home/shared\"\nexport gffread=\"${programs_dir}/gffread-0.12.7.Linux_x86_64/gffread\"\n# Set number of CPUs to use\nexport threads=40\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=(\n[gffread]=\"${gffread}\" \\\n)\n\n# Print formatting\nexport line=\"--------------------------------------------------------\"\n```\n\n# 2 Preview and Validate Genome GFF\n\n## 2.1 Inspect GFF\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make directories, if they don't exist\nmkdir --parents \"${output_dir_top}\"\n\nhead -n 20 \"${genome_gff}\"\n```\n\n```         \n##gff-version 3\nntLink_0    funannotate gene    1105    7056    .   +   .   ID=FUN_000001;\nntLink_0    funannotate mRNA    1105    7056    .   +   .   ID=FUN_000001-T1;Parent=FUN_000001;product=hypothetical protein;\nntLink_0    funannotate exon    1105    1188    .   +   .   ID=FUN_000001-T1.exon1;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    1861    1941    .   +   .   ID=FUN_000001-T1.exon2;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    2762    2839    .   +   .   ID=FUN_000001-T1.exon3;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    5044    7056    .   +   .   ID=FUN_000001-T1.exon4;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 1105    1188    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 1861    1941    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 2762    2839    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 5044    7056    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate gene    10215   15286   .   +   .   ID=FUN_000002;\nntLink_0    funannotate mRNA    10215   15286   .   +   .   ID=FUN_000002-T1;Parent=FUN_000002;product=hypothetical protein;\nntLink_0    funannotate exon    10215   10413   .   +   .   ID=FUN_000002-T1.exon1;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    10614   10676   .   +   .   ID=FUN_000002-T1.exon2;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    11272   11316   .   +   .   ID=FUN_000002-T1.exon3;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    11518   11591   .   +   .   ID=FUN_000002-T1.exon4;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    12241   12501   .   +   .   ID=FUN_000002-T1.exon5;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    13074   14383   .   +   .   ID=FUN_000002-T1.exon6;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    14722   14900   .   +   .   ID=FUN_000002-T1.exon7;Parent=FUN_000002-T1;\n```\n\n## 2.2 Valdiate GFF\n\nThis identifies if there are rows with \\>9 fields (which there shouldnâ€™t be in a [GFF3](http://gmod.org/wiki/GFF3)).\n\nAdditionally, it provides a preview of all rows lengths identified.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Capture number of fields (NF) in each row in array.\nfield_count_array=($(awk -F \"\\t\" '{print NF}' \"${genome_gff}\" | sort --unique))\n\n\n# Check array contents\necho \"List of number of fields in ${genome_gff}:\"\necho \"\"\nfor field_count in \"${field_count_array[@]}\"\ndo\n  echo \"${field_count}\"\ndone\n\necho \"\"\necho \"${line}\"\necho \"\"\n\n# Preview of each line \"type\" with a given number of fields\n# Check array contents\necho \"\"\nfor field_count in \"${field_count_array[@]}\"\ndo\n  echo \"Preview of lines with ${field_count} field(s):\"\n  echo \"\"\n  awk \\\n    -v field_count=\"${field_count}\" \\\n    -F \"\\t\" \\\n    'NF == field_count' \\\n    \"${genome_gff}\" \\\n    | head\n  echo \"\"\n  echo \"${line}\"\n  echo \"\"\ndone\n```\n\n```         \nList of number of fields in /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/D-Apul/data/Apulchra-genome.gff:\n\n1\n9\n\n--------------------------------------------------------\n\n\nPreview of lines with 1 field(s):\n\n##gff-version 3\n\n--------------------------------------------------------\n\nPreview of lines with 9 field(s):\n\nntLink_0    funannotate gene    1105    7056    .   +   .   ID=FUN_000001;\nntLink_0    funannotate mRNA    1105    7056    .   +   .   ID=FUN_000001-T1;Parent=FUN_000001;product=hypothetical protein;\nntLink_0    funannotate exon    1105    1188    .   +   .   ID=FUN_000001-T1.exon1;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    1861    1941    .   +   .   ID=FUN_000001-T1.exon2;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    2762    2839    .   +   .   ID=FUN_000001-T1.exon3;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    5044    7056    .   +   .   ID=FUN_000001-T1.exon4;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 1105    1188    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 1861    1941    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 2762    2839    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 5044    7056    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\n\n--------------------------------------------------------\n```\n\nGreat! This looks like a valid GFF. Can proceed with GTF generation.\n\n# 3 Generate GTF\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n${programs_array[gffread]} -E \\\n\"${genome_gff}\" -T \\\n1> ${output_dir_top}/\"${transcripts_gtf}\" \\\n2> ${output_dir_top}/gffread-gff_to_gtf.stderr\n```\n\n# 4 Inspect GTF\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\nhead ${output_dir_top}/\"${transcripts_gtf}\"\n```\n\n```         \nntLink_0    funannotate transcript  1105    7056    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\"\nntLink_0    funannotate exon    1105    1188    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate exon    1861    1941    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate exon    2762    2839    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate exon    5044    7056    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate CDS 1105    1188    .   +   0   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate CDS 1861    1941    .   +   0   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate CDS 2762    2839    .   +   0   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate CDS 5044    7056    .   +   0   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate transcript  10215   15286   .   +   .   transcript_id \"FUN_000002-T1\"; gene_id \"FUN_000002\"\n```\n\n## 4.1 Copy GTF to `D-Apul/data`\n\nTo help make this easier to locate, will copy to the `D-Apul/data` directory, which also contains the genome FastA, genome FastA index, and the genome GFF files.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncp ${output_dir_top}/\"${transcripts_gtf}\" \"${genome_dir}\"\n```\n","srcMarkdownNoYaml":"\n\n::: callout-note\nThis notebook entry is knitted from [`urol-e5/timeseries_molecular/D-Apul/code/02.00-D-Apul-RNAseq-gff-to-gtf.Rmd`](https://github.com/urol-e5/timeseries_molecular/blob/cf654b9967c7a5d81e3aeca370b0c8f324badcbd/D-Apul/code/02.00-D-Apul-RNAseq-gff-to-gtf.Rmd) (GitHub), commit `cf654b9`.\n:::\n\nThis notebook will utilize [gffread](https://ccb.jhu.edu/software/stringtie/gff.shtml) [@pertea2020] to create an *A.pulchras* GTF file from the *A.pulchra* genome GFF, which is needed for downstream analysis with [HISAT2](https://github.com/DaehwanKimLab/hisat2); specifically for identification of exons and splice sites.\n\n# 1 Create a Bash variables file\n\nThis allows usage of Bash variables across R Markdown chunks.\n\n``` bash\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"# Data directories\"\necho 'export timeseries_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular'\necho 'export genome_dir=\"${timeseries_dir}/D-Apul/data\"'\necho 'export output_dir_top=${timeseries_dir}/D-Apul/output/02.00-D-Apul-RNAseq-gff-to-gtf'\necho \"\"\n\necho \"# Input/output files\"\n\necho 'export genome_gff=\"${genome_dir}/Apulchra-genome.gff\"'\necho 'export transcripts_gtf=\"Apulchra-genome.gtf\"'\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export gffread=\"${programs_dir}/gffread-0.12.7.Linux_x86_64/gffread\"'\n\necho \"# Set number of CPUs to use\"\necho 'export threads=40'\necho \"\"\n\n\necho \"# Programs associative array\"\necho \"declare -A programs_array\"\necho \"programs_array=(\"\necho '[gffread]=\"${gffread}\" \\'\necho \")\"\necho \"\"\n\necho \"# Print formatting\"\necho 'export line=\"--------------------------------------------------------\"'\necho \"\"\n} > .bashvars\n\ncat .bashvars\n```\n\n```         \n#### Assign Variables ####\n\n# Data directories\nexport timeseries_dir=/home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular\nexport genome_dir=\"${timeseries_dir}/D-Apul/data\"\nexport output_dir_top=${timeseries_dir}/D-Apul/output/02.00-D-Apul-RNAseq-gff-to-gtf\n\n# Input/output files\nexport genome_gff=\"${genome_dir}/Apulchra-genome.gff\"\nexport transcripts_gtf=\"Apulchra-genome.gtf\"\n# Paths to programs\nexport programs_dir=\"/home/shared\"\nexport gffread=\"${programs_dir}/gffread-0.12.7.Linux_x86_64/gffread\"\n# Set number of CPUs to use\nexport threads=40\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=(\n[gffread]=\"${gffread}\" \\\n)\n\n# Print formatting\nexport line=\"--------------------------------------------------------\"\n```\n\n# 2 Preview and Validate Genome GFF\n\n## 2.1 Inspect GFF\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Make directories, if they don't exist\nmkdir --parents \"${output_dir_top}\"\n\nhead -n 20 \"${genome_gff}\"\n```\n\n```         \n##gff-version 3\nntLink_0    funannotate gene    1105    7056    .   +   .   ID=FUN_000001;\nntLink_0    funannotate mRNA    1105    7056    .   +   .   ID=FUN_000001-T1;Parent=FUN_000001;product=hypothetical protein;\nntLink_0    funannotate exon    1105    1188    .   +   .   ID=FUN_000001-T1.exon1;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    1861    1941    .   +   .   ID=FUN_000001-T1.exon2;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    2762    2839    .   +   .   ID=FUN_000001-T1.exon3;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    5044    7056    .   +   .   ID=FUN_000001-T1.exon4;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 1105    1188    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 1861    1941    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 2762    2839    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 5044    7056    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate gene    10215   15286   .   +   .   ID=FUN_000002;\nntLink_0    funannotate mRNA    10215   15286   .   +   .   ID=FUN_000002-T1;Parent=FUN_000002;product=hypothetical protein;\nntLink_0    funannotate exon    10215   10413   .   +   .   ID=FUN_000002-T1.exon1;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    10614   10676   .   +   .   ID=FUN_000002-T1.exon2;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    11272   11316   .   +   .   ID=FUN_000002-T1.exon3;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    11518   11591   .   +   .   ID=FUN_000002-T1.exon4;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    12241   12501   .   +   .   ID=FUN_000002-T1.exon5;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    13074   14383   .   +   .   ID=FUN_000002-T1.exon6;Parent=FUN_000002-T1;\nntLink_0    funannotate exon    14722   14900   .   +   .   ID=FUN_000002-T1.exon7;Parent=FUN_000002-T1;\n```\n\n## 2.2 Valdiate GFF\n\nThis identifies if there are rows with \\>9 fields (which there shouldnâ€™t be in a [GFF3](http://gmod.org/wiki/GFF3)).\n\nAdditionally, it provides a preview of all rows lengths identified.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n# Capture number of fields (NF) in each row in array.\nfield_count_array=($(awk -F \"\\t\" '{print NF}' \"${genome_gff}\" | sort --unique))\n\n\n# Check array contents\necho \"List of number of fields in ${genome_gff}:\"\necho \"\"\nfor field_count in \"${field_count_array[@]}\"\ndo\n  echo \"${field_count}\"\ndone\n\necho \"\"\necho \"${line}\"\necho \"\"\n\n# Preview of each line \"type\" with a given number of fields\n# Check array contents\necho \"\"\nfor field_count in \"${field_count_array[@]}\"\ndo\n  echo \"Preview of lines with ${field_count} field(s):\"\n  echo \"\"\n  awk \\\n    -v field_count=\"${field_count}\" \\\n    -F \"\\t\" \\\n    'NF == field_count' \\\n    \"${genome_gff}\" \\\n    | head\n  echo \"\"\n  echo \"${line}\"\n  echo \"\"\ndone\n```\n\n```         \nList of number of fields in /home/shared/8TB_HDD_01/sam/gitrepos/urol-e5/timeseries_molecular/D-Apul/data/Apulchra-genome.gff:\n\n1\n9\n\n--------------------------------------------------------\n\n\nPreview of lines with 1 field(s):\n\n##gff-version 3\n\n--------------------------------------------------------\n\nPreview of lines with 9 field(s):\n\nntLink_0    funannotate gene    1105    7056    .   +   .   ID=FUN_000001;\nntLink_0    funannotate mRNA    1105    7056    .   +   .   ID=FUN_000001-T1;Parent=FUN_000001;product=hypothetical protein;\nntLink_0    funannotate exon    1105    1188    .   +   .   ID=FUN_000001-T1.exon1;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    1861    1941    .   +   .   ID=FUN_000001-T1.exon2;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    2762    2839    .   +   .   ID=FUN_000001-T1.exon3;Parent=FUN_000001-T1;\nntLink_0    funannotate exon    5044    7056    .   +   .   ID=FUN_000001-T1.exon4;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 1105    1188    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 1861    1941    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 2762    2839    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\nntLink_0    funannotate CDS 5044    7056    .   +   0   ID=FUN_000001-T1.cds;Parent=FUN_000001-T1;\n\n--------------------------------------------------------\n```\n\nGreat! This looks like a valid GFF. Can proceed with GTF generation.\n\n# 3 Generate GTF\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\n${programs_array[gffread]} -E \\\n\"${genome_gff}\" -T \\\n1> ${output_dir_top}/\"${transcripts_gtf}\" \\\n2> ${output_dir_top}/gffread-gff_to_gtf.stderr\n```\n\n# 4 Inspect GTF\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\nhead ${output_dir_top}/\"${transcripts_gtf}\"\n```\n\n```         \nntLink_0    funannotate transcript  1105    7056    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\"\nntLink_0    funannotate exon    1105    1188    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate exon    1861    1941    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate exon    2762    2839    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate exon    5044    7056    .   +   .   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate CDS 1105    1188    .   +   0   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate CDS 1861    1941    .   +   0   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate CDS 2762    2839    .   +   0   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate CDS 5044    7056    .   +   0   transcript_id \"FUN_000001-T1\"; gene_id \"FUN_000001\";\nntLink_0    funannotate transcript  10215   15286   .   +   .   transcript_id \"FUN_000002-T1\"; gene_id \"FUN_000002\"\n```\n\n## 4.1 Copy GTF to `D-Apul/data`\n\nTo help make this easier to locate, will copy to the `D-Apul/data` directory, which also contains the genome FastA, genome FastA index, and the genome GFF files.\n\n``` bash\n# Load bash variables into memory\nsource .bashvars\n\ncp ${output_dir_top}/\"${transcripts_gtf}\" \"${genome_dir}\"\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","title":"Data Wrangling - Generate GTF from A.pulchra Genome GFF Using gffread","date":"2024-10-08","draft":false,"categories":["2024","coral","Acropora pulchra","genome","GFF","GTF","gffread","E5","timeseries_molecular"],"bibliography":["references.bib"]},"extensions":{"book":{"multiFile":true}}}},"draft":false,"projectFormats":["html"]}