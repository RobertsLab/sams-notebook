{"title":"SNP Identification - C.bairdi Day 2 DEG Pooled Samples Using bcftools on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"SNP Identification - C.bairdi Day 2 DEG Pooled Samples Using bcftools on Mox","date":"2021-09-09 11:23","categories":["bcftools","Tanner crab","Chionoecetes bairdi","Mox","SNP","2021","Tanner Crab RNAseq"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nAfter getting our the RNAseq data aligned with [`HISAT2`](https://daehwankimlab.github.io/hisat2/) on [20210908](../2021-09-08-RNAseq-Alignments---C.bairdi-Day-2-Infected-Uninfected-Temperature-Increase-Decrease-RNAseq-to-cbai_transcriptome_v3.1.fasta-with-Hisat2-on-Mox/index.qmd), the next step was to make variant calls. I opted to do so using [`bcftools`](https://samtools.github.io/bcftools/bcftools.html) `mpileup`. Previously, this was usually done with samtools, but using [`bcftools`](https://samtools.github.io/bcftools/bcftools.html) is preferred for better downstream compatibility with other [`bcftools`](https://samtools.github.io/bcftools/bcftools.html).\n\nInput BAM files being used:\n\n- `380822.sorted.bam`\n- `380823.sorted.bam`\n- `380824.sorted.bam`\n- `380825.sorted.bam`\n\n\nThe job was run on Mox and generated a [VCF file](https://samtools.github.io/hts-specs/VCFv4.2.pdf).\n\nSBATCH script (GitHub):\n\n- [20210909-cbai-bcftools-snp_calling.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20210909-cbai-bcftools-snp_calling.sh)\n\n```shell\n#!/bin/bash\n#SBATCH --job-name=20210909-cbai-bcftools-snp_calling\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=3-00:00:00\n## Memory per node\n#SBATCH --mem=200G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20210909-cbai-bcftools-snp_calling\n\n## Hisat2 alignment of C.bairdi RNAseq to cbai_transcriptome_v3.1 transcriptome assembly\n## using HiSat2 index generated on 20210908.\n\n## Expects FastQ input filenames to match *R[12]*.fq.gz.\n\n\n###################################################################################\n# These variables need to be set by user\n\n## Assign Variables\n\n# Set number of CPUs to use\nthreads=40\n\n# Paths to programs\nbcftools_dir=\"/gscratch/srlab/programs/bcftools-1.13\"\nbcftools=\"${bcftools_dir}/bcftools\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\n\n\n# Input/output files\nbam_dir=\"/gscratch/scrubbed/samwhite/outputs/20210908-cbai-hisat2-cbai_transcriptome_v3.1\"\ntranscriptome_dir=\"/gscratch/srlab/sam/data/C_bairdi/transcriptomes\"\ntranscriptome_fasta=\"${transcriptome_dir}\"/cbai_transcriptome_v3.1.fasta\nbcf_out=cbai_v3.1-SNPS.vcf\n\n# Initialize array for BAM files\nbam_array=()\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=(\n[bcftools]=\"${bcftools}\" \\\n[bcftools_call]=\"${bcftools} call\" \\\n[bcftools_index]=\"${bcftools} index\" \\\n[bcftools_mpileup]=\"${bcftools} mpileup\" \\\n[bcftools_view]=\"${bcftools} view\" \\\n[samtools_index]=\"${samtools} index\" \\\n[samtools_sort]=\"${samtools} sort\" \\\n[samtools_view]=\"${samtools} view\"\n)\n\n\n###################################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n\n\n# Create array of fastq R2 files\nfor bam in \"${bam_dir}\"/*sorted.bam\ndo\n  bam_array+=(\"${bam}\")\n  echo \"Generating checksum for ${bam}...\"\n  md5sum \"${bam}\" >> input_bam_checksums.md5\n  echo \"Checksum for ${bam} completed.\"\n  echo \"\"\ndone\n\n# Run bcftools\n## Create space-separated list to pass to bcftools\nbam_list=$(echo \"${bam_array[*]}\")\n\n\n## mpileup and call SNPs.\n## Generates uncompressed VCF file.\necho \"\"\necho \"Beginning SNP calls.\"\n\n${programs_array[bcftools_mpileup]} \\\n--fasta-ref ${transcriptome_fasta} \\\n${bam_list} \\\n--threads ${threads} \\\n--output-type u \\\n| ${programs_array[bcftools_call]} \\\n--output-type v \\\n--multiallelic-caller \\\n--variants-only \\\n--threads ${threads} \\\n> ${bcf_out}\n\n\necho \"SNP calls complete.\"\necho \"\"\n\n\n# Generate checksums\nfor file in *\ndo\n  md5sum \"${file}\" >> checksums.md5\ndone\n\n#######################################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools/bcftools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]] \\\n    || [[ \"${program}\" == \"bcftools_call\" ]] \\\n    || [[ \"${program}\" == \"bcftools_index\" ]] \\\n    || [[ \"${program}\" == \"bcftools_mpileup\" ]] \\\n    || [[ \"${program}\" == \"bcftools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\n  echo \"Finished logging programs options.\"\n  echo \"\"\nfi\n\n\n# Document programs in PATH (primarily for program version ID)\necho \"Logging system $PATH...\"\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\necho \"Finished logging system $PATH.\"\n```\n\n---\n\n# RESULTS\n\nDone pretty quickly in ~26mins:\n\n![Runtime for bcftools variant calling on Mox.](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20210909-cbai-bcftools-snp_calling_runtime.png?raw=true)\n\nOutput folder:\n\n- [0210909-cbai-bcftools-snp_calling/](https://gannet.fish.washington.edu/Atumefaciens/20210909-cbai-bcftools-snp_calling/)\n\n\n  - #### VCF file:\n\n    - [20210909-cbai-bcftools-snp_calling/cbai_v3.1-SNPS.vcf](https://gannet.fish.washington.edu/Atumefaciens/20210909-cbai-bcftools-snp_calling/cbai_v3.1-SNPS.vcf)\n\n  - #### Input BAM files (text)\n\n    - [20210909-cbai-bcftools-snp_calling/input_bam_checksums.md5](https://gannet.fish.washington.edu/Atumefaciens/20210909-cbai-bcftools-snp_calling/input_bam_checksums.md5)\n\nNow, the next steps are to filter the variants based on alignment depth (Steven has indicated a minimum of 10x would be appropraite), as well as some other as-of-yet-determined factors. Once filtered, we'll identify which genes in the transcriptome (and their corresponding annotations) have SNPs and in which groups to identify the impacts, if any, on the transcritpomic responses to Hematodinium infection and/or temperature changes.\n","srcMarkdownNoYaml":"\nAfter getting our the RNAseq data aligned with [`HISAT2`](https://daehwankimlab.github.io/hisat2/) on [20210908](../2021-09-08-RNAseq-Alignments---C.bairdi-Day-2-Infected-Uninfected-Temperature-Increase-Decrease-RNAseq-to-cbai_transcriptome_v3.1.fasta-with-Hisat2-on-Mox/index.qmd), the next step was to make variant calls. I opted to do so using [`bcftools`](https://samtools.github.io/bcftools/bcftools.html) `mpileup`. Previously, this was usually done with samtools, but using [`bcftools`](https://samtools.github.io/bcftools/bcftools.html) is preferred for better downstream compatibility with other [`bcftools`](https://samtools.github.io/bcftools/bcftools.html).\n\nInput BAM files being used:\n\n- `380822.sorted.bam`\n- `380823.sorted.bam`\n- `380824.sorted.bam`\n- `380825.sorted.bam`\n\n\nThe job was run on Mox and generated a [VCF file](https://samtools.github.io/hts-specs/VCFv4.2.pdf).\n\nSBATCH script (GitHub):\n\n- [20210909-cbai-bcftools-snp_calling.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20210909-cbai-bcftools-snp_calling.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=20210909-cbai-bcftools-snp_calling\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=3-00:00:00\n## Memory per node\n#SBATCH --mem=200G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20210909-cbai-bcftools-snp_calling\n\n## Hisat2 alignment of C.bairdi RNAseq to cbai_transcriptome_v3.1 transcriptome assembly\n## using HiSat2 index generated on 20210908.\n\n## Expects FastQ input filenames to match *R[12]*.fq.gz.\n\n\n###################################################################################\n# These variables need to be set by user\n\n## Assign Variables\n\n# Set number of CPUs to use\nthreads=40\n\n# Paths to programs\nbcftools_dir=\"/gscratch/srlab/programs/bcftools-1.13\"\nbcftools=\"${bcftools_dir}/bcftools\"\nsamtools=\"/gscratch/srlab/programs/samtools-1.10/samtools\"\n\n\n# Input/output files\nbam_dir=\"/gscratch/scrubbed/samwhite/outputs/20210908-cbai-hisat2-cbai_transcriptome_v3.1\"\ntranscriptome_dir=\"/gscratch/srlab/sam/data/C_bairdi/transcriptomes\"\ntranscriptome_fasta=\"${transcriptome_dir}\"/cbai_transcriptome_v3.1.fasta\nbcf_out=cbai_v3.1-SNPS.vcf\n\n# Initialize array for BAM files\nbam_array=()\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=(\n[bcftools]=\"${bcftools}\" \\\n[bcftools_call]=\"${bcftools} call\" \\\n[bcftools_index]=\"${bcftools} index\" \\\n[bcftools_mpileup]=\"${bcftools} mpileup\" \\\n[bcftools_view]=\"${bcftools} view\" \\\n[samtools_index]=\"${samtools} index\" \\\n[samtools_sort]=\"${samtools} sort\" \\\n[samtools_view]=\"${samtools} view\"\n)\n\n\n###################################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Python Mox module for Python module availability\nmodule load intel-python3_2017\n\n\n\n# Create array of fastq R2 files\nfor bam in \"${bam_dir}\"/*sorted.bam\ndo\n  bam_array+=(\"${bam}\")\n  echo \"Generating checksum for ${bam}...\"\n  md5sum \"${bam}\" >> input_bam_checksums.md5\n  echo \"Checksum for ${bam} completed.\"\n  echo \"\"\ndone\n\n# Run bcftools\n## Create space-separated list to pass to bcftools\nbam_list=$(echo \"${bam_array[*]}\")\n\n\n## mpileup and call SNPs.\n## Generates uncompressed VCF file.\necho \"\"\necho \"Beginning SNP calls.\"\n\n${programs_array[bcftools_mpileup]} \\\n--fasta-ref ${transcriptome_fasta} \\\n${bam_list} \\\n--threads ${threads} \\\n--output-type u \\\n| ${programs_array[bcftools_call]} \\\n--output-type v \\\n--multiallelic-caller \\\n--variants-only \\\n--threads ${threads} \\\n> ${bcf_out}\n\n\necho \"SNP calls complete.\"\necho \"\"\n\n\n# Generate checksums\nfor file in *\ndo\n  md5sum \"${file}\" >> checksums.md5\ndone\n\n#######################################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools/bcftools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]] \\\n    || [[ \"${program}\" == \"bcftools_call\" ]] \\\n    || [[ \"${program}\" == \"bcftools_index\" ]] \\\n    || [[ \"${program}\" == \"bcftools_mpileup\" ]] \\\n    || [[ \"${program}\" == \"bcftools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\n  echo \"Finished logging programs options.\"\n  echo \"\"\nfi\n\n\n# Document programs in PATH (primarily for program version ID)\necho \"Logging system $PATH...\"\n{\ndate\necho \"\"\necho \"System PATH for $SLURM_JOB_ID\"\necho \"\"\nprintf \"%0.s-\" {1..10}\necho \"${PATH}\" | tr : \\\\n\n} >> system_path.log\necho \"Finished logging system $PATH.\"\n```\n\n---\n\n# RESULTS\n\nDone pretty quickly in ~26mins:\n\n![Runtime for bcftools variant calling on Mox.](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20210909-cbai-bcftools-snp_calling_runtime.png?raw=true)\n\nOutput folder:\n\n- [0210909-cbai-bcftools-snp_calling/](https://gannet.fish.washington.edu/Atumefaciens/20210909-cbai-bcftools-snp_calling/)\n\n\n  - #### VCF file:\n\n    - [20210909-cbai-bcftools-snp_calling/cbai_v3.1-SNPS.vcf](https://gannet.fish.washington.edu/Atumefaciens/20210909-cbai-bcftools-snp_calling/cbai_v3.1-SNPS.vcf)\n\n  - #### Input BAM files (text)\n\n    - [20210909-cbai-bcftools-snp_calling/input_bam_checksums.md5](https://gannet.fish.washington.edu/Atumefaciens/20210909-cbai-bcftools-snp_calling/input_bam_checksums.md5)\n\nNow, the next steps are to filter the variants based on alignment depth (Steven has indicated a minimum of 10x would be appropraite), as well as some other as-of-yet-determined factors. Once filtered, we'll identify which genes in the transcriptome (and their corresponding annotations) have SNPs and in which groups to identify the impacts, if any, on the transcritpomic responses to Hematodinium infection and/or temperature changes.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"SNP Identification - C.bairdi Day 2 DEG Pooled Samples Using bcftools on Mox","date":"2021-09-09 11:23","categories":["bcftools","Tanner crab","Chionoecetes bairdi","Mox","SNP","2021","Tanner Crab RNAseq"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}