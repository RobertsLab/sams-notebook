{"title":"Genome Analysis - Identification of Potential Contaminating Sequences in Panopea-generosa-v1.0 Assembly Using BlobToolKit on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Genome Analysis - Identification of Potential Contaminating Sequences in Panopea-generosa-v1.0 Assembly Using BlobToolKit on Mox","date":"2021-07-12 05:46","tags":["blobtoolkit","blobtools","Panopea-generosa-v1.0","genome","Panopea generosa","Pacific geoduck","mox"],"categories":["2021","Geoduck Genome Sequencing"]},"headingText":"Job Name","containsRefs":false,"markdown":"\nAs part of our [_Panopea generosa_ (Pacific geoduck)](http://en.wikipedia.org/wiki/Geoduck) genome sequencing efforts, Steven came across a tool designed to help identify if there are any contaminating sequences in your assembly. The software is [BlobToolKit](https://blobtoolkit.genomehubs.org/). The software is actually a complex pipeline of separate tools ([minimap2])https://github.com/lh3/minimap2, [`BLAST`](https://www.ncbi.nlm.nih.gov/books/NBK279690/), [`DIAMOND`](https://github.com/bbuchfink/diamond) BLAST, and [BUSCO](https://busco.ezlab.org/)) which aligns sequencing reads and assigns taxonomy to the reads, as well as marking regions of the assembly with various taxonomic assignments.\n\nThe pipeline has been regularly updated and when I initially tried to run it, failed because the pipeline required an internet connection. Side note, the tool was really written to analyze all of the genome assemblies that exist in NCBI. As such, it was written to automatically download assemblies/reads while running things. Considering the amount of data I had, this could only be run on Mox, which does _not_ have internet access for any submitted jobs. The developer has been remarkably helpful and worked to update the pipeline to remove this barrier, allowing for local (i.e. offline) analysis. There were some other bumps along the way and the developer addressed those issues, too! One _great_ aspect of this pipeline is that it's written as a Snakemake pipeline, which incorporates checkpoints. This allowed me to continue the pipeline each time it died due to some weird bug here and there. This job would've taken much longer if I had to restart it from the beginning each time.\n\nThe job was run on Mox.\n\nSBATCH script (GitHub):\n\n- [20210712_pgen_blobtools_Panopea-generosa-v1.0.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20210712_pgen_blobtools_Panopea-generosa-v1.0.sh)\n\n```shell\n#!/bin/bash\n#SBATCH --job-name=20210712_pgen_blobtools_Panopea-generosa-v1.0\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=10-00:00:00\n## Memory per node\n#SBATCH --mem=200G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20210712_pgen_blobtools_Panopea-generosa-v1.0\n\n\n### Script to run the Blobtools2 Pipeline\n### on trimmed 10x Genomics/HiC FastQs from 20210401.\n### Using to identify sequencing contaminants in Panopea-generosa-v1.0 genome assembly\n### Generates a Snakemake config file\n### Outputs Blobtools2 JSON files for use in the Blobtools2 viewer\n\n### Utilizes NCBI taxonomy dump and customized UniProt database for DIAMOND BLASTx\n\n### Requires Anaconda to be in system $PATH!\n\n### Follows instructions for release v2.6.0 (https://github.com/blobtoolkit/pipeline/tree/release/v2.6.0)\n### And changes noted in this GitHub Issue: https://github.com/blobtoolkit/pipeline/issues/13#issuecomment-868510883\n\n### MODIFED HARD-CODED THREAD COUNTS IN rules/run_minimap2_index.smk and rules/run_minimap2_align.smk\n\n###################################################################################\n# These variables need to be set by user\n\n# Load blobtoolkit module to add btk to PATH\nmodule load blobtoolkit-v2.6.1.module\n\n# Set working directory\nwd=$(pwd)\necho \"Working directory is ${wd}.\"\necho \"\"\n\n# Set base directory for blobltools structure\nbase_dir=${wd}/blobtoolkit\n\n# Pipeline options\n## BLASTn evalue\nevalue=\"1.0e-10\"\n\n## NCBI Tax ID and genus/species\nncbi_tax_id=1049056\nspecies=\"Panopea generosa\"\n\n## NCBI Taxonomy Root ID to begin from\nroot=1\n\n# Set number of CPUs to use\nthreads=40\n\n# Input/output files\nassembly_name=Panopea_generosa_v1\norig_fasta=/gscratch/srlab/sam/data/P_generosa/genomes/Panopea-generosa-v1.0.fa\nfastq_checksums=fastq_checksums.md5\ntrimmed_reads_dir=/gscratch/scrubbed/samwhite/outputs/20210401_pgen_fastp_10x-genomics\n\n## New genome name for BTK filename requirements (no periods)\ngenome_fasta=${wd}/Panopea_generosa_v1.fasta.gz\n\n# Programs\n## Blobtools2 directory\nblobtools2=/gscratch/srlab/programs/blobtoolkit-v2.6.1/blobtools2\n\n## BTK pipeline directory\nbtk_pipeline=/gscratch/srlab/programs/blobtoolkit-v2.6.1/pipeline\n\n## Conda environment directory\nconda_dir=/gscratch/srlab/programs/anaconda3/envs/btk_env\n\n\n# Databases\n## BUSCO lineage database directory\nbusco_dbs=/gscratch/srlab/sam/data/databases/BUSCO\n\n## Blobtools NCBI taxonomy database directory\nbtk_ncbi_tax_dir=/gscratch/srlab/blastdbs/20210401_ncbi_taxonomy\n\n## NCBI nt database dir\nncbi_db=/gscratch/srlab/blastdbs/20210401_ncbi_nt\nncbi_db_name=\"nt\"\n\n## Uniprot DIAMOND database dir\nuniprot_db=/gscratch/srlab/blastdbs/20210401_uniprot_btk\nuniprot_db_name=reference_proteomes\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=()\n\n\n###################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Anaconda\n# Uknown why this is needed, but Anaconda will not run if this line is not included.\n. \"/gscratch/srlab/programs/anaconda3/etc/profile.d/conda.sh\"\n\n# Gzip FastA - needed for blobltoolkit to run properly\nif [ ! -f \"${genome_fasta}\" ]; then\n  gzip -c ${orig_fasta} > \"${genome_fasta}\"\nfi\n\n# Generate checksum for \"new\" FastA\nif [ ! -f \"${genome_fasta}\" ]; then\n  md5sum \"${genome_fasta}\" > genome_fasta.md5\nfi\n\n# Concatenate all R1 reads\nif [ ! -f \"reads_1.fastq.gz\" ]; then\n  for fastq in \"${trimmed_reads_dir}\"/*R1*.fq.gz\n  do\n    echo \"\"\n    echo \"Generating checksum for ${fastq}\"\n    md5sum \"${fastq}\" >> ${fastq_checksums}\n    echo \"Checksum generated for ${fastq}.\"\n\n    echo \"\"\n    echo \"Concatenating ${fastq} to reads_1.fastq.gz\"\n    cat \"${fastq}\" >> reads_1.fastq.gz\n    echo \"Finished concatenating ${fastq} to reads_1.fastq.gz\"\n  done\nfi\n\n# Concatenate all R2 reads\nif [ ! -f \"reads_2.fastq.gz\" ]; then\n  for fastq in \"${trimmed_reads_dir}\"/*R2*.fq.gz\n  do\n    echo \"\"\n    echo \"Generating checksum for ${fastq}\"\n    md5sum \"${fastq}\" >> ${fastq_checksums}\n    echo \"Checksum generated for ${fastq}.\"\n\n    echo \"\"\n    echo \"Concatenating ${fastq} to reads_2.fastq.gz\"\n    cat \"${fastq}\" >> reads_2.fastq.gz\n    echo \"Finished concatenating ${fastq} to reads_2.fastq.gz\"\n  done\nfi\n\n# Count scaffolds in assembly\nscaffold_count=$(grep -c \">\" \"${genome_fasta}\")\n\n# Count nucleotides in assembly\ngenome_nucleotides_count=$(grep -v \">\" \"${genome_fasta}\" | wc | awk '{print $3-$1}')\n\n# Create BTK config YAML\n# BUSCO lineage order is important! List in order of most taxonomic specific to most general.\nif [ -f \"config.yaml\" ]; then\n  rm \"config.yaml\"\nfi\n{\n  printf \"%s\\n\" \"assembly:\"\n  printf \"%2s%s\\n\" \"\" \"accession: draft\" \"\" \"file: ${genome_fasta}\" \"\" \"level: scaffold\" \"\" \"scaffold-count: ${scaffold_count}\" \"\" \"span: ${genome_nucleotides_count}\"\n  printf \"%2s%s\\n\" \"\" \"prefix: ${assembly_name}\"\n  printf \"%s\\n\" \"busco:\"\n  printf \"%2s%s\\n\" \"\" \"download_dir: ${busco_dbs}\"\n  printf \"%2s%s\\n\" \"\" \"lineages:\"\n  printf \"%4s%s\\n\" \"\" \"- arthropoda_odb10\" \"\" \"- eukaryota_odb10\" \"\" \"- metazoa_odb10\" \"\" \"- bacteria_odb10\" \"\" \"- archaea_odb10\"\n  printf \"%2s%s\\n\" \"\" \"basal_lineages:\"\n  printf \"%4s%s\\n\" \"\" \"- archaea_odb10\" \"\" \"- bacteria_odb10\" \"\" \"- eukaryota_odb10\"\n  printf \"%s\\n\" \"reads:\"\n  printf \"%2s%s\\n\" \"\" \"paired:\"\n  printf \"%4s%s\\n\" \"\" \"- prefix: reads\"\n  printf \"%6s%s\\n\" \"\" \"platform: ILLUMINA\" \"\" \"file: ${wd}/reads_1.fastq.gz;${wd}/reads_2.fastq.gz\"\n  printf \"%s\\n\" \"settings:\"\n  printf \"%2s%s\\n\" \"\" \"taxdump: ${btk_ncbi_tax_dir}\"\n  printf \"%2s%s\\n\" \"\" \"blast_chunk: 100000\"\n  printf \"%2s%s\\n\" \"\" \"blast_max_chunks: 10\"\n  printf \"%2s%s\\n\" \"\" \"blast_overlap: 0\"\n  printf \"%2s%s\\n\" \"\" \"blast_min_length: 1000\"\n  printf \"%s\\n\" \"similarity:\"\n  printf \"%2s%s\\n\" \"\" \"defaults:\"\n  printf \"%4s%s\\n\" \"\" \"evalue: ${evalue}\" \"\" \"max_target_seqs: 10\" \"\" \"import_evalue: 1.0e-25\" \"\" \"taxrule: buscogenes\"\n  printf \"%2s%s\\n\" \"\" \"diamond_blastx:\"\n  printf \"%4s%s\\n\" \"\" \"name: ${uniprot_db_name}\" \"\" \"path: ${uniprot_db}\"\n  printf \"%2s%s\\n\" \"\" \"diamond_blastp:\"\n  printf \"%4s%s\\n\" \"\" \"name: ${uniprot_db_name}\" \"\" \"path: ${uniprot_db}\" \"\" \"import_max_target_seqs: 100000\"\n  printf \"%2s%s\\n\" \"\" \"blastn:\"\n  printf \"%4s%s\\n\" \"\" \"name: ${ncbi_db_name}\" \"\" \"path: ${ncbi_db}\"\n  printf \"%s\\n\" \"taxon:\"\n  printf \"%2s%s\\n\" \"\" \"name: ${species}\" \"\" \"taxid: '${ncbi_tax_id}'\"\n} >> config.yaml\n\n# Activate blobtoolkit conda environment\nconda activate btk_env\n\n# Run snakemake, btk pipeline\nsnakemake -p \\\n--use-conda \\\n--conda-prefix ${conda_dir} \\\n--directory \"${base_dir}\" \\\n--configfile \"${wd}\"/config.yaml \\\n--stats ${assembly_name}.blobtoolkit.stats \\\n-j ${threads} \\\n--rerun-incomplete \\\n-s ${btk_pipeline}/blobtoolkit.smk \\\n--resources btk=1\n\n\n###################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\nfi\n\n# Document programs in PATH (primarily for program version ID)\n{\n  date\n  echo \"\"\n  echo \"System PATH for $SLURM_JOB_ID\"\n  echo \"\"\n  printf \"%0.s-\" {1..10}\n  echo \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\necho \"Finished logging system PATH\"\n```\n\n---\n\n# RESULTS\n\nUsually, I post the run time for my Mox jobs here. However, this was stopped/started numerous times, making it difficult to actually determine the cumulative runtime.\n\nOutput folder:\n\n- [20210712_pgen_blobtools_Panopea-generosa-v1.0/](https://gannet.fish.washington.edu/Atumefaciens/20210712_pgen_blobtools_Panopea-generosa-v1.0/)\n\n   - #### JSON output directory\n\n       - [20210712_pgen_blobtools_Panopea-generosa-v1.0/blobtools/Panopea_generosa_v1/](https://gannet.fish.washington.edu/Atumefaciens/20210712_pgen_blobtools_Panopea-generosa-v1.0/blobtools/Panopea_generosa_v1/)\n\n        - _These files are needed to use with the Blobtools viewer software._\n\nNext up will be loading the JSON output files into the Blobtools viewer and analysing taxonomic assignments of reads/regions throughout our genome assembly.\n","srcMarkdownNoYaml":"\nAs part of our [_Panopea generosa_ (Pacific geoduck)](http://en.wikipedia.org/wiki/Geoduck) genome sequencing efforts, Steven came across a tool designed to help identify if there are any contaminating sequences in your assembly. The software is [BlobToolKit](https://blobtoolkit.genomehubs.org/). The software is actually a complex pipeline of separate tools ([minimap2])https://github.com/lh3/minimap2, [`BLAST`](https://www.ncbi.nlm.nih.gov/books/NBK279690/), [`DIAMOND`](https://github.com/bbuchfink/diamond) BLAST, and [BUSCO](https://busco.ezlab.org/)) which aligns sequencing reads and assigns taxonomy to the reads, as well as marking regions of the assembly with various taxonomic assignments.\n\nThe pipeline has been regularly updated and when I initially tried to run it, failed because the pipeline required an internet connection. Side note, the tool was really written to analyze all of the genome assemblies that exist in NCBI. As such, it was written to automatically download assemblies/reads while running things. Considering the amount of data I had, this could only be run on Mox, which does _not_ have internet access for any submitted jobs. The developer has been remarkably helpful and worked to update the pipeline to remove this barrier, allowing for local (i.e. offline) analysis. There were some other bumps along the way and the developer addressed those issues, too! One _great_ aspect of this pipeline is that it's written as a Snakemake pipeline, which incorporates checkpoints. This allowed me to continue the pipeline each time it died due to some weird bug here and there. This job would've taken much longer if I had to restart it from the beginning each time.\n\nThe job was run on Mox.\n\nSBATCH script (GitHub):\n\n- [20210712_pgen_blobtools_Panopea-generosa-v1.0.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20210712_pgen_blobtools_Panopea-generosa-v1.0.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=20210712_pgen_blobtools_Panopea-generosa-v1.0\n## Allocation Definition\n#SBATCH --account=coenv\n#SBATCH --partition=coenv\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=10-00:00:00\n## Memory per node\n#SBATCH --mem=200G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20210712_pgen_blobtools_Panopea-generosa-v1.0\n\n\n### Script to run the Blobtools2 Pipeline\n### on trimmed 10x Genomics/HiC FastQs from 20210401.\n### Using to identify sequencing contaminants in Panopea-generosa-v1.0 genome assembly\n### Generates a Snakemake config file\n### Outputs Blobtools2 JSON files for use in the Blobtools2 viewer\n\n### Utilizes NCBI taxonomy dump and customized UniProt database for DIAMOND BLASTx\n\n### Requires Anaconda to be in system $PATH!\n\n### Follows instructions for release v2.6.0 (https://github.com/blobtoolkit/pipeline/tree/release/v2.6.0)\n### And changes noted in this GitHub Issue: https://github.com/blobtoolkit/pipeline/issues/13#issuecomment-868510883\n\n### MODIFED HARD-CODED THREAD COUNTS IN rules/run_minimap2_index.smk and rules/run_minimap2_align.smk\n\n###################################################################################\n# These variables need to be set by user\n\n# Load blobtoolkit module to add btk to PATH\nmodule load blobtoolkit-v2.6.1.module\n\n# Set working directory\nwd=$(pwd)\necho \"Working directory is ${wd}.\"\necho \"\"\n\n# Set base directory for blobltools structure\nbase_dir=${wd}/blobtoolkit\n\n# Pipeline options\n## BLASTn evalue\nevalue=\"1.0e-10\"\n\n## NCBI Tax ID and genus/species\nncbi_tax_id=1049056\nspecies=\"Panopea generosa\"\n\n## NCBI Taxonomy Root ID to begin from\nroot=1\n\n# Set number of CPUs to use\nthreads=40\n\n# Input/output files\nassembly_name=Panopea_generosa_v1\norig_fasta=/gscratch/srlab/sam/data/P_generosa/genomes/Panopea-generosa-v1.0.fa\nfastq_checksums=fastq_checksums.md5\ntrimmed_reads_dir=/gscratch/scrubbed/samwhite/outputs/20210401_pgen_fastp_10x-genomics\n\n## New genome name for BTK filename requirements (no periods)\ngenome_fasta=${wd}/Panopea_generosa_v1.fasta.gz\n\n# Programs\n## Blobtools2 directory\nblobtools2=/gscratch/srlab/programs/blobtoolkit-v2.6.1/blobtools2\n\n## BTK pipeline directory\nbtk_pipeline=/gscratch/srlab/programs/blobtoolkit-v2.6.1/pipeline\n\n## Conda environment directory\nconda_dir=/gscratch/srlab/programs/anaconda3/envs/btk_env\n\n\n# Databases\n## BUSCO lineage database directory\nbusco_dbs=/gscratch/srlab/sam/data/databases/BUSCO\n\n## Blobtools NCBI taxonomy database directory\nbtk_ncbi_tax_dir=/gscratch/srlab/blastdbs/20210401_ncbi_taxonomy\n\n## NCBI nt database dir\nncbi_db=/gscratch/srlab/blastdbs/20210401_ncbi_nt\nncbi_db_name=\"nt\"\n\n## Uniprot DIAMOND database dir\nuniprot_db=/gscratch/srlab/blastdbs/20210401_uniprot_btk\nuniprot_db_name=reference_proteomes\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=()\n\n\n###################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Anaconda\n# Uknown why this is needed, but Anaconda will not run if this line is not included.\n. \"/gscratch/srlab/programs/anaconda3/etc/profile.d/conda.sh\"\n\n# Gzip FastA - needed for blobltoolkit to run properly\nif [ ! -f \"${genome_fasta}\" ]; then\n  gzip -c ${orig_fasta} > \"${genome_fasta}\"\nfi\n\n# Generate checksum for \"new\" FastA\nif [ ! -f \"${genome_fasta}\" ]; then\n  md5sum \"${genome_fasta}\" > genome_fasta.md5\nfi\n\n# Concatenate all R1 reads\nif [ ! -f \"reads_1.fastq.gz\" ]; then\n  for fastq in \"${trimmed_reads_dir}\"/*R1*.fq.gz\n  do\n    echo \"\"\n    echo \"Generating checksum for ${fastq}\"\n    md5sum \"${fastq}\" >> ${fastq_checksums}\n    echo \"Checksum generated for ${fastq}.\"\n\n    echo \"\"\n    echo \"Concatenating ${fastq} to reads_1.fastq.gz\"\n    cat \"${fastq}\" >> reads_1.fastq.gz\n    echo \"Finished concatenating ${fastq} to reads_1.fastq.gz\"\n  done\nfi\n\n# Concatenate all R2 reads\nif [ ! -f \"reads_2.fastq.gz\" ]; then\n  for fastq in \"${trimmed_reads_dir}\"/*R2*.fq.gz\n  do\n    echo \"\"\n    echo \"Generating checksum for ${fastq}\"\n    md5sum \"${fastq}\" >> ${fastq_checksums}\n    echo \"Checksum generated for ${fastq}.\"\n\n    echo \"\"\n    echo \"Concatenating ${fastq} to reads_2.fastq.gz\"\n    cat \"${fastq}\" >> reads_2.fastq.gz\n    echo \"Finished concatenating ${fastq} to reads_2.fastq.gz\"\n  done\nfi\n\n# Count scaffolds in assembly\nscaffold_count=$(grep -c \">\" \"${genome_fasta}\")\n\n# Count nucleotides in assembly\ngenome_nucleotides_count=$(grep -v \">\" \"${genome_fasta}\" | wc | awk '{print $3-$1}')\n\n# Create BTK config YAML\n# BUSCO lineage order is important! List in order of most taxonomic specific to most general.\nif [ -f \"config.yaml\" ]; then\n  rm \"config.yaml\"\nfi\n{\n  printf \"%s\\n\" \"assembly:\"\n  printf \"%2s%s\\n\" \"\" \"accession: draft\" \"\" \"file: ${genome_fasta}\" \"\" \"level: scaffold\" \"\" \"scaffold-count: ${scaffold_count}\" \"\" \"span: ${genome_nucleotides_count}\"\n  printf \"%2s%s\\n\" \"\" \"prefix: ${assembly_name}\"\n  printf \"%s\\n\" \"busco:\"\n  printf \"%2s%s\\n\" \"\" \"download_dir: ${busco_dbs}\"\n  printf \"%2s%s\\n\" \"\" \"lineages:\"\n  printf \"%4s%s\\n\" \"\" \"- arthropoda_odb10\" \"\" \"- eukaryota_odb10\" \"\" \"- metazoa_odb10\" \"\" \"- bacteria_odb10\" \"\" \"- archaea_odb10\"\n  printf \"%2s%s\\n\" \"\" \"basal_lineages:\"\n  printf \"%4s%s\\n\" \"\" \"- archaea_odb10\" \"\" \"- bacteria_odb10\" \"\" \"- eukaryota_odb10\"\n  printf \"%s\\n\" \"reads:\"\n  printf \"%2s%s\\n\" \"\" \"paired:\"\n  printf \"%4s%s\\n\" \"\" \"- prefix: reads\"\n  printf \"%6s%s\\n\" \"\" \"platform: ILLUMINA\" \"\" \"file: ${wd}/reads_1.fastq.gz;${wd}/reads_2.fastq.gz\"\n  printf \"%s\\n\" \"settings:\"\n  printf \"%2s%s\\n\" \"\" \"taxdump: ${btk_ncbi_tax_dir}\"\n  printf \"%2s%s\\n\" \"\" \"blast_chunk: 100000\"\n  printf \"%2s%s\\n\" \"\" \"blast_max_chunks: 10\"\n  printf \"%2s%s\\n\" \"\" \"blast_overlap: 0\"\n  printf \"%2s%s\\n\" \"\" \"blast_min_length: 1000\"\n  printf \"%s\\n\" \"similarity:\"\n  printf \"%2s%s\\n\" \"\" \"defaults:\"\n  printf \"%4s%s\\n\" \"\" \"evalue: ${evalue}\" \"\" \"max_target_seqs: 10\" \"\" \"import_evalue: 1.0e-25\" \"\" \"taxrule: buscogenes\"\n  printf \"%2s%s\\n\" \"\" \"diamond_blastx:\"\n  printf \"%4s%s\\n\" \"\" \"name: ${uniprot_db_name}\" \"\" \"path: ${uniprot_db}\"\n  printf \"%2s%s\\n\" \"\" \"diamond_blastp:\"\n  printf \"%4s%s\\n\" \"\" \"name: ${uniprot_db_name}\" \"\" \"path: ${uniprot_db}\" \"\" \"import_max_target_seqs: 100000\"\n  printf \"%2s%s\\n\" \"\" \"blastn:\"\n  printf \"%4s%s\\n\" \"\" \"name: ${ncbi_db_name}\" \"\" \"path: ${ncbi_db}\"\n  printf \"%s\\n\" \"taxon:\"\n  printf \"%2s%s\\n\" \"\" \"name: ${species}\" \"\" \"taxid: '${ncbi_tax_id}'\"\n} >> config.yaml\n\n# Activate blobtoolkit conda environment\nconda activate btk_env\n\n# Run snakemake, btk pipeline\nsnakemake -p \\\n--use-conda \\\n--conda-prefix ${conda_dir} \\\n--directory \"${base_dir}\" \\\n--configfile \"${wd}\"/config.yaml \\\n--stats ${assembly_name}.blobtoolkit.stats \\\n-j ${threads} \\\n--rerun-incomplete \\\n-s ${btk_pipeline}/blobtoolkit.smk \\\n--resources btk=1\n\n\n###################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\nfi\n\n# Document programs in PATH (primarily for program version ID)\n{\n  date\n  echo \"\"\n  echo \"System PATH for $SLURM_JOB_ID\"\n  echo \"\"\n  printf \"%0.s-\" {1..10}\n  echo \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\necho \"Finished logging system PATH\"\n```\n\n---\n\n# RESULTS\n\nUsually, I post the run time for my Mox jobs here. However, this was stopped/started numerous times, making it difficult to actually determine the cumulative runtime.\n\nOutput folder:\n\n- [20210712_pgen_blobtools_Panopea-generosa-v1.0/](https://gannet.fish.washington.edu/Atumefaciens/20210712_pgen_blobtools_Panopea-generosa-v1.0/)\n\n   - #### JSON output directory\n\n       - [20210712_pgen_blobtools_Panopea-generosa-v1.0/blobtools/Panopea_generosa_v1/](https://gannet.fish.washington.edu/Atumefaciens/20210712_pgen_blobtools_Panopea-generosa-v1.0/blobtools/Panopea_generosa_v1/)\n\n        - _These files are needed to use with the Blobtools viewer software._\n\nNext up will be loading the JSON output files into the Blobtools viewer and analysing taxonomic assignments of reads/regions throughout our genome assembly.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Genome Analysis - Identification of Potential Contaminating Sequences in Panopea-generosa-v1.0 Assembly Using BlobToolKit on Mox","date":"2021-07-12 05:46","tags":["blobtoolkit","blobtools","Panopea-generosa-v1.0","genome","Panopea generosa","Pacific geoduck","mox"],"categories":["2021","Geoduck Genome Sequencing"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}