{"title":"Genome Assembly - Olurida_v090 with BGI Illumina and PacBio Hybrid Using Wengan on Mox","markdown":{"yaml":{"author":"Sam White","toc-title":"Contents","toc-depth":5,"toc-location":"left","layout":"post","title":"Genome Assembly - Olurida_v090 with BGI Illumina and PacBio Hybrid Using Wengan on Mox","date":"2021-05-20 07:38","tags":["wengan","mox","Ostrea lurida","Olympia oyster","BGI","PacBio","Olurida_v090","genome assembly","assembly"],"categories":["2021","Olympia Oyster Genome Assembly"]},"headingText":"Job Name","containsRefs":false,"markdown":"\n[I was recently tasked with adding annotations for our _Ostrea lurida_ genome assembly](https://github.com/RobertsLab/resources/issues/1159) to NCBI. As it turns out, adding just annotation files can't be done since the [genome was initially submitted to ENA](https://robertslab.github.io/sams-notebook/posts/2020/2020-07-08-ENA-Submission---Ostrea-lurida-draft-genome-Olurida_v081.fa/). Additionally, updating the existing ENA submission with annotations is not possible, as it requires a revocation of the existing genome assembly; requiring a brand new submission. With that being the case, I figured I'd just make a new genome submission with the annotations to NCBI. Unfortunately, there were a number of issues with our genome assembly that were going to require a fair amount of work to resolve. The primary concern was that most of the sequences are considered \"low quality\" by NCBI (too many and too long stretches of Ns in the sequences). Revising the assembly to make it compatible with the NCBI requirements was going to be too much, so that was abandoned.\n\nSo, I decided to look into a low-effort means to try to get a better assembly using a Singularity container running [Wengan](https://github.com/adigenova/wengan) on Mox. It performs assembling and polishing, and is geared towards handling both short- and long-read data. Used all of our BGI Illumina short-read data, as well as all of our PacBio long-read data (see the `fastq_checksums.md5` file in the RESULTS to get a list of all input files.)\n\nI'll refer to the assembly produced here as `Olurida_v090`.\n\n\nSBATCH script (GitHub):\n\n- [20210520_olur_wegan_genome-assembly.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20210520_olur_wegan_genome-assembly.sh)\n\n```shell\n#!/bin/bash\n#SBATCH --job-name=20210520_olur_wegan_genome-assembly\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=10-00:00:00\n## Memory per node\n#SBATCH --mem=500G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20210520_olur_wegan_genome-assembly\n\n# Script to attempt hybrid genome assembly of O.lurida Illumina and PacBio data using Wengan\n# Container built according to instructions here:\n# https://github.com/adigenova/wengan\n\n\n###################################################################################\n# These variables need to be set by user\n\n# Set number of CPUs to use\nthreads=28\n\n# Input/output files\nfastq_checksums=fastq_checksums.md5\ntrimmed_reads_dir=/gscratch/scrubbed/samwhite/outputs/20210518_olur_fastp_bgi\npacbio_reads_dir=/gscratch/srlab/sam/data/O_lurida/DNAseq\n\n# Set genome size in Mbp\ngenome_size=1900\n\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=()\n\n\n###################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Singularity module\nmodule load singularity\n\n# Seeting for Singularity container\nexport TMPDIR=/tmp\n\n#location of wengan in the container\nWENGAN=/wengan/wengan-v0.2-bin-Linux/wengan.pl\n\n# Container name\nCONTAINER=wengan_v0.2.sif\n\n\n# Copy container\nrsync -avp /gscratch/srlab/programs/singularity_containers/$CONTAINER .\n\n\n# Concatenate all R1 reads\nfor fastq in \"${trimmed_reads_dir}\"/*_1*.fq.gz\ndo\n  echo \"\"\n  echo \"Generating checksum for ${fastq}\"\n  md5sum \"${fastq}\" >> ${fastq_checksums}\n  echo \"Checksum generated for ${fastq}.\"\n\n  echo \"\"\n  echo \"Concatenating ${fastq} to reads_1.fastq.gz\"\n  cat \"${fastq}\" >> reads_1.fastq.gz\n  echo \"Finished concatenating ${fastq} to reads_1.fastq.gz\"\ndone\n\n# Concatenate all R2 reads\nfor fastq in \"${trimmed_reads_dir}\"/*_2*.fq.gz\ndo\n  echo \"\"\n  echo \"Generating checksum for ${fastq}\"\n  md5sum \"${fastq}\" >> ${fastq_checksums}\n  echo \"Checksum generated for ${fastq}.\"\n\n  echo \"\"\n  echo \"Concatenating ${fastq} to reads_2.fastq.gz\"\n  cat \"${fastq}\" >> reads_2.fastq.gz\n  echo \"Finished concatenating ${fastq} to reads_2.fastq.gz\"\ndone\n\n# Concatenate all PacBio reads\nfor fastq in \"${pacbio_reads_dir}\"/*.fastq.gz\ndo\n  echo \"\"\n  echo \"Generating checksum for ${fastq}\"\n  md5sum \"${fastq}\" >> ${fastq_checksums}\n  echo \"Checksum generated for ${fastq}.\"\n\n  echo \"\"\n  echo \"Concatenating ${fastq} to pacbio.clr.fastq.gz\"\n  cat \"${fastq}\" >> pacbio.clr.fastq.gz\n  echo \"Finished concatenating ${fastq} to pacbio.clr.fastq.gz\"\ndone\n\n\n#run WenganM with singularity exec\nsingularity exec $CONTAINER perl ${WENGAN} \\\n -x pacraw \\\n -a M \\\n -s reads_1.fastq.gz,reads_2.fastq.gz \\\n -l pacbio.clr.fastq.gz \\\n -p Olur_v090 \\\n -t ${threads} \\\n -g ${genome_size}\n\n # Remove concatenated reads files\n rm *.fastq.gz\n\n###################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\nfi\n\n# Document programs in PATH (primarily for program version ID)\n{\n  date\n  echo \"\"\n  echo \"System PATH for $SLURM_JOB_ID\"\n  echo \"\"\n  printf \"%0.s-\" {1..10}\n  echo \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\necho \"Finished logging system PATH\"\n```\n\n---\n\n# RESULTS\n\nRuntime was was just under 9hrs:\n\n![Wengan Oly genome assembly on Mox runtime](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20210520_olur_wegan_genome-assembly_runtime.png?raw=true)\n\nOutput folder:\n\n- [20210520_olur_wegan_genome-assembly/](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/)\n\n  - #### Assembly (FastA):\n\n    - [Olur_v090.SPolished.asm.wengan.fasta (172MB)](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/Olur_v090.SPolished.asm.wengan.fasta)\n\n    - [Olur_v090.SPolished.asm.wengan.fasta.fai](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/Olur_v090.SPolished.asm.wengan.fasta.fai)\n\n  - #### BED file:\n\n    - [Olur_v090.SPolished.asm.wengan.bed (29MB)](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/Olur_v090.SPolished.asm.wengan.bed)\n\n  - #### Input FastQ checksums:\n\n    - [fastq_checksums.md5](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/fastq_checksums.md5)\n\n  - #### Wengan Singularity container:\n\n    - [wengan_v0.2.sif (227MB)](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/wengan_v0.2.sif)\n\n\nThe assembly reulted in 19,009 contigs.\n\nNext up, compare this assembly to our other existing assemblies.\n","srcMarkdownNoYaml":"\n[I was recently tasked with adding annotations for our _Ostrea lurida_ genome assembly](https://github.com/RobertsLab/resources/issues/1159) to NCBI. As it turns out, adding just annotation files can't be done since the [genome was initially submitted to ENA](https://robertslab.github.io/sams-notebook/posts/2020/2020-07-08-ENA-Submission---Ostrea-lurida-draft-genome-Olurida_v081.fa/). Additionally, updating the existing ENA submission with annotations is not possible, as it requires a revocation of the existing genome assembly; requiring a brand new submission. With that being the case, I figured I'd just make a new genome submission with the annotations to NCBI. Unfortunately, there were a number of issues with our genome assembly that were going to require a fair amount of work to resolve. The primary concern was that most of the sequences are considered \"low quality\" by NCBI (too many and too long stretches of Ns in the sequences). Revising the assembly to make it compatible with the NCBI requirements was going to be too much, so that was abandoned.\n\nSo, I decided to look into a low-effort means to try to get a better assembly using a Singularity container running [Wengan](https://github.com/adigenova/wengan) on Mox. It performs assembling and polishing, and is geared towards handling both short- and long-read data. Used all of our BGI Illumina short-read data, as well as all of our PacBio long-read data (see the `fastq_checksums.md5` file in the RESULTS to get a list of all input files.)\n\nI'll refer to the assembly produced here as `Olurida_v090`.\n\n\nSBATCH script (GitHub):\n\n- [20210520_olur_wegan_genome-assembly.sh](https://github.com/RobertsLab/sams-notebook/blob/master/sbatch_scripts/20210520_olur_wegan_genome-assembly.sh)\n\n```shell\n#!/bin/bash\n## Job Name\n#SBATCH --job-name=20210520_olur_wegan_genome-assembly\n## Allocation Definition\n#SBATCH --account=srlab\n#SBATCH --partition=srlab\n## Resources\n## Nodes\n#SBATCH --nodes=1\n## Walltime (days-hours:minutes:seconds format)\n#SBATCH --time=10-00:00:00\n## Memory per node\n#SBATCH --mem=500G\n##turn on e-mail notification\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=samwhite@uw.edu\n## Specify the working directory for this job\n#SBATCH --chdir=/gscratch/scrubbed/samwhite/outputs/20210520_olur_wegan_genome-assembly\n\n# Script to attempt hybrid genome assembly of O.lurida Illumina and PacBio data using Wengan\n# Container built according to instructions here:\n# https://github.com/adigenova/wengan\n\n\n###################################################################################\n# These variables need to be set by user\n\n# Set number of CPUs to use\nthreads=28\n\n# Input/output files\nfastq_checksums=fastq_checksums.md5\ntrimmed_reads_dir=/gscratch/scrubbed/samwhite/outputs/20210518_olur_fastp_bgi\npacbio_reads_dir=/gscratch/srlab/sam/data/O_lurida/DNAseq\n\n# Set genome size in Mbp\ngenome_size=1900\n\n\n# Programs associative array\ndeclare -A programs_array\nprograms_array=()\n\n\n###################################################################################\n\n# Exit script if any command fails\nset -e\n\n# Load Singularity module\nmodule load singularity\n\n# Seeting for Singularity container\nexport TMPDIR=/tmp\n\n#location of wengan in the container\nWENGAN=/wengan/wengan-v0.2-bin-Linux/wengan.pl\n\n# Container name\nCONTAINER=wengan_v0.2.sif\n\n\n# Copy container\nrsync -avp /gscratch/srlab/programs/singularity_containers/$CONTAINER .\n\n\n# Concatenate all R1 reads\nfor fastq in \"${trimmed_reads_dir}\"/*_1*.fq.gz\ndo\n  echo \"\"\n  echo \"Generating checksum for ${fastq}\"\n  md5sum \"${fastq}\" >> ${fastq_checksums}\n  echo \"Checksum generated for ${fastq}.\"\n\n  echo \"\"\n  echo \"Concatenating ${fastq} to reads_1.fastq.gz\"\n  cat \"${fastq}\" >> reads_1.fastq.gz\n  echo \"Finished concatenating ${fastq} to reads_1.fastq.gz\"\ndone\n\n# Concatenate all R2 reads\nfor fastq in \"${trimmed_reads_dir}\"/*_2*.fq.gz\ndo\n  echo \"\"\n  echo \"Generating checksum for ${fastq}\"\n  md5sum \"${fastq}\" >> ${fastq_checksums}\n  echo \"Checksum generated for ${fastq}.\"\n\n  echo \"\"\n  echo \"Concatenating ${fastq} to reads_2.fastq.gz\"\n  cat \"${fastq}\" >> reads_2.fastq.gz\n  echo \"Finished concatenating ${fastq} to reads_2.fastq.gz\"\ndone\n\n# Concatenate all PacBio reads\nfor fastq in \"${pacbio_reads_dir}\"/*.fastq.gz\ndo\n  echo \"\"\n  echo \"Generating checksum for ${fastq}\"\n  md5sum \"${fastq}\" >> ${fastq_checksums}\n  echo \"Checksum generated for ${fastq}.\"\n\n  echo \"\"\n  echo \"Concatenating ${fastq} to pacbio.clr.fastq.gz\"\n  cat \"${fastq}\" >> pacbio.clr.fastq.gz\n  echo \"Finished concatenating ${fastq} to pacbio.clr.fastq.gz\"\ndone\n\n\n#run WenganM with singularity exec\nsingularity exec $CONTAINER perl ${WENGAN} \\\n -x pacraw \\\n -a M \\\n -s reads_1.fastq.gz,reads_2.fastq.gz \\\n -l pacbio.clr.fastq.gz \\\n -p Olur_v090 \\\n -t ${threads} \\\n -g ${genome_size}\n\n # Remove concatenated reads files\n rm *.fastq.gz\n\n###################################################################################\n\n# Capture program options\nif [[ \"${#programs_array[@]}\" -gt 0 ]]; then\n  echo \"Logging program options...\"\n  for program in \"${!programs_array[@]}\"\n  do\n    {\n    echo \"Program options for ${program}: \"\n    echo \"\"\n    # Handle samtools help menus\n    if [[ \"${program}\" == \"samtools_index\" ]] \\\n    || [[ \"${program}\" == \"samtools_sort\" ]] \\\n    || [[ \"${program}\" == \"samtools_view\" ]]\n    then\n      ${programs_array[$program]}\n\n    # Handle DIAMOND BLAST menu\n    elif [[ \"${program}\" == \"diamond\" ]]; then\n      ${programs_array[$program]} help\n\n    # Handle NCBI BLASTx menu\n    elif [[ \"${program}\" == \"blastx\" ]]; then\n      ${programs_array[$program]} -help\n    fi\n    ${programs_array[$program]} -h\n    echo \"\"\n    echo \"\"\n    echo \"----------------------------------------------\"\n    echo \"\"\n    echo \"\"\n  } &>> program_options.log || true\n\n    # If MultiQC is in programs_array, copy the config file to this directory.\n    if [[ \"${program}\" == \"multiqc\" ]]; then\n      cp --preserve ~/.multiqc_config.yaml multiqc_config.yaml\n    fi\n  done\nfi\n\n# Document programs in PATH (primarily for program version ID)\n{\n  date\n  echo \"\"\n  echo \"System PATH for $SLURM_JOB_ID\"\n  echo \"\"\n  printf \"%0.s-\" {1..10}\n  echo \"${PATH}\" | tr : \\\\n\n} >> system_path.log\n\necho \"Finished logging system PATH\"\n```\n\n---\n\n# RESULTS\n\nRuntime was was just under 9hrs:\n\n![Wengan Oly genome assembly on Mox runtime](https://github.com/RobertsLab/sams-notebook/blob/master/images/screencaps/20210520_olur_wegan_genome-assembly_runtime.png?raw=true)\n\nOutput folder:\n\n- [20210520_olur_wegan_genome-assembly/](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/)\n\n  - #### Assembly (FastA):\n\n    - [Olur_v090.SPolished.asm.wengan.fasta (172MB)](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/Olur_v090.SPolished.asm.wengan.fasta)\n\n    - [Olur_v090.SPolished.asm.wengan.fasta.fai](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/Olur_v090.SPolished.asm.wengan.fasta.fai)\n\n  - #### BED file:\n\n    - [Olur_v090.SPolished.asm.wengan.bed (29MB)](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/Olur_v090.SPolished.asm.wengan.bed)\n\n  - #### Input FastQ checksums:\n\n    - [fastq_checksums.md5](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/fastq_checksums.md5)\n\n  - #### Wengan Singularity container:\n\n    - [wengan_v0.2.sif (227MB)](https://gannet.fish.washington.edu/Atumefaciens/20210520_olur_wegan_genome-assembly/wengan_v0.2.sif)\n\n\nThe assembly reulted in 19,009 contigs.\n\nNext up, compare this assembly to our other existing assemblies.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../../styles.css"],"toc":true,"toc-depth":5,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.6.42","editor":"source","theme":"darkly","page-layout":"full","code-background":true,"code-copy":true,"title-block-banner":true,"author":"Sam White","toc-title":"Contents","toc-location":"left","layout":"post","title":"Genome Assembly - Olurida_v090 with BGI Illumina and PacBio Hybrid Using Wengan on Mox","date":"2021-05-20 07:38","tags":["wengan","mox","Ostrea lurida","Olympia oyster","BGI","PacBio","Olurida_v090","genome assembly","assembly"],"categories":["2021","Olympia Oyster Genome Assembly"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}