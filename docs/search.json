[
  {
    "objectID": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html",
    "href": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html",
    "title": "sRNA-seq Paired Read Merging Exploratios - Coral E5 Deep Dive",
    "section": "",
    "text": "Our previous sRNA-seq data analysis for this project revealed that the R2 reads didn’t seem to match with anything (specifically, no clade assignments when using miRTrace), which seemed odd. Since the insert sizes should be small for these libraries and the read lengths kind of long (150bp PE), we’d expect the resulting reads to overlap. And, in turn, R2 reads should be reverse complements of R1 reads (and vice versa). After discussing things with Azenta (company which performed library construction and sequencing), they indicated that their in-house pipeline discards the R2 reads because they come from the opposite strand and most miRNAs are found on the R1 strand.\nIt seemed like a bit of waste to discard all the data that exists in the R2 reads, so I wanted to explore merging the reads to see if we could preserve the R2 data. Additionally, I came across XICRA (GitHub repo) (Sanchez Herrero et al. 2021) which describes using paired-end sequence data to identify miRNA isoforms (isomiRs), suggesting that we should try to retain the R2 reads to improve our miRNA analyses.\nI decided to explore merging/trimming using two different sets of software:\n\nBBMerge (Bushnell, Rood, and Singer 2017)\nfastp(Chen 2023; Chen et al. 2018)\n\nBBMerge seemed like a good tool, as it’s specifically designed to handle merging of Illumina PE sequencing reads. Plus, it’s part of the BBTols suite, which has a number of other tools, and packages like this usually have nice cross-compatibility between the different tools.\nfastp has both trimming and merging built into the tools itself, which I hadn’t previously realized (but, had never explored, since this isn’t how we usually work with PE sequencing data). I was simply going to use fastp for trimming, as it’s the trimmer thta I’m most familiar with. I honestly thought I’d trim with fastp, and then merge with BBMerge, but the fact that fastp had it built-in could make my life easier.\nSo, with all of that out of the way, let’s start the analysis. This will only use a single set of PE sequencing reads, as an initial exploration. We’ll decide on the best approach and then use that approach to run all the sequencing data through the chosen “pipeline.”"
  },
  {
    "objectID": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#create-a-bash-variables-file",
    "href": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#create-a-bash-variables-file",
    "title": "sRNA-seq Paired Read Merging Exploratios - Coral E5 Deep Dive",
    "section": "Create a Bash variables file",
    "text": "Create a Bash variables file\nThis allows usage of Bash variables across R Markdown chunks.\n\n{\necho \"#### Assign Variables ####\"\necho \"\"\n\necho \"## Data URL\"\necho 'export raw_reads_url=\"https://owl.fish.washington.edu/nightingales/P_evermanni/30-852430235/\"'\n\necho \"# Data directories\"\necho 'export fastqc_out_dir=\"./fastqc\"'\necho 'export raw_reads_dir=\"./raw\"'\necho 'export trimmed_fastqs_dir=\"./trimmed-reads\"'\necho \"\"\n\necho \"## NEB nebnext-small-rna-library-prep-set-for-illumina adapters\"\necho 'export first_adapter=\"AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC\"'\necho 'export second_adapter=\"GATCGTCGGACTGTAGAACTCTGAACGTGTAGATCTCGGTGGTCGCCGTATCATT\"'\necho \"\"\n\necho \"# Input/output files\"\necho 'export NEB_adapters_fasta=NEB-adapters.fasta'\necho \"\"\n\necho \"# Paths to programs\"\necho 'export programs_dir=\"/home/shared\"'\necho 'export bbmerge=\"${programs_dir}/bbmap-39.06/bbmerge.sh\"'\necho 'export fastp=\"${programs_dir}/fastp\"'\necho 'export fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"'\necho 'export multiqc=/home/sam/programs/mambaforge/bin/multiqc'\necho \"\"\n\necho \"# Set number of CPUs to use\"\necho 'export threads=46'\necho \"\"\n\necho \"# Initialize arrays\"\necho 'export trimmed_fastqs_array=()'\n\n\n} &gt; .bashvars\n\ncat .bashvars\n\n#### Assign Variables ####\n\n## Data URL\nexport raw_reads_url=\"https://owl.fish.washington.edu/nightingales/P_evermanni/30-852430235/\"\n# Data directories\nexport fastqc_out_dir=\"./fastqc\"\nexport raw_reads_dir=\"./raw\"\nexport trimmed_fastqs_dir=\"./trimmed-reads\"\n\n## NEB nebnext-small-rna-library-prep-set-for-illumina adapters\nexport first_adapter=\"AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC\"\nexport second_adapter=\"GATCGTCGGACTGTAGAACTCTGAACGTGTAGATCTCGGTGGTCGCCGTATCATT\"\n\n# Input/output files\nexport NEB_adapters_fasta=NEB-adapters.fasta\n\n# Paths to programs\nexport programs_dir=\"/home/shared\"\nexport bbmerge=\"${programs_dir}/bbmap-39.06/bbmerge.sh\"\nexport fastp=\"${programs_dir}/fastp\"\nexport fastqc=\"${programs_dir}/FastQC-0.12.1/fastqc\"\nexport multiqc=/home/sam/programs/mambaforge/bin/multiqc\n\n# Set number of CPUs to use\nexport threads=46\n\n# Initialize arrays\nexport trimmed_fastqs_array=()"
  },
  {
    "objectID": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#download-raw-srnaseq-reads",
    "href": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#download-raw-srnaseq-reads",
    "title": "sRNA-seq Paired Read Merging Exploratios - Coral E5 Deep Dive",
    "section": "Download raw sRNAseq reads",
    "text": "Download raw sRNAseq reads\nReads are downloaded from https://owl.fish.washington.edu/nightingales/P_evermanni/30-852430235/\nThe --cut-dirs 3 command cuts the preceding directory structure (i.e. nightingales/P_evermanni/30-852430235/) so that we just end up with the reads.\n\n# Load bash variables into memory\nsource .bashvars\n\nmkdir --parents \"${raw_reads_dir}\" \"${trimmed_fastqs_dir}\"\n\nwget \\\n--directory-prefix ${raw_reads_dir} \\\n--recursive \\\n--no-check-certificate \\\n--continue \\\n--cut-dirs 3 \\\n--no-host-directories \\\n--no-parent \\\n--quiet \\\n--accept \"sRNA-POR-79*,checksums.md5\" ${raw_reads_url}\n\nls -lh \"${raw_reads_dir}\"\n\ntotal 1.8G\n-rw-r--r-- 1 sam sam  798 May 17  2023 checksums.md5\n-rw-r--r-- 1 sam sam 899M May 17  2023 sRNA-POR-79-S1-TP2_R1_001.fastq.gz\n-rw-r--r-- 1 sam sam 916M May 17  2023 sRNA-POR-79-S1-TP2_R2_001.fastq.gz\n\n\n\nVerify raw read checksums\n\n# Load bash variables into memory\nsource .bashvars\n\ncd \"${raw_reads_dir}\"\n\n# Checksums file contains other files, so this just looks for the sRNAseq files.\ngrep \"sRNA-POR-79\" checksums.md5 | md5sum --check\n\nsRNA-POR-79-S1-TP2_R1_001.fastq.gz: OK\nsRNA-POR-79-S1-TP2_R2_001.fastq.gz: OK"
  },
  {
    "objectID": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#create-adapters-fasta",
    "href": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#create-adapters-fasta",
    "title": "sRNA-seq Paired Read Merging Exploratios - Coral E5 Deep Dive",
    "section": "Create adapters FastA",
    "text": "Create adapters FastA\n\n# Load bash variables into memory\nsource .bashvars\n\necho \"Creating adapters FastA.\"\necho \"\"\nadapter_count=0\n\n# Check for adapters file first\n# Then create adapters file if doesn't exist\nif [ -f \"${NEB_adapters_fasta}\" ]; then\n  echo \"${NEB_adapters_fasta} already exists. Nothing to do.\"\nelse\n  for adapter in \"${first_adapter}\" \"${second_adapter}\"\n  do\n    adapter_count=$((adapter_count + 1))\n    printf \"&gt;%s\\n%s\\n\" \"adapter_${adapter_count}\" \"${adapter}\"\n  done &gt;&gt; \"${NEB_adapters_fasta}\"\nfi\n\necho \"\"\necho \"Adapters FastA:\"\necho \"\"\ncat \"${NEB_adapters_fasta}\"\necho \"\"\n\nCreating adapters FastA.\n\nNEB-adapters.fasta already exists. Nothing to do.\n\nAdapters FastA:\n\n&gt;adapter_1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCAC\n&gt;adapter_2\nGATCGTCGGACTGTAGAACTCTGAACGTGTAGATCTCGGTGGTCGCCGTATCATT"
  },
  {
    "objectID": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#fastp",
    "href": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#fastp",
    "title": "sRNA-seq Paired Read Merging Exploratios - Coral E5 Deep Dive",
    "section": "fastp",
    "text": "fastp\nfastp has many built-in functions, including before/after trimming plots, and read 1 and read 2 merging.\n\n\n\n\n\n\nNote\n\n\n\nSetting --overlap_len_require 17 forces fastp to look at reads starting at base 17, instead of the default 30 and results in more accurate analyses, since these are sRNA-seq libraries where the expected/desired read lengths will be 17 - 30bp in length.\n\n\n\nPaired-end Trimming\nThe paired end trimming will examine how some of the trimming options impact sequencing read lengths, quality, and subsequent merging.\n\nPolyG Trimming Only\n\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-polyG_only.R1.fq.gz \\\n--out2 ./trimmed-reads/fastp-polyG_only.R2.fq.gz \\\n--disable_adapter_trimming \\\n--trim_poly_g \\\n--overlap_len_require 17 \\\n--thread ${threads} \\\n--html \"fastp-polyG-only.html\" \\\n--json \"fastp-polyG-only.json\" \\\n--report_title \"fastp-polyG-only\"\n\nWARNING: fastp uses up to 16 threads although you specified 46\nRead1 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2604771220(87.8689%)\nQ30 bases: 2427856243(81.9009%)\n\nRead2 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2619314070(88.3595%)\nQ30 bases: 2408732242(81.2557%)\n\nRead1 after filtering:\ntotal reads: 19450041\ntotal bases: 1698288792\nQ20 bases: 1478970498(87.0859%)\nQ30 bases: 1370182460(80.6802%)\n\nRead2 after filtering:\ntotal reads: 19450041\ntotal bases: 1849068926\nQ20 bases: 1690862447(91.444%)\nQ30 bases: 1596965342(86.3659%)\n\nFiltering result:\nreads passed filter: 38900082\nreads failed due to low quality: 595592\nreads failed due to too many N: 40\nreads failed due to too short: 29404\n\nDuplication rate: 10.4184%\n\nInsert size peak (evaluated by paired-end reads): 29\n\nJSON report: fastp-polyG-only.json\nHTML report: fastp-polyG-only.html\n\n/home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz --out1 ./trimmed-reads/fastp-polyG_only.R1.fq.gz --out2 ./trimmed-reads/fastp-polyG_only.R2.fq.gz --disable_adapter_trimming --trim_poly_g --overlap_len_require 17 --thread 46 --html fastp-polyG-only.html --json fastp-polyG-only.json --report_title fastp-polyG-only \nfastp v0.23.2, time used: 42 seconds\n\n\n\n\nAdapters & PolyG Trimming\n\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-adapters-polyG.R1.fq.gz \\\n--out2 ./trimmed-reads/fastp-adapters-polyG.R2.fq.gz \\\n--adapter_fasta NEB-adapters.fasta \\\n--trim_poly_g \\\n--overlap_len_require 17 \\\n--thread ${threads} \\\n--html \"fastp-adapters-polyG.html\" \\\n--json \"fastp-adapters-polyG.json\" \\\n--report_title \"fastp-adapters-polyG-only\"\n\nWARNING: fastp uses up to 16 threads although you specified 46\nRead1 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2604771220(87.8689%)\nQ30 bases: 2427856243(81.9009%)\n\nRead2 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2619314070(88.3595%)\nQ30 bases: 2408732242(81.2557%)\n\nRead1 after filtering:\ntotal reads: 16734573\ntotal bases: 489646406\nQ20 bases: 480139354(98.0584%)\nQ30 bases: 466862298(95.3468%)\n\nRead2 after filtering:\ntotal reads: 16734573\ntotal bases: 492483642\nQ20 bases: 484765577(98.4328%)\nQ30 bases: 469308001(95.2941%)\n\nFiltering result:\nreads passed filter: 33469146\nreads failed due to low quality: 232788\nreads failed due to too many N: 0\nreads failed due to too short: 5823184\nreads with adapter trimmed: 30461598\nbases trimmed due to adapters: 2013836548\n\nDuplication rate: 10.4184%\n\nInsert size peak (evaluated by paired-end reads): 29\n\nJSON report: fastp-adapters-polyG.json\nHTML report: fastp-adapters-polyG.html\n\n/home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz --out1 ./trimmed-reads/fastp-adapters-polyG.R1.fq.gz --out2 ./trimmed-reads/fastp-adapters-polyG.R2.fq.gz --adapter_fasta NEB-adapters.fasta --trim_poly_g --overlap_len_require 17 --thread 46 --html fastp-adapters-polyG.html --json fastp-adapters-polyG.json --report_title fastp-adapters-polyG-only \nfastp v0.23.2, time used: 34 seconds\n\n\n\n\nPolyG Trimming Max Length 31\nThis can’t be run because we know from the polyG only trimming, that most read lengths are &gt;89bp. As such, it will end up discarding all the reads…\n\n\nAdapters & PolyG Trimming Max Length 31\n\n\n\n\n\n\nNote\n\n\n\nThe max length is based on the fastp insert peak size from the adapter and polyG trimming results, and previous evaluation of mean read lengths via FastQC and MultiQC.\n\n\n\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz \\\n--out2 ./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz \\\n--adapter_fasta NEB-adapters.fasta \\\n--trim_poly_g \\\n--overlap_len_require 17 \\\n--length_limit 31 \\\n--thread ${threads} \\\n--html \"fastp-adapters-polyG-31bp.html\" \\\n--json \"fastp-adapters-polyG-31bp.json\" \\\n--report_title \"fastp-adapters-polyG-31bp\"\n\nWARNING: fastp uses up to 16 threads although you specified 46\nRead1 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2604771220(87.8689%)\nQ30 bases: 2427856243(81.9009%)\n\nRead2 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2619314070(88.3595%)\nQ30 bases: 2408732242(81.2557%)\n\nRead1 after filtering:\ntotal reads: 13190855\ntotal bases: 339210880\nQ20 bases: 335529961(98.9149%)\nQ30 bases: 327446980(96.532%)\n\nRead2 after filtering:\ntotal reads: 13190855\ntotal bases: 338558013\nQ20 bases: 335504115(99.098%)\nQ30 bases: 325352134(96.0994%)\n\nFiltering result:\nreads passed filter: 26381710\nreads failed due to low quality: 232788\nreads failed due to too many N: 0\nreads failed due to too short: 5354066\nreads failed due to too long: 7556554\nreads with adapter trimmed: 30461598\nbases trimmed due to adapters: 2013836548\n\nDuplication rate: 10.4184%\n\nInsert size peak (evaluated by paired-end reads): 29\n\nJSON report: fastp-adapters-polyG-31bp.json\nHTML report: fastp-adapters-polyG-31bp.html\n\n/home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz --out1 ./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz --out2 ./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz --adapter_fasta NEB-adapters.fasta --trim_poly_g --overlap_len_require 17 --length_limit 31 --thread 46 --html fastp-adapters-polyG-31bp.html --json fastp-adapters-polyG-31bp.json --report_title fastp-adapters-polyG-31bp \nfastp v0.23.2, time used: 33 seconds\n\n\n\n\nAdapters & PolyG Trimming Max Length 31 With Merge\nThis will attempt to merge the R1 and R2 reads.\n\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\n--adapter_fasta NEB-adapters.fasta \\\n--trim_poly_g \\\n--overlap_len_require 17 \\\n--length_limit 31 \\\n--merge \\\n--merged_out ./trimmed-reads/fastp-adapters-polyG-31bp-merged.fq.gz \\\n--thread ${threads} \\\n--html \"fastp-adapters-polyG-31bp-merged.html\" \\\n--json \"fastp-adapters-polyG-31bp-merged.json\" \\\n--report_title \"fastp-adapters-polyG-31bp-merged\"\n\nWARNING: fastp uses up to 16 threads although you specified 46\nRead1 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2604771220(87.8689%)\nQ30 bases: 2427856243(81.9009%)\n\nRead2 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2619314070(88.3595%)\nQ30 bases: 2408732242(81.2557%)\n\nMerged and filtered:\ntotal reads: 12259576\ntotal bases: 324356716\nQ20 bases: 320917135(98.9396%)\nQ30 bases: 313148708(96.5445%)\n\nFiltering result:\nreads passed filter: 26506174\nreads failed due to low quality: 179320\nreads failed due to too many N: 0\nreads failed due to too short: 5774946\nreads failed due to too long: 7064678\nreads with adapter trimmed: 30461598\nbases trimmed due to adapters: 2013836548\nreads corrected by overlap analysis: 484376\nbases corrected by overlap analysis: 766038\n\nDuplication rate: 10.4184%\n\nInsert size peak (evaluated by paired-end reads): 29\n\nRead pairs merged: 12259576\n% of original read pairs: 62.0344%\n% in reads after filtering: 100%\n\n\nJSON report: fastp-adapters-polyG-31bp-merged.json\nHTML report: fastp-adapters-polyG-31bp-merged.html\n\n/home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --in2 ./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz --adapter_fasta NEB-adapters.fasta --trim_poly_g --overlap_len_require 17 --length_limit 31 --merge --merged_out ./trimmed-reads/fastp-adapters-polyG-31bp-merged.fq.gz --thread 46 --html fastp-adapters-polyG-31bp-merged.html --json fastp-adapters-polyG-31bp-merged.json --report_title fastp-adapters-polyG-31bp-merged \nfastp v0.23.2, time used: 43 seconds\n\n\n\n\n\nSingle-end Trimming - R1 Reads Only\nUsing just the R1 reads, per Azenta’s recommendation.\n\nAuto-adapters & PolyG Trimming\n\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-R1-auto_adapters-polyG.fq.gz \\\n--trim_poly_g \\\n--thread ${threads} \\\n--html \"fastp-R1-auto_adapters-polyG.html\" \\\n--json \"fastp-R1-auto_adapters-polyG.json\" \\\n--report_title \"fastp-R1-auto_adapters-polyG\"\n\nDetecting adapter sequence for read1...\n&gt;Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n\nWARNING: fastp uses up to 16 threads although you specified 46\nRead1 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2604771220(87.8689%)\nQ30 bases: 2427856243(81.9009%)\n\nRead1 after filtering:\ntotal reads: 16984592\ntotal bases: 540469705\nQ20 bases: 522006375(96.5838%)\nQ30 bases: 504657126(93.3738%)\n\nFiltering result:\nreads passed filter: 16984592\nreads failed due to low quality: 30923\nreads failed due to too many N: 1\nreads failed due to too short: 2747043\nreads with adapter trimmed: 18545632\nbases trimmed due to adapters: 1166285709\n\nDuplication rate (may be overestimated since this is SE data): 29.621%\n\nJSON report: fastp-R1-auto_adapters-polyG.json\nHTML report: fastp-R1-auto_adapters-polyG.html\n\n/home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --out1 ./trimmed-reads/fastp-R1-auto_adapters-polyG.fq.gz --trim_poly_g --thread 46 --html fastp-R1-auto_adapters-polyG.html --json fastp-R1-auto_adapters-polyG.json --report_title fastp-R1-auto_adapters-polyG \nfastp v0.23.2, time used: 32 seconds\n\n\n\n\nAuto-adapters & PolyG Trimming Max Length 31\n\n\n\n\n\n\nNote\n\n\n\nThe max length is based on the fastp insert peak size from the adapter and polyG trimming results, and previous evaluation of mean read lengths via FastQC and MultiQC.\n\n\n\n# Load bash variables into memory\nsource .bashvars\n\n\"${fastp}\" \\\n--in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\n--out1 ./trimmed-reads/fastp-R1-31bp-auto_adapters-polyG.fq.gz \\\n--trim_poly_g \\\n--length_limit 31 \\\n--thread ${threads} \\\n--html \"fastp-R1-auto_adapters-polyG-31bp.html\" \\\n--json \"fastp-R1-auto_adapters-polyG-31bp.json\" \\\n--report_title \"fastp-R1-auto_adapters-polyG-31bp\"\n\nDetecting adapter sequence for read1...\n&gt;Illumina TruSeq Adapter Read 1\nAGATCGGAAGAGCACACGTCTGAACTCCAGTCA\n\nWARNING: fastp uses up to 16 threads although you specified 46\nRead1 before filtering:\ntotal reads: 19762559\ntotal bases: 2964383850\nQ20 bases: 2604771220(87.8689%)\nQ30 bases: 2427856243(81.9009%)\n\nRead1 after filtering:\ntotal reads: 12801426\ntotal bases: 328647991\nQ20 bases: 325069951(98.9113%)\nQ30 bases: 317201339(96.517%)\n\nFiltering result:\nreads passed filter: 12801426\nreads failed due to low quality: 30923\nreads failed due to too many N: 1\nreads failed due to too short: 2747043\nreads failed due to too long: 4183166\nreads with adapter trimmed: 18545632\nbases trimmed due to adapters: 1166285709\n\nDuplication rate (may be overestimated since this is SE data): 29.621%\n\nJSON report: fastp-R1-auto_adapters-polyG-31bp.json\nHTML report: fastp-R1-auto_adapters-polyG-31bp.html\n\n/home/shared/fastp --in1 ./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz --out1 ./trimmed-reads/fastp-R1-31bp-auto_adapters-polyG.fq.gz --trim_poly_g --length_limit 31 --thread 46 --html fastp-R1-auto_adapters-polyG-31bp.html --json fastp-R1-auto_adapters-polyG-31bp.json --report_title fastp-R1-auto_adapters-polyG-31bp \nfastp v0.23.2, time used: 32 seconds"
  },
  {
    "objectID": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#bbmerge",
    "href": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#bbmerge",
    "title": "sRNA-seq Paired Read Merging Exploratios - Coral E5 Deep Dive",
    "section": "BBMerge",
    "text": "BBMerge\n\nRaw reads\nBBMerge documentations actually indicates that merging performs best using raw, untrimmed reads, so we’ll try that out first…\n\n# Load bash variables into memory\nsource .bashvars\n${bbmerge} \\\nin1=./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz \\\nin2=./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz \\\nadapters=./NEB-adapters.fasta \\\nmininsert=17 \\\nout=./trimmed-reads/sRNA-POR-79-S1-TP2-raw-bbmerge.fq.gz\n\njava -ea -Xmx1000m -Xms1000m -Djava.library.path=/home/shared/bbmap-39.06/jni/ -cp /home/shared/bbmap-39.06/current/ jgi.BBMerge in1=./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz in2=./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz adapters=./NEB-adapters.fasta mininsert=17 out=./trimmed-reads/sRNA-POR-79-S1-TP2-raw-bbmerge.fq.gz\nExecuting jgi.BBMerge [in1=./raw/sRNA-POR-79-S1-TP2_R1_001.fastq.gz, in2=./raw/sRNA-POR-79-S1-TP2_R2_001.fastq.gz, adapters=./NEB-adapters.fasta, mininsert=17, out=./trimmed-reads/sRNA-POR-79-S1-TP2-raw-bbmerge.fq.gz]\nVersion 39.06\n\nWriting mergable reads merged.\nStarted output threads.\nTotal time: 57.405 seconds.\n\nPairs:                  19762559\nJoined:                 151908      0.769%\nAmbiguous:              0           0.000%\nNo Solution:            19610645    99.231%\nToo Short:              6           0.000%\nAdapters Expected:      60129       0.152%\nAdapters Found:         58428       0.148%\n\nAvg Insert:             131.5\nStandard Deviation:     62.2\nMode:                   156\n\nInsert range:           17 - 289\n90th percentile:        203\n75th percentile:        156\n50th percentile:        156\n25th percentile:        72\n10th percentile:        32\n\n\n\n\nTrimmed PolyG Only\nRunning BBMerge on just raw reads yielded poor results (&gt;99% of reads could not be merged). Additionally, the average insert size was determined to be 131.5bp, which is not going to be useful for sRNA-seq.\nI know that there’s a very large stretch of polyG sequence in the reads (likely due to the small insert size and “long” read length - Gs get added as a “placeholder” base each cycle that exceeds the insert size), so let’s try merging reads after polyG sequence has been trimmed.\n\n# Load bash variables into memory\nsource .bashvars\n\n${bbmerge} \\\nin1=./trimmed-reads/fastp-polyG_only.R1.fq.gz \\\nin2=./trimmed-reads/fastp-polyG_only.R2.fq.gz \\\nadapters=./NEB-adapters.fasta \\\nmininsert=17 \\\nout=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-polyG_only-bbmerge.fq.gz\n\njava -ea -Xmx1000m -Xms1000m -Djava.library.path=/home/shared/bbmap-39.06/jni/ -cp /home/shared/bbmap-39.06/current/ jgi.BBMerge in1=./trimmed-reads/fastp-polyG_only.R1.fq.gz in2=./trimmed-reads/fastp-polyG_only.R2.fq.gz adapters=./NEB-adapters.fasta mininsert=17 out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-polyG_only-bbmerge.fq.gz\nExecuting jgi.BBMerge [in1=./trimmed-reads/fastp-polyG_only.R1.fq.gz, in2=./trimmed-reads/fastp-polyG_only.R2.fq.gz, adapters=./NEB-adapters.fasta, mininsert=17, out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-polyG_only-bbmerge.fq.gz]\nVersion 39.06\n\nWriting mergable reads merged.\nStarted output threads.\nTotal time: 54.149 seconds.\n\nPairs:                  19450041\nJoined:                 12649853    65.038%\nAmbiguous:              0           0.000%\nNo Solution:            5981377     30.753%\nToo Short:              818811      4.210%\nAdapters Expected:      12781441    32.857%\nAdapters Found:         12553911    32.272%\n\nAvg Insert:             30.0\nStandard Deviation:     14.6\nMode:                   29\n\nInsert range:           17 - 289\n90th percentile:        37\n75th percentile:        31\n50th percentile:        29\n25th percentile:        25\n10th percentile:        21\n\n\nThe results from using polyG-trimmed reads are certainly much better than just merging raw reads (12,649,853 reads could be joined this time). Mean insert size is now determined to be 30bp, which is what we might expect. However, the insert range (17 - 289) is still concerning, as reads &gt;30bp likely aren’t usable. Adapter sequences are still present, which are certainly contributing to some of the inability to merge, as well as the large read lengths. So, let’s try merging reads that have been trimmed of both polyG and adapter sequences.\n\n\nTrimmed Adapters & PolyG\n\n# Load bash variables into memory\nsource .bashvars\n\n${bbmerge} \\\nin1=./trimmed-reads/fastp-adapters-polyG.R1.fq.gz \\\nin2=./trimmed-reads/fastp-adapters-polyG.R2.fq.gz \\\nadapters=./NEB-adapters.fasta \\\nmininsert=17 \\\nout=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-bbmerge.fq.gz\n\njava -ea -Xmx1000m -Xms1000m -Djava.library.path=/home/shared/bbmap-39.06/jni/ -cp /home/shared/bbmap-39.06/current/ jgi.BBMerge in1=./trimmed-reads/fastp-adapters-polyG.R1.fq.gz in2=./trimmed-reads/fastp-adapters-polyG.R2.fq.gz adapters=./NEB-adapters.fasta mininsert=17 out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-bbmerge.fq.gz\nExecuting jgi.BBMerge [in1=./trimmed-reads/fastp-adapters-polyG.R1.fq.gz, in2=./trimmed-reads/fastp-adapters-polyG.R2.fq.gz, adapters=./NEB-adapters.fasta, mininsert=17, out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-bbmerge.fq.gz]\nVersion 39.06\n\nWriting mergable reads merged.\nStarted output threads.\nTotal time: 29.695 seconds.\n\nPairs:                  16734573\nJoined:                 15533284    92.822%\nAmbiguous:              0           0.000%\nNo Solution:            603776      3.608%\nToo Short:              597513      3.571%\nAdapters Expected:      28222       0.084%\nAdapters Found:         18307       0.055%\n\nAvg Insert:             29.4\nStandard Deviation:     13.2\nMode:                   29\n\nInsert range:           17 - 289\n90th percentile:        36\n75th percentile:        31\n50th percentile:        29\n25th percentile:        25\n10th percentile:        21\n\n\nWell, trimming adapters certainly made a difference, as well! Now, 15,533,284 reads get joined (as opposed to 12,649,853 when using just polyG-trimmed reads). The average insert size changes very little, but, oddly, the insert range remains the same (17 - 289).\nFor kicks, let’s throw the reads that have been trimmed to 31bp into BBMerge and see what happens.\n\n\nTrimmed Adapters & PolyG Max Length 31bp\n\n# Load bash variables into memory\nsource .bashvars\n\n${bbmerge} \\\nin1=./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz \\\nin2=./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz \\\nadapters=./NEB-adapters.fasta \\\nmininsert=17 \\\nout=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-31bp-bbmerge.fq.gz\n\njava -ea -Xmx1000m -Xms1000m -Djava.library.path=/home/shared/bbmap-39.06/jni/ -cp /home/shared/bbmap-39.06/current/ jgi.BBMerge in1=./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz in2=./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz adapters=./NEB-adapters.fasta mininsert=17 out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-31bp-bbmerge.fq.gz\nExecuting jgi.BBMerge [in1=./trimmed-reads/fastp-adapters-polyG-31bp.R1.fq.gz, in2=./trimmed-reads/fastp-adapters-polyG-31bp.R2.fq.gz, adapters=./NEB-adapters.fasta, mininsert=17, out=./trimmed-reads/sRNA-POR-79-S1-TP2-fastp-adapters-polyG-31bp-bbmerge.fq.gz]\nVersion 39.06\n\nWriting mergable reads merged.\nStarted output threads.\nTotal time: 22.438 seconds.\n\nPairs:                  13190855\nJoined:                 12346728    93.601%\nAmbiguous:              0           0.000%\nNo Solution:            281891      2.137%\nToo Short:              562236      4.262%\nAdapters Expected:      4           0.000%\nAdapters Found:         4           0.000%\n\nAvg Insert:             26.3\nStandard Deviation:     4.0\nMode:                   29\n\nInsert range:           17 - 35\n90th percentile:        31\n75th percentile:        29\n50th percentile:        28\n25th percentile:        24\n10th percentile:        20\n\n\nThis resulted in 12,346,728 reads being joined. This is on par with the 12,649,853 reads joined when using just polyG-trimmed reads. Additionally, we see the average insert size is 26.3bp, which is even more inline with what we’d expect for miRNAs (22-24bp), and the insert range is also inline with what we’d expect for these libraries (17 - 35bp). However, this is about 20% fewer reads than the 15,533,284 reads when using polyG- and adapter-trimmed reads.\nMaybe I’ll test out the subsequent downstream analyses using these different merging results…"
  },
  {
    "objectID": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#fastqc",
    "href": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#fastqc",
    "title": "sRNA-seq Paired Read Merging Exploratios - Coral E5 Deep Dive",
    "section": "FastQC",
    "text": "FastQC\n\n# Load bash variables into memory\nsource .bashvars\n\n# Populate array with FastQ files\nfastq_array=(./trimmed-reads/*.fq.gz)\n\n# Pass array contents to new variable\nfastqc_list=$(echo \"${fastq_array[*]}\")\n\n# Run FastQC\n# NOTE: Do NOT quote ${fastqc_list}\n${fastqc} \\\n--threads ${threads} \\\n--quiet \\\n--outdir ./ \\\n${fastqc_list}\n\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip\napplication/gzip"
  },
  {
    "objectID": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#multiqc",
    "href": "posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive/index.html#multiqc",
    "title": "sRNA-seq Paired Read Merging Exploratios - Coral E5 Deep Dive",
    "section": "MultiQC",
    "text": "MultiQC\n\n# Load bash variables into memory\nsource .bashvars\n\n${multiqc} .\n\n\n  /// MultiQC 🔍 | v1.14\n\n|           multiqc | MultiQC Version v1.20 now available!\n|           multiqc | Search path : /home/shared/8TB_HDD_01/sam/gitrepos/RobertsLab/sams-notebook/posts/2024/2024-02-02-sRNA-seq-Paired-Read-Merging-Exploratios---Coral-E5-Deep-Dive\n|         searching | ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 100% 108/108  \n|            fastqc | Found 13 reports\n|           multiqc | Compressing plot data\n|           multiqc | Report      : multiqc_report.html\n|           multiqc | Data        : multiqc_data\n|           multiqc | MultiQC complete\n\n\nCheck out the MultiQC results here (HTML):\n\nMultiQC Report"
  }
]